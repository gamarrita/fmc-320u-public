
02_stop_mode_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e0  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080037e8  080037e8  000137e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080037ec  080037ec  000137ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000009  20000000  080037f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000050  2000000c  080037f9  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000005c  080037f9  0002005c  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c6cb  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ef5  00000000  00000000  0002c74d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ce0  00000000  00000000  0002e648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009a5  00000000  00000000  0002f328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00030bf1  00000000  00000000  0002fccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000dacf  00000000  00000000  000608be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00132eb2  00000000  00000000  0006e38d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000034c0  00000000  00000000  001a1240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000059  00000000  00000000  001a4700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	08003700 	.word	0x08003700

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	08003700 	.word	0x08003700

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027c:	f000 fa4e 	bl	800071c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000280:	f000 f81e 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000284:	f000 f8e2 	bl	800044c <MX_GPIO_Init>
  MX_ICACHE_Init();
 8000288:	f000 f872 	bl	8000370 <MX_ICACHE_Init>
  MX_RTC_Init();
 800028c:	f000 f884 	bl	8000398 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(WAIT_STLINK);
 8000290:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000294:	f000 fac6 	bl	8000824 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_2_ACTIVE_GPIO_Port, LED_2_ACTIVE_Pin, GPIO_PIN_RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	2140      	movs	r1, #64	; 0x40
 800029c:	4807      	ldr	r0, [pc, #28]	; (80002bc <main+0x44>)
 800029e:	f000 fdcd 	bl	8000e3c <HAL_GPIO_WritePin>
	  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80002a2:	2001      	movs	r0, #1
 80002a4:	f000 feae 	bl	8001004 <HAL_PWREx_EnterSTOP2Mode>
	  HAL_GPIO_WritePin(LED_2_ACTIVE_GPIO_Port, LED_2_ACTIVE_Pin, GPIO_PIN_SET);
 80002a8:	2201      	movs	r2, #1
 80002aa:	2140      	movs	r1, #64	; 0x40
 80002ac:	4803      	ldr	r0, [pc, #12]	; (80002bc <main+0x44>)
 80002ae:	f000 fdc5 	bl	8000e3c <HAL_GPIO_WritePin>
	  HAL_Delay(ACTIVE_MILI_SECONDS);
 80002b2:	200a      	movs	r0, #10
 80002b4:	f000 fab6 	bl	8000824 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_2_ACTIVE_GPIO_Port, LED_2_ACTIVE_Pin, GPIO_PIN_RESET);
 80002b8:	e7ee      	b.n	8000298 <main+0x20>
 80002ba:	bf00      	nop
 80002bc:	42020400 	.word	0x42020400

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b09e      	sub	sp, #120	; 0x78
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0318 	add.w	r3, r7, #24
 80002ca:	2260      	movs	r2, #96	; 0x60
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f003 f9ea 	bl	80036a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	463b      	mov	r3, r7
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]
 80002e2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 fe01 	bl	8000eec <HAL_PWREx_ControlVoltageScaling>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002f0:	f000 f90a 	bl	8000508 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002f4:	f000 fdea 	bl	8000ecc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002f8:	4b1c      	ldr	r3, [pc, #112]	; (800036c <SystemClock_Config+0xac>)
 80002fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80002fe:	4a1b      	ldr	r2, [pc, #108]	; (800036c <SystemClock_Config+0xac>)
 8000300:	f023 0318 	bic.w	r3, r3, #24
 8000304:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000308:	2314      	movs	r3, #20
 800030a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800030c:	2381      	movs	r3, #129	; 0x81
 800030e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000310:	2301      	movs	r3, #1
 8000312:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000314:	2310      	movs	r3, #16
 8000316:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_1;
 8000318:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800031c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800031e:	2300      	movs	r3, #0
 8000320:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000322:	f107 0318 	add.w	r3, r7, #24
 8000326:	4618      	mov	r0, r3
 8000328:	f000 fe98 	bl	800105c <HAL_RCC_OscConfig>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000332:	f000 f8e9 	bl	8000508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000336:	231f      	movs	r3, #31
 8000338:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800033a:	2300      	movs	r3, #0
 800033c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000342:	2300      	movs	r3, #0
 8000344:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000346:	2300      	movs	r3, #0
 8000348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800034a:	2300      	movs	r3, #0
 800034c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800034e:	463b      	mov	r3, r7
 8000350:	2101      	movs	r1, #1
 8000352:	4618      	mov	r0, r3
 8000354:	f001 fd5e 	bl	8001e14 <HAL_RCC_ClockConfig>
 8000358:	4603      	mov	r3, r0
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800035e:	f000 f8d3 	bl	8000508 <Error_Handler>
  }
}
 8000362:	bf00      	nop
 8000364:	3778      	adds	r7, #120	; 0x78
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	46020c00 	.word	0x46020c00

08000370 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000374:	2000      	movs	r0, #0
 8000376:	f000 fd79 	bl	8000e6c <HAL_ICACHE_ConfigAssociativityMode>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000380:	f000 f8c2 	bl	8000508 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000384:	f000 fd92 	bl	8000eac <HAL_ICACHE_Enable>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800038e:	f000 f8bb 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
	...

08000398 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	601a      	str	r2, [r3, #0]
 80003a4:	605a      	str	r2, [r3, #4]
 80003a6:	609a      	str	r2, [r3, #8]
 80003a8:	60da      	str	r2, [r3, #12]
 80003aa:	611a      	str	r2, [r3, #16]
 80003ac:	615a      	str	r2, [r3, #20]
 80003ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80003b0:	4b24      	ldr	r3, [pc, #144]	; (8000444 <MX_RTC_Init+0xac>)
 80003b2:	4a25      	ldr	r2, [pc, #148]	; (8000448 <MX_RTC_Init+0xb0>)
 80003b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80003b6:	4b23      	ldr	r3, [pc, #140]	; (8000444 <MX_RTC_Init+0xac>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80003bc:	4b21      	ldr	r3, [pc, #132]	; (8000444 <MX_RTC_Init+0xac>)
 80003be:	227f      	movs	r2, #127	; 0x7f
 80003c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80003c2:	4b20      	ldr	r3, [pc, #128]	; (8000444 <MX_RTC_Init+0xac>)
 80003c4:	22ff      	movs	r2, #255	; 0xff
 80003c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80003c8:	4b1e      	ldr	r3, [pc, #120]	; (8000444 <MX_RTC_Init+0xac>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80003ce:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <MX_RTC_Init+0xac>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80003d4:	4b1b      	ldr	r3, [pc, #108]	; (8000444 <MX_RTC_Init+0xac>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003da:	4b1a      	ldr	r3, [pc, #104]	; (8000444 <MX_RTC_Init+0xac>)
 80003dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80003e2:	4b18      	ldr	r3, [pc, #96]	; (8000444 <MX_RTC_Init+0xac>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80003e8:	4b16      	ldr	r3, [pc, #88]	; (8000444 <MX_RTC_Init+0xac>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003ee:	4815      	ldr	r0, [pc, #84]	; (8000444 <MX_RTC_Init+0xac>)
 80003f0:	f002 ff78 	bl	80032e4 <HAL_RTC_Init>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80003fa:	f000 f885 	bl	8000508 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000402:	2300      	movs	r3, #0
 8000404:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000406:	2300      	movs	r3, #0
 8000408:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800040a:	2300      	movs	r3, #0
 800040c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	4619      	mov	r1, r3
 8000412:	480c      	ldr	r0, [pc, #48]	; (8000444 <MX_RTC_Init+0xac>)
 8000414:	f003 f91a 	bl	800364c <HAL_RTCEx_PrivilegeModeSet>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 800041e:	f000 f873 	bl	8000508 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2048, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 2048) != HAL_OK)
 8000422:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000426:	2200      	movs	r2, #0
 8000428:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800042c:	4805      	ldr	r0, [pc, #20]	; (8000444 <MX_RTC_Init+0xac>)
 800042e:	f003 f887 	bl	8003540 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000438:	f000 f866 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800043c:	bf00      	nop
 800043e:	3720      	adds	r7, #32
 8000440:	46bd      	mov	sp, r7
 8000442:	bd80      	pop	{r7, pc}
 8000444:	20000028 	.word	0x20000028
 8000448:	46007800 	.word	0x46007800

0800044c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b088      	sub	sp, #32
 8000450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000452:	f107 030c 	add.w	r3, r7, #12
 8000456:	2200      	movs	r2, #0
 8000458:	601a      	str	r2, [r3, #0]
 800045a:	605a      	str	r2, [r3, #4]
 800045c:	609a      	str	r2, [r3, #8]
 800045e:	60da      	str	r2, [r3, #12]
 8000460:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000462:	4b22      	ldr	r3, [pc, #136]	; (80004ec <MX_GPIO_Init+0xa0>)
 8000464:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000468:	4a20      	ldr	r2, [pc, #128]	; (80004ec <MX_GPIO_Init+0xa0>)
 800046a:	f043 0304 	orr.w	r3, r3, #4
 800046e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000472:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <MX_GPIO_Init+0xa0>)
 8000474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000478:	f003 0304 	and.w	r3, r3, #4
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000480:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <MX_GPIO_Init+0xa0>)
 8000482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000486:	4a19      	ldr	r2, [pc, #100]	; (80004ec <MX_GPIO_Init+0xa0>)
 8000488:	f043 0301 	orr.w	r3, r3, #1
 800048c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000490:	4b16      	ldr	r3, [pc, #88]	; (80004ec <MX_GPIO_Init+0xa0>)
 8000492:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000496:	f003 0301 	and.w	r3, r3, #1
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_GPIO_Init+0xa0>)
 80004a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80004a4:	4a11      	ldr	r2, [pc, #68]	; (80004ec <MX_GPIO_Init+0xa0>)
 80004a6:	f043 0302 	orr.w	r3, r3, #2
 80004aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_GPIO_Init+0xa0>)
 80004b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80004b4:	f003 0302 	and.w	r3, r3, #2
 80004b8:	603b      	str	r3, [r7, #0]
 80004ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_2_ACTIVE_GPIO_Port, LED_2_ACTIVE_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2140      	movs	r1, #64	; 0x40
 80004c0:	480b      	ldr	r0, [pc, #44]	; (80004f0 <MX_GPIO_Init+0xa4>)
 80004c2:	f000 fcbb 	bl	8000e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_2_ACTIVE_Pin */
  GPIO_InitStruct.Pin = LED_2_ACTIVE_Pin;
 80004c6:	2340      	movs	r3, #64	; 0x40
 80004c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ca:	2301      	movs	r3, #1
 80004cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d2:	2300      	movs	r3, #0
 80004d4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_2_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80004d6:	f107 030c 	add.w	r3, r7, #12
 80004da:	4619      	mov	r1, r3
 80004dc:	4804      	ldr	r0, [pc, #16]	; (80004f0 <MX_GPIO_Init+0xa4>)
 80004de:	f000 fad5 	bl	8000a8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80004e2:	bf00      	nop
 80004e4:	3720      	adds	r7, #32
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	46020c00 	.word	0x46020c00
 80004f0:	42020400 	.word	0x42020400

080004f4 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  DHS redefine Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80004fc:	bf00      	nop
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <HAL_MspInit+0x30>)
 800051c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000520:	4a08      	ldr	r2, [pc, #32]	; (8000544 <HAL_MspInit+0x30>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800052a:	4b06      	ldr	r3, [pc, #24]	; (8000544 <HAL_MspInit+0x30>)
 800052c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000538:	bf00      	nop
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	46020c00 	.word	0x46020c00

08000548 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b0b4      	sub	sp, #208	; 0xd0
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000550:	f107 0310 	add.w	r3, r7, #16
 8000554:	22c0      	movs	r2, #192	; 0xc0
 8000556:	2100      	movs	r1, #0
 8000558:	4618      	mov	r0, r3
 800055a:	f003 f8a5 	bl	80036a8 <memset>
  if(hrtc->Instance==RTC)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a21      	ldr	r2, [pc, #132]	; (80005e8 <HAL_RTC_MspInit+0xa0>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d13a      	bne.n	80005de <HAL_RTC_MspInit+0x96>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000568:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800056c:	f04f 0300 	mov.w	r3, #0
 8000570:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000574:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000578:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800057c:	f107 0310 	add.w	r3, r7, #16
 8000580:	4618      	mov	r0, r3
 8000582:	f001 ffdb 	bl	800253c <HAL_RCCEx_PeriphCLKConfig>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 800058c:	f7ff ffbc 	bl	8000508 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000590:	4b16      	ldr	r3, [pc, #88]	; (80005ec <HAL_RTC_MspInit+0xa4>)
 8000592:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000596:	4a15      	ldr	r2, [pc, #84]	; (80005ec <HAL_RTC_MspInit+0xa4>)
 8000598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800059c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80005a0:	4b12      	ldr	r3, [pc, #72]	; (80005ec <HAL_RTC_MspInit+0xa4>)
 80005a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80005a6:	4a11      	ldr	r2, [pc, #68]	; (80005ec <HAL_RTC_MspInit+0xa4>)
 80005a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005ac:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 80005b0:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <HAL_RTC_MspInit+0xa4>)
 80005b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80005b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 80005be:	4b0b      	ldr	r3, [pc, #44]	; (80005ec <HAL_RTC_MspInit+0xa4>)
 80005c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80005c4:	4a09      	ldr	r2, [pc, #36]	; (80005ec <HAL_RTC_MspInit+0xa4>)
 80005c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005ca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	2002      	movs	r0, #2
 80005d4:	f000 fa25 	bl	8000a22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80005d8:	2002      	movs	r0, #2
 80005da:	f000 fa3c 	bl	8000a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80005de:	bf00      	nop
 80005e0:	37d0      	adds	r7, #208	; 0xd0
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	46007800 	.word	0x46007800
 80005ec:	46020c00 	.word	0x46020c00

080005f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005f4:	e7fe      	b.n	80005f4 <NMI_Handler+0x4>

080005f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f6:	b480      	push	{r7}
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005fa:	e7fe      	b.n	80005fa <HardFault_Handler+0x4>

080005fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000600:	e7fe      	b.n	8000600 <MemManage_Handler+0x4>

08000602 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000606:	e7fe      	b.n	8000606 <BusFault_Handler+0x4>

08000608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800060c:	e7fe      	b.n	800060c <UsageFault_Handler+0x4>

0800060e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060e:	b480      	push	{r7}
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000612:	bf00      	nop
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr

0800061c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800063c:	f000 f8d2 	bl	80007e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}

08000644 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <RTC_IRQHandler+0x10>)
 800064a:	f002 ffe5 	bl	8003618 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000028 	.word	0x20000028

08000658 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <SystemInit+0x68>)
 800065e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000662:	4a17      	ldr	r2, [pc, #92]	; (80006c0 <SystemInit+0x68>)
 8000664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <SystemInit+0x6c>)
 800066e:	2201      	movs	r2, #1
 8000670:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <SystemInit+0x6c>)
 8000674:	2200      	movs	r2, #0
 8000676:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <SystemInit+0x6c>)
 800067a:	2200      	movs	r2, #0
 800067c:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <SystemInit+0x6c>)
 8000680:	2200      	movs	r2, #0
 8000682:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <SystemInit+0x6c>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <SystemInit+0x6c>)
 800068a:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800068e:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000692:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <SystemInit+0x6c>)
 8000696:	2200      	movs	r2, #0
 8000698:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <SystemInit+0x6c>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a09      	ldr	r2, [pc, #36]	; (80006c4 <SystemInit+0x6c>)
 80006a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006a4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <SystemInit+0x6c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <SystemInit+0x68>)
 80006ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006b2:	609a      	str	r2, [r3, #8]
  #endif
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	e000ed00 	.word	0xe000ed00
 80006c4:	46020c00 	.word	0x46020c00

080006c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80006c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000700 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006cc:	f7ff ffc4 	bl	8000658 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006d2:	e003      	b.n	80006dc <LoopCopyDataInit>

080006d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006d4:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006da:	3104      	adds	r1, #4

080006dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006dc:	480a      	ldr	r0, [pc, #40]	; (8000708 <LoopForever+0xa>)
	ldr	r3, =_edata
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <LoopForever+0xe>)
	adds	r2, r0, r1
 80006e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006e4:	d3f6      	bcc.n	80006d4 <CopyDataInit>
	ldr	r2, =_sbss
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <LoopForever+0x12>)
	b	LoopFillZerobss
 80006e8:	e002      	b.n	80006f0 <LoopFillZerobss>

080006ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006ec:	f842 3b04 	str.w	r3, [r2], #4

080006f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006f0:	4b08      	ldr	r3, [pc, #32]	; (8000714 <LoopForever+0x16>)
	cmp	r2, r3
 80006f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006f4:	d3f9      	bcc.n	80006ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006f6:	f002 ffdf 	bl	80036b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006fa:	f7ff fdbd 	bl	8000278 <main>

080006fe <LoopForever>:

LoopForever:
    b LoopForever
 80006fe:	e7fe      	b.n	80006fe <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000700:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000704:	080037f0 	.word	0x080037f0
	ldr	r0, =_sdata
 8000708:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800070c:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8000710:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000714:	2000005c 	.word	0x2000005c

08000718 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000718:	e7fe      	b.n	8000718 <ADC1_IRQHandler>
	...

0800071c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_Init+0x4c>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a10      	ldr	r2, [pc, #64]	; (8000768 <HAL_Init+0x4c>)
 8000726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800072c:	2003      	movs	r0, #3
 800072e:	f000 f96d 	bl	8000a0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000732:	f001 fd61 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 8000736:	4602      	mov	r2, r0
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_Init+0x50>)
 800073a:	6a1b      	ldr	r3, [r3, #32]
 800073c:	f003 030f 	and.w	r3, r3, #15
 8000740:	490b      	ldr	r1, [pc, #44]	; (8000770 <HAL_Init+0x54>)
 8000742:	5ccb      	ldrb	r3, [r1, r3]
 8000744:	fa22 f303 	lsr.w	r3, r2, r3
 8000748:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <HAL_Init+0x58>)
 800074a:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800074c:	200f      	movs	r0, #15
 800074e:	f000 f813 	bl	8000778 <HAL_InitTick>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000758:	2301      	movs	r3, #1
 800075a:	e002      	b.n	8000762 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800075c:	f7ff feda 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000760:	2300      	movs	r3, #0
}
 8000762:	4618      	mov	r0, r3
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40022000 	.word	0x40022000
 800076c:	46020c00 	.word	0x46020c00
 8000770:	08003718 	.word	0x08003718
 8000774:	20000000 	.word	0x20000000

08000778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_InitTick+0x60>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d101      	bne.n	800078c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000788:	2301      	movs	r3, #1
 800078a:	e021      	b.n	80007d0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800078c:	4b13      	ldr	r3, [pc, #76]	; (80007dc <HAL_InitTick+0x64>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_InitTick+0x60>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	4619      	mov	r1, r3
 8000796:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800079a:	fbb3 f3f1 	udiv	r3, r3, r1
 800079e:	fbb2 f3f3 	udiv	r3, r2, r3
 80007a2:	4618      	mov	r0, r3
 80007a4:	f000 f965 	bl	8000a72 <HAL_SYSTICK_Config>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
 80007b0:	e00e      	b.n	80007d0 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	2b0f      	cmp	r3, #15
 80007b6:	d80a      	bhi.n	80007ce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007b8:	2200      	movs	r2, #0
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	f04f 30ff 	mov.w	r0, #4294967295
 80007c0:	f000 f92f 	bl	8000a22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007c4:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <HAL_InitTick+0x68>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ca:	2300      	movs	r3, #0
 80007cc:	e000      	b.n	80007d0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000008 	.word	0x20000008
 80007dc:	20000000 	.word	0x20000000
 80007e0:	20000004 	.word	0x20000004

080007e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <HAL_IncTick+0x20>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <HAL_IncTick+0x24>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	4a04      	ldr	r2, [pc, #16]	; (8000808 <HAL_IncTick+0x24>)
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000008 	.word	0x20000008
 8000808:	20000058 	.word	0x20000058

0800080c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  return uwTick;
 8000810:	4b03      	ldr	r3, [pc, #12]	; (8000820 <HAL_GetTick+0x14>)
 8000812:	681b      	ldr	r3, [r3, #0]
}
 8000814:	4618      	mov	r0, r3
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	20000058 	.word	0x20000058

08000824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800082c:	f7ff ffee 	bl	800080c <HAL_GetTick>
 8000830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800083c:	d005      	beq.n	800084a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <HAL_Delay+0x44>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	461a      	mov	r2, r3
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	4413      	add	r3, r2
 8000848:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800084a:	bf00      	nop
 800084c:	f7ff ffde 	bl	800080c <HAL_GetTick>
 8000850:	4602      	mov	r2, r0
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	1ad3      	subs	r3, r2, r3
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	429a      	cmp	r2, r3
 800085a:	d8f7      	bhi.n	800084c <HAL_Delay+0x28>
  {
  }
}
 800085c:	bf00      	nop
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000008 	.word	0x20000008

0800086c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000894:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <__NVIC_SetPriorityGrouping+0x44>)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	60d3      	str	r3, [r2, #12]
}
 80008a4:	bf00      	nop
 80008a6:	3714      	adds	r7, #20
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008b8:	4b04      	ldr	r3, [pc, #16]	; (80008cc <__NVIC_GetPriorityGrouping+0x18>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	0a1b      	lsrs	r3, r3, #8
 80008be:	f003 0307 	and.w	r3, r3, #7
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	db0b      	blt.n	80008fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	f003 021f 	and.w	r2, r3, #31
 80008e8:	4907      	ldr	r1, [pc, #28]	; (8000908 <__NVIC_EnableIRQ+0x38>)
 80008ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ee:	095b      	lsrs	r3, r3, #5
 80008f0:	2001      	movs	r0, #1
 80008f2:	fa00 f202 	lsl.w	r2, r0, r2
 80008f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000e100 	.word	0xe000e100

0800090c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	6039      	str	r1, [r7, #0]
 8000916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091c:	2b00      	cmp	r3, #0
 800091e:	db0a      	blt.n	8000936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	b2da      	uxtb	r2, r3
 8000924:	490c      	ldr	r1, [pc, #48]	; (8000958 <__NVIC_SetPriority+0x4c>)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	0112      	lsls	r2, r2, #4
 800092c:	b2d2      	uxtb	r2, r2
 800092e:	440b      	add	r3, r1
 8000930:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000934:	e00a      	b.n	800094c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	b2da      	uxtb	r2, r3
 800093a:	4908      	ldr	r1, [pc, #32]	; (800095c <__NVIC_SetPriority+0x50>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	f003 030f 	and.w	r3, r3, #15
 8000942:	3b04      	subs	r3, #4
 8000944:	0112      	lsls	r2, r2, #4
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	440b      	add	r3, r1
 800094a:	761a      	strb	r2, [r3, #24]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000e100 	.word	0xe000e100
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000960:	b480      	push	{r7}
 8000962:	b089      	sub	sp, #36	; 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f003 0307 	and.w	r3, r3, #7
 8000972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	f1c3 0307 	rsb	r3, r3, #7
 800097a:	2b04      	cmp	r3, #4
 800097c:	bf28      	it	cs
 800097e:	2304      	movcs	r3, #4
 8000980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	3304      	adds	r3, #4
 8000986:	2b06      	cmp	r3, #6
 8000988:	d902      	bls.n	8000990 <NVIC_EncodePriority+0x30>
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3b03      	subs	r3, #3
 800098e:	e000      	b.n	8000992 <NVIC_EncodePriority+0x32>
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000994:	f04f 32ff 	mov.w	r2, #4294967295
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43da      	mvns	r2, r3
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	401a      	ands	r2, r3
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009a8:	f04f 31ff 	mov.w	r1, #4294967295
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	43d9      	mvns	r1, r3
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b8:	4313      	orrs	r3, r2
         );
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3724      	adds	r7, #36	; 0x24
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
	...

080009c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009d8:	d301      	bcc.n	80009de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009da:	2301      	movs	r3, #1
 80009dc:	e00f      	b.n	80009fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <SysTick_Config+0x40>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009e6:	210f      	movs	r1, #15
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ec:	f7ff ff8e 	bl	800090c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <SysTick_Config+0x40>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009f6:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <SysTick_Config+0x40>)
 80009f8:	2207      	movs	r2, #7
 80009fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	e000e010 	.word	0xe000e010

08000a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ff29 	bl	800086c <__NVIC_SetPriorityGrouping>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a30:	f7ff ff40 	bl	80008b4 <__NVIC_GetPriorityGrouping>
 8000a34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	68b9      	ldr	r1, [r7, #8]
 8000a3a:	6978      	ldr	r0, [r7, #20]
 8000a3c:	f7ff ff90 	bl	8000960 <NVIC_EncodePriority>
 8000a40:	4602      	mov	r2, r0
 8000a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f7ff ff5f 	bl	800090c <__NVIC_SetPriority>
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff33 	bl	80008d0 <__NVIC_EnableIRQ>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffa4 	bl	80009c8 <SysTick_Config>
 8000a80:	4603      	mov	r3, r0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b089      	sub	sp, #36	; 0x24
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000a9e:	e1ba      	b.n	8000e16 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8000aac:	4013      	ands	r3, r2
 8000aae:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	f000 81aa 	beq.w	8000e10 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a55      	ldr	r2, [pc, #340]	; (8000c14 <HAL_GPIO_Init+0x188>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d15d      	bne.n	8000b80 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000aca:	2201      	movs	r2, #1
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	69fa      	ldr	r2, [r7, #28]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f003 0201 	and.w	r2, r3, #1
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae8:	69fa      	ldr	r2, [r7, #28]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	69fa      	ldr	r2, [r7, #28]
 8000af2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000af4:	4a48      	ldr	r2, [pc, #288]	; (8000c18 <HAL_GPIO_Init+0x18c>)
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000afc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000afe:	4a46      	ldr	r2, [pc, #280]	; (8000c18 <HAL_GPIO_Init+0x18c>)
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	00db      	lsls	r3, r3, #3
 8000b04:	4413      	add	r3, r2
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	08da      	lsrs	r2, r3, #3
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	3208      	adds	r2, #8
 8000b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b16:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	009b      	lsls	r3, r3, #2
 8000b20:	220f      	movs	r2, #15
 8000b22:	fa02 f303 	lsl.w	r3, r2, r3
 8000b26:	43db      	mvns	r3, r3
 8000b28:	69fa      	ldr	r2, [r7, #28]
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000b2e:	69bb      	ldr	r3, [r7, #24]
 8000b30:	f003 0307 	and.w	r3, r3, #7
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	220b      	movs	r2, #11
 8000b38:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3c:	69fa      	ldr	r2, [r7, #28]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	08da      	lsrs	r2, r3, #3
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	3208      	adds	r2, #8
 8000b4a:	69f9      	ldr	r1, [r7, #28]
 8000b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b60:	43db      	mvns	r3, r3
 8000b62:	69fa      	ldr	r2, [r7, #28]
 8000b64:	4013      	ands	r3, r2
 8000b66:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	2202      	movs	r2, #2
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	69fa      	ldr	r2, [r7, #28]
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	e067      	b.n	8000c50 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d003      	beq.n	8000b90 <HAL_GPIO_Init+0x104>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b12      	cmp	r3, #18
 8000b8e:	d145      	bne.n	8000c1c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	08da      	lsrs	r2, r3, #3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3208      	adds	r2, #8
 8000b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b9c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	f003 0307 	and.w	r3, r3, #7
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	220f      	movs	r2, #15
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	69fa      	ldr	r2, [r7, #28]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	691b      	ldr	r3, [r3, #16]
 8000bb8:	f003 020f 	and.w	r2, r3, #15
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	009b      	lsls	r3, r3, #2
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	69fa      	ldr	r2, [r7, #28]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	08da      	lsrs	r2, r3, #3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	3208      	adds	r2, #8
 8000bd6:	69f9      	ldr	r1, [r7, #28]
 8000bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	2203      	movs	r2, #3
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	69fa      	ldr	r2, [r7, #28]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 0203 	and.w	r2, r3, #3
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	69fa      	ldr	r2, [r7, #28]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	69fa      	ldr	r2, [r7, #28]
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	e01e      	b.n	8000c50 <HAL_GPIO_Init+0x1c4>
 8000c12:	bf00      	nop
 8000c14:	46020000 	.word	0x46020000
 8000c18:	08003768 	.word	0x08003768
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2203      	movs	r2, #3
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	4013      	ands	r3, r2
 8000c32:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0203 	and.w	r2, r3, #3
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	005b      	lsls	r3, r3, #1
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	69fa      	ldr	r2, [r7, #28]
 8000c46:	4313      	orrs	r3, r2
 8000c48:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	69fa      	ldr	r2, [r7, #28]
 8000c4e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d00b      	beq.n	8000c70 <HAL_GPIO_Init+0x1e4>
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d007      	beq.n	8000c70 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c64:	2b11      	cmp	r3, #17
 8000c66:	d003      	beq.n	8000c70 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	2b12      	cmp	r3, #18
 8000c6e:	d130      	bne.n	8000cd2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69fa      	ldr	r2, [r7, #28]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69fa      	ldr	r2, [r7, #28]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	69fa      	ldr	r2, [r7, #28]
 8000c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	69fa      	ldr	r2, [r7, #28]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	091b      	lsrs	r3, r3, #4
 8000cbc:	f003 0201 	and.w	r2, r3, #1
 8000cc0:	69bb      	ldr	r3, [r7, #24]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	69fa      	ldr	r2, [r7, #28]
 8000cc8:	4313      	orrs	r3, r2
 8000cca:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	69fa      	ldr	r2, [r7, #28]
 8000cd0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b03      	cmp	r3, #3
 8000cd8:	d017      	beq.n	8000d0a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8000ce0:	69bb      	ldr	r3, [r7, #24]
 8000ce2:	005b      	lsls	r3, r3, #1
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69fa      	ldr	r2, [r7, #28]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	689a      	ldr	r2, [r3, #8]
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	69fa      	ldr	r2, [r7, #28]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d07c      	beq.n	8000e10 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000d16:	4a47      	ldr	r2, [pc, #284]	; (8000e34 <HAL_GPIO_Init+0x3a8>)
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	3318      	adds	r3, #24
 8000d1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d22:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f003 0303 	and.w	r3, r3, #3
 8000d2a:	00db      	lsls	r3, r3, #3
 8000d2c:	220f      	movs	r2, #15
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43db      	mvns	r3, r3
 8000d34:	69fa      	ldr	r2, [r7, #28]
 8000d36:	4013      	ands	r3, r2
 8000d38:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	0a9a      	lsrs	r2, r3, #10
 8000d3e:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <HAL_GPIO_Init+0x3ac>)
 8000d40:	4013      	ands	r3, r2
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	f002 0203 	and.w	r2, r2, #3
 8000d48:	00d2      	lsls	r2, r2, #3
 8000d4a:	4093      	lsls	r3, r2
 8000d4c:	69fa      	ldr	r2, [r7, #28]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000d52:	4938      	ldr	r1, [pc, #224]	; (8000e34 <HAL_GPIO_Init+0x3a8>)
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3318      	adds	r3, #24
 8000d5a:	69fa      	ldr	r2, [r7, #28]
 8000d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000d60:	4b34      	ldr	r3, [pc, #208]	; (8000e34 <HAL_GPIO_Init+0x3a8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69fa      	ldr	r2, [r7, #28]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8000d7c:	69fa      	ldr	r2, [r7, #28]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8000d84:	4a2b      	ldr	r2, [pc, #172]	; (8000e34 <HAL_GPIO_Init+0x3a8>)
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <HAL_GPIO_Init+0x3a8>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69fa      	ldr	r2, [r7, #28]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8000dae:	4a21      	ldr	r2, [pc, #132]	; (8000e34 <HAL_GPIO_Init+0x3a8>)
 8000db0:	69fb      	ldr	r3, [r7, #28]
 8000db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <HAL_GPIO_Init+0x3a8>)
 8000db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000dba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	43db      	mvns	r3, r3
 8000dc0:	69fa      	ldr	r2, [r7, #28]
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d003      	beq.n	8000dda <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8000dd2:	69fa      	ldr	r2, [r7, #28]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8000dda:	4a16      	ldr	r2, [pc, #88]	; (8000e34 <HAL_GPIO_Init+0x3a8>)
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <HAL_GPIO_Init+0x3a8>)
 8000de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000de8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8000e00:	69fa      	ldr	r2, [r7, #28]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8000e08:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <HAL_GPIO_Init+0x3a8>)
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	3301      	adds	r3, #1
 8000e14:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f47f ae3d 	bne.w	8000aa0 <HAL_GPIO_Init+0x14>
  }
}
 8000e26:	bf00      	nop
 8000e28:	bf00      	nop
 8000e2a:	3724      	adds	r7, #36	; 0x24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	46022000 	.word	0x46022000
 8000e38:	002f7f7f 	.word	0x002f7f7f

08000e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	460b      	mov	r3, r1
 8000e46:	807b      	strh	r3, [r7, #2]
 8000e48:	4613      	mov	r3, r2
 8000e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e4c:	787b      	ldrb	r3, [r7, #1]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e52:	887a      	ldrh	r2, [r7, #2]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8000e58:	e002      	b.n	8000e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr

08000e6c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8000e78:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e007      	b.n	8000e9a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8000e8a:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f023 0204 	bic.w	r2, r3, #4
 8000e92:	4905      	ldr	r1, [pc, #20]	; (8000ea8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	600b      	str	r3, [r1, #0]
  }

  return status;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40030400 	.word	0x40030400

08000eac <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <HAL_ICACHE_Enable+0x1c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a04      	ldr	r2, [pc, #16]	; (8000ec8 <HAL_ICACHE_Enable+0x1c>)
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	40030400 	.word	0x40030400

08000ecc <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ed4:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000ed6:	f043 0301 	orr.w	r3, r3, #1
 8000eda:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	46020800 	.word	0x46020800

08000eec <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8000ef4:	4b39      	ldr	r3, [pc, #228]	; (8000fdc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000efc:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d10b      	bne.n	8000f1e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0c:	d905      	bls.n	8000f1a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8000f0e:	4b33      	ldr	r3, [pc, #204]	; (8000fdc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	4a32      	ldr	r2, [pc, #200]	; (8000fdc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000f14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f18:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e057      	b.n	8000fce <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f24:	d90a      	bls.n	8000f3c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	4a2a      	ldr	r2, [pc, #168]	; (8000fdc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000f34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f38:	60d3      	str	r3, [r2, #12]
 8000f3a:	e007      	b.n	8000f4c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8000f3c:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8000f44:	4925      	ldr	r1, [pc, #148]	; (8000fdc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000f4c:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	099b      	lsrs	r3, r3, #6
 8000f58:	2232      	movs	r2, #50	; 0x32
 8000f5a:	fb02 f303 	mul.w	r3, r2, r3
 8000f5e:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	099b      	lsrs	r3, r3, #6
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000f6a:	e002      	b.n	8000f72 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d102      	bne.n	8000f84 <HAL_PWREx_ControlVoltageScaling+0x98>
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d1f3      	bne.n	8000f6c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d01b      	beq.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8000f8a:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a15      	ldr	r2, [pc, #84]	; (8000fe4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000f90:	fba2 2303 	umull	r2, r3, r2, r3
 8000f94:	099b      	lsrs	r3, r3, #6
 8000f96:	2232      	movs	r2, #50	; 0x32
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	4a11      	ldr	r2, [pc, #68]	; (8000fe4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8000f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa2:	099b      	lsrs	r3, r3, #6
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000fa8:	e002      	b.n	8000fb0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8000fb0:	4b0a      	ldr	r3, [pc, #40]	; (8000fdc <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8000fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d102      	bne.n	8000fc2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f3      	bne.n	8000faa <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d101      	bne.n	8000fcc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	e000      	b.n	8000fce <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3714      	adds	r7, #20
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	46020800 	.word	0x46020800
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	10624dd3 	.word	0x10624dd3

08000fe8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <HAL_PWREx_GetVoltageRange+0x18>)
 8000fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	46020800 	.word	0x46020800

08001004 <HAL_PWREx_EnterSTOP2Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 2 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f023 0307 	bic.w	r3, r3, #7
 8001016:	4a0f      	ldr	r2, [pc, #60]	; (8001054 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	4a0d      	ldr	r2, [pc, #52]	; (8001058 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001024:	f043 0304 	orr.w	r3, r3, #4
 8001028:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d101      	bne.n	8001034 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001030:	bf30      	wfi
 8001032:	e002      	b.n	800103a <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001034:	bf40      	sev
    __WFE();
 8001036:	bf20      	wfe
    __WFE();
 8001038:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800103a:	4b07      	ldr	r3, [pc, #28]	; (8001058 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 800103c:	691b      	ldr	r3, [r3, #16]
 800103e:	4a06      	ldr	r2, [pc, #24]	; (8001058 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8001040:	f023 0304 	bic.w	r3, r3, #4
 8001044:	6113      	str	r3, [r2, #16]
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	46020800 	.word	0x46020800
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08e      	sub	sp, #56	; 0x38
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	f000 bec8 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001076:	4b99      	ldr	r3, [pc, #612]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001080:	4b96      	ldr	r3, [pc, #600]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001084:	f003 0303 	and.w	r3, r3, #3
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0310 	and.w	r3, r3, #16
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 816c 	beq.w	8001370 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800109a:	2b00      	cmp	r3, #0
 800109c:	d007      	beq.n	80010ae <HAL_RCC_OscConfig+0x52>
 800109e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a0:	2b0c      	cmp	r3, #12
 80010a2:	f040 80de 	bne.w	8001262 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80010a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 80da 	bne.w	8001262 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d102      	bne.n	80010bc <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	f000 bea5 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c0:	4b86      	ldr	r3, [pc, #536]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d004      	beq.n	80010d6 <HAL_RCC_OscConfig+0x7a>
 80010cc:	4b83      	ldr	r3, [pc, #524]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80010d4:	e005      	b.n	80010e2 <HAL_RCC_OscConfig+0x86>
 80010d6:	4b81      	ldr	r3, [pc, #516]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80010d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80010dc:	041b      	lsls	r3, r3, #16
 80010de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d255      	bcs.n	8001192 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80010e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d10a      	bne.n	8001102 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f001 f99d 	bl	8002430 <RCC_SetFlashLatencyFromMSIRange>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	f000 be82 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001102:	4b76      	ldr	r3, [pc, #472]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	4a75      	ldr	r2, [pc, #468]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001108:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800110c:	6093      	str	r3, [r2, #8]
 800110e:	4b73      	ldr	r3, [pc, #460]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111a:	4970      	ldr	r1, [pc, #448]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 800111c:	4313      	orrs	r3, r2
 800111e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001128:	d309      	bcc.n	800113e <HAL_RCC_OscConfig+0xe2>
 800112a:	4b6c      	ldr	r3, [pc, #432]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 800112c:	68db      	ldr	r3, [r3, #12]
 800112e:	f023 021f 	bic.w	r2, r3, #31
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4969      	ldr	r1, [pc, #420]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001138:	4313      	orrs	r3, r2
 800113a:	60cb      	str	r3, [r1, #12]
 800113c:	e07e      	b.n	800123c <HAL_RCC_OscConfig+0x1e0>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001142:	2b00      	cmp	r3, #0
 8001144:	da0a      	bge.n	800115c <HAL_RCC_OscConfig+0x100>
 8001146:	4b65      	ldr	r3, [pc, #404]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	015b      	lsls	r3, r3, #5
 8001154:	4961      	ldr	r1, [pc, #388]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001156:	4313      	orrs	r3, r2
 8001158:	60cb      	str	r3, [r1, #12]
 800115a:	e06f      	b.n	800123c <HAL_RCC_OscConfig+0x1e0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001164:	d30a      	bcc.n	800117c <HAL_RCC_OscConfig+0x120>
 8001166:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001168:	68db      	ldr	r3, [r3, #12]
 800116a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a1b      	ldr	r3, [r3, #32]
 8001172:	029b      	lsls	r3, r3, #10
 8001174:	4959      	ldr	r1, [pc, #356]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001176:	4313      	orrs	r3, r2
 8001178:	60cb      	str	r3, [r1, #12]
 800117a:	e05f      	b.n	800123c <HAL_RCC_OscConfig+0x1e0>
 800117c:	4b57      	ldr	r3, [pc, #348]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	03db      	lsls	r3, r3, #15
 800118a:	4954      	ldr	r1, [pc, #336]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 800118c:	4313      	orrs	r3, r2
 800118e:	60cb      	str	r3, [r1, #12]
 8001190:	e054      	b.n	800123c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001192:	4b52      	ldr	r3, [pc, #328]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	4a51      	ldr	r2, [pc, #324]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001198:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800119c:	6093      	str	r3, [r2, #8]
 800119e:	4b4f      	ldr	r3, [pc, #316]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011aa:	494c      	ldr	r1, [pc, #304]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80011b8:	d309      	bcc.n	80011ce <HAL_RCC_OscConfig+0x172>
 80011ba:	4b48      	ldr	r3, [pc, #288]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	f023 021f 	bic.w	r2, r3, #31
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	4945      	ldr	r1, [pc, #276]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	60cb      	str	r3, [r1, #12]
 80011cc:	e028      	b.n	8001220 <HAL_RCC_OscConfig+0x1c4>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	da0a      	bge.n	80011ec <HAL_RCC_OscConfig+0x190>
 80011d6:	4b41      	ldr	r3, [pc, #260]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	015b      	lsls	r3, r3, #5
 80011e4:	493d      	ldr	r1, [pc, #244]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	60cb      	str	r3, [r1, #12]
 80011ea:	e019      	b.n	8001220 <HAL_RCC_OscConfig+0x1c4>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f4:	d30a      	bcc.n	800120c <HAL_RCC_OscConfig+0x1b0>
 80011f6:	4b39      	ldr	r3, [pc, #228]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	029b      	lsls	r3, r3, #10
 8001204:	4935      	ldr	r1, [pc, #212]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001206:	4313      	orrs	r3, r2
 8001208:	60cb      	str	r3, [r1, #12]
 800120a:	e009      	b.n	8001220 <HAL_RCC_OscConfig+0x1c4>
 800120c:	4b33      	ldr	r3, [pc, #204]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a1b      	ldr	r3, [r3, #32]
 8001218:	03db      	lsls	r3, r3, #15
 800121a:	4930      	ldr	r1, [pc, #192]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 800121c:	4313      	orrs	r3, r2
 800121e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10a      	bne.n	800123c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	4618      	mov	r0, r3
 800122c:	f001 f900 	bl	8002430 <RCC_SetFlashLatencyFromMSIRange>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d002      	beq.n	800123c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	f000 bde5 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800123c:	f001 f8de 	bl	80023fc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <HAL_RCC_OscConfig+0x284>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fa97 	bl	8000778 <HAL_InitTick>
 800124a:	4603      	mov	r3, r0
 800124c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001250:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 808a 	beq.w	800136e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800125a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800125e:	f000 bdd2 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	69db      	ldr	r3, [r3, #28]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d066      	beq.n	8001338 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800126a:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001276:	f7ff fac9 	bl	800080c <HAL_GetTick>
 800127a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800127c:	e009      	b.n	8001292 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800127e:	f7ff fac5 	bl	800080c <HAL_GetTick>
 8001282:	4602      	mov	r2, r0
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b02      	cmp	r3, #2
 800128a:	d902      	bls.n	8001292 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	f000 bdba 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	2b00      	cmp	r3, #0
 800129c:	d0ef      	beq.n	800127e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80012a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80012a8:	6093      	str	r3, [r2, #8]
 80012aa:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	4909      	ldr	r1, [pc, #36]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80012b8:	4313      	orrs	r3, r2
 80012ba:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80012c4:	d30e      	bcc.n	80012e4 <HAL_RCC_OscConfig+0x288>
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f023 021f 	bic.w	r2, r3, #31
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a1b      	ldr	r3, [r3, #32]
 80012d2:	4902      	ldr	r1, [pc, #8]	; (80012dc <HAL_RCC_OscConfig+0x280>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	60cb      	str	r3, [r1, #12]
 80012d8:	e04a      	b.n	8001370 <HAL_RCC_OscConfig+0x314>
 80012da:	bf00      	nop
 80012dc:	46020c00 	.word	0x46020c00
 80012e0:	20000004 	.word	0x20000004
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	da0a      	bge.n	8001302 <HAL_RCC_OscConfig+0x2a6>
 80012ec:	4b98      	ldr	r3, [pc, #608]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	015b      	lsls	r3, r3, #5
 80012fa:	4995      	ldr	r1, [pc, #596]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	60cb      	str	r3, [r1, #12]
 8001300:	e036      	b.n	8001370 <HAL_RCC_OscConfig+0x314>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800130a:	d30a      	bcc.n	8001322 <HAL_RCC_OscConfig+0x2c6>
 800130c:	4b90      	ldr	r3, [pc, #576]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	029b      	lsls	r3, r3, #10
 800131a:	498d      	ldr	r1, [pc, #564]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800131c:	4313      	orrs	r3, r2
 800131e:	60cb      	str	r3, [r1, #12]
 8001320:	e026      	b.n	8001370 <HAL_RCC_OscConfig+0x314>
 8001322:	4b8b      	ldr	r3, [pc, #556]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	03db      	lsls	r3, r3, #15
 8001330:	4987      	ldr	r1, [pc, #540]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001332:	4313      	orrs	r3, r2
 8001334:	60cb      	str	r3, [r1, #12]
 8001336:	e01b      	b.n	8001370 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001338:	4b85      	ldr	r3, [pc, #532]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a84      	ldr	r2, [pc, #528]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001344:	f7ff fa62 	bl	800080c <HAL_GetTick>
 8001348:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800134a:	e009      	b.n	8001360 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800134c:	f7ff fa5e 	bl	800080c <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d902      	bls.n	8001360 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	f000 bd53 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001360:	4b7b      	ldr	r3, [pc, #492]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1ef      	bne.n	800134c <HAL_RCC_OscConfig+0x2f0>
 800136c:	e000      	b.n	8001370 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800136e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 808b 	beq.w	8001494 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800137e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001380:	2b08      	cmp	r3, #8
 8001382:	d005      	beq.n	8001390 <HAL_RCC_OscConfig+0x334>
 8001384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001386:	2b0c      	cmp	r3, #12
 8001388:	d109      	bne.n	800139e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800138a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138c:	2b03      	cmp	r3, #3
 800138e:	d106      	bne.n	800139e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d17d      	bne.n	8001494 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	f000 bd34 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a6:	d106      	bne.n	80013b6 <HAL_RCC_OscConfig+0x35a>
 80013a8:	4b69      	ldr	r3, [pc, #420]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a68      	ldr	r2, [pc, #416]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	e041      	b.n	800143a <HAL_RCC_OscConfig+0x3de>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013be:	d112      	bne.n	80013e6 <HAL_RCC_OscConfig+0x38a>
 80013c0:	4b63      	ldr	r3, [pc, #396]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a62      	ldr	r2, [pc, #392]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013ca:	6013      	str	r3, [r2, #0]
 80013cc:	4b60      	ldr	r3, [pc, #384]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a5f      	ldr	r2, [pc, #380]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80013d6:	6013      	str	r3, [r2, #0]
 80013d8:	4b5d      	ldr	r3, [pc, #372]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a5c      	ldr	r2, [pc, #368]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e029      	b.n	800143a <HAL_RCC_OscConfig+0x3de>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80013ee:	d112      	bne.n	8001416 <HAL_RCC_OscConfig+0x3ba>
 80013f0:	4b57      	ldr	r3, [pc, #348]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a56      	ldr	r2, [pc, #344]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b54      	ldr	r3, [pc, #336]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a53      	ldr	r2, [pc, #332]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b51      	ldr	r3, [pc, #324]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a50      	ldr	r2, [pc, #320]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800140e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	e011      	b.n	800143a <HAL_RCC_OscConfig+0x3de>
 8001416:	4b4e      	ldr	r3, [pc, #312]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a4d      	ldr	r2, [pc, #308]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800141c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b4b      	ldr	r3, [pc, #300]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a4a      	ldr	r2, [pc, #296]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001428:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b48      	ldr	r3, [pc, #288]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a47      	ldr	r2, [pc, #284]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001434:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001438:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d014      	beq.n	800146c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001442:	f7ff f9e3 	bl	800080c <HAL_GetTick>
 8001446:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001448:	e009      	b.n	800145e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144a:	f7ff f9df 	bl	800080c <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b64      	cmp	r3, #100	; 0x64
 8001456:	d902      	bls.n	800145e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	f000 bcd4 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800145e:	4b3c      	ldr	r3, [pc, #240]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0ef      	beq.n	800144a <HAL_RCC_OscConfig+0x3ee>
 800146a:	e013      	b.n	8001494 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800146c:	f7ff f9ce 	bl	800080c <HAL_GetTick>
 8001470:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001472:	e009      	b.n	8001488 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001474:	f7ff f9ca 	bl	800080c <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b64      	cmp	r3, #100	; 0x64
 8001480:	d902      	bls.n	8001488 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	f000 bcbf 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001488:	4b31      	ldr	r3, [pc, #196]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1ef      	bne.n	8001474 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d05f      	beq.n	8001560 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80014a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d005      	beq.n	80014b2 <HAL_RCC_OscConfig+0x456>
 80014a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a8:	2b0c      	cmp	r3, #12
 80014aa:	d114      	bne.n	80014d6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d111      	bne.n	80014d6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f000 bca3 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80014c0:	4b23      	ldr	r3, [pc, #140]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80014c2:	691b      	ldr	r3, [r3, #16]
 80014c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	041b      	lsls	r3, r3, #16
 80014ce:	4920      	ldr	r1, [pc, #128]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80014d4:	e044      	b.n	8001560 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d024      	beq.n	8001528 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80014de:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a1b      	ldr	r2, [pc, #108]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80014ea:	f7ff f98f 	bl	800080c <HAL_GetTick>
 80014ee:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f0:	e009      	b.n	8001506 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff f98b 	bl	800080c <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d902      	bls.n	8001506 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	f000 bc80 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0ef      	beq.n	80014f2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001514:	691b      	ldr	r3, [r3, #16]
 8001516:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	041b      	lsls	r3, r3, #16
 8001520:	490b      	ldr	r1, [pc, #44]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 8001522:	4313      	orrs	r3, r2
 8001524:	610b      	str	r3, [r1, #16]
 8001526:	e01b      	b.n	8001560 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a08      	ldr	r2, [pc, #32]	; (8001550 <HAL_RCC_OscConfig+0x4f4>)
 800152e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001532:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001534:	f7ff f96a 	bl	800080c <HAL_GetTick>
 8001538:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800153a:	e00b      	b.n	8001554 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153c:	f7ff f966 	bl	800080c <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d904      	bls.n	8001554 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	f000 bc5b 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
 8001550:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001554:	4baf      	ldr	r3, [pc, #700]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1ed      	bne.n	800153c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	f000 80c8 	beq.w	80016fe <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001574:	4ba7      	ldr	r3, [pc, #668]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 8001576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d111      	bne.n	80015a6 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001582:	4ba4      	ldr	r3, [pc, #656]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 8001584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001588:	4aa2      	ldr	r2, [pc, #648]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 800158a:	f043 0304 	orr.w	r3, r3, #4
 800158e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001592:	4ba0      	ldr	r3, [pc, #640]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 8001594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80015a0:	2301      	movs	r3, #1
 80015a2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80015a6:	4b9c      	ldr	r3, [pc, #624]	; (8001818 <HAL_RCC_OscConfig+0x7bc>)
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d119      	bne.n	80015e6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80015b2:	4b99      	ldr	r3, [pc, #612]	; (8001818 <HAL_RCC_OscConfig+0x7bc>)
 80015b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b6:	4a98      	ldr	r2, [pc, #608]	; (8001818 <HAL_RCC_OscConfig+0x7bc>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015be:	f7ff f925 	bl	800080c <HAL_GetTick>
 80015c2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80015c4:	e009      	b.n	80015da <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c6:	f7ff f921 	bl	800080c <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d902      	bls.n	80015da <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	f000 bc16 	b.w	8001e06 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80015da:	4b8f      	ldr	r3, [pc, #572]	; (8001818 <HAL_RCC_OscConfig+0x7bc>)
 80015dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0ef      	beq.n	80015c6 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d05f      	beq.n	80016ae <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80015ee:	4b89      	ldr	r3, [pc, #548]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80015f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015f4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699a      	ldr	r2, [r3, #24]
 80015fa:	6a3b      	ldr	r3, [r7, #32]
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001600:	429a      	cmp	r2, r3
 8001602:	d037      	beq.n	8001674 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001604:	6a3b      	ldr	r3, [r7, #32]
 8001606:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d006      	beq.n	800161c <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e3f4      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 800161c:	6a3b      	ldr	r3, [r7, #32]
 800161e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d01b      	beq.n	800165e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001626:	4b7b      	ldr	r3, [pc, #492]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 8001628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800162c:	4a79      	ldr	r2, [pc, #484]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 800162e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001632:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001636:	f7ff f8e9 	bl	800080c <HAL_GetTick>
 800163a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163e:	f7ff f8e5 	bl	800080c <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b05      	cmp	r3, #5
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e3da      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001650:	4b70      	ldr	r3, [pc, #448]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 8001652:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001656:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1ef      	bne.n	800163e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800165e:	4b6d      	ldr	r3, [pc, #436]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 8001660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001664:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	4969      	ldr	r1, [pc, #420]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 800166e:	4313      	orrs	r3, r2
 8001670:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001674:	4b67      	ldr	r3, [pc, #412]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 8001676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800167a:	4a66      	ldr	r2, [pc, #408]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 800167c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001680:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001684:	f7ff f8c2 	bl	800080c <HAL_GetTick>
 8001688:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800168c:	f7ff f8be 	bl	800080c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b05      	cmp	r3, #5
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e3b3      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800169e:	4b5d      	ldr	r3, [pc, #372]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80016a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d0ef      	beq.n	800168c <HAL_RCC_OscConfig+0x630>
 80016ac:	e01b      	b.n	80016e6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80016ae:	4b59      	ldr	r3, [pc, #356]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80016b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016b4:	4a57      	ldr	r2, [pc, #348]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80016b6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80016ba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80016be:	f7ff f8a5 	bl	800080c <HAL_GetTick>
 80016c2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c6:	f7ff f8a1 	bl	800080c <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b05      	cmp	r3, #5
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e396      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80016d8:	4b4e      	ldr	r3, [pc, #312]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80016da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80016de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d1ef      	bne.n	80016c6 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016e6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ee:	4b49      	ldr	r3, [pc, #292]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80016f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f4:	4a47      	ldr	r2, [pc, #284]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80016f6:	f023 0304 	bic.w	r3, r3, #4
 80016fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8111 	beq.w	800192e <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001712:	4b40      	ldr	r3, [pc, #256]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 8001714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d111      	bne.n	8001744 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001720:	4b3c      	ldr	r3, [pc, #240]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 8001722:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001726:	4a3b      	ldr	r2, [pc, #236]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001730:	4b38      	ldr	r3, [pc, #224]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 8001732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001736:	f003 0304 	and.w	r3, r3, #4
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800173e:	2301      	movs	r3, #1
 8001740:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001744:	4b34      	ldr	r3, [pc, #208]	; (8001818 <HAL_RCC_OscConfig+0x7bc>)
 8001746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d118      	bne.n	8001782 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001750:	4b31      	ldr	r3, [pc, #196]	; (8001818 <HAL_RCC_OscConfig+0x7bc>)
 8001752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001754:	4a30      	ldr	r2, [pc, #192]	; (8001818 <HAL_RCC_OscConfig+0x7bc>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800175c:	f7ff f856 	bl	800080c <HAL_GetTick>
 8001760:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001762:	e008      	b.n	8001776 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001764:	f7ff f852 	bl	800080c <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b02      	cmp	r3, #2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e347      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001776:	4b28      	ldr	r3, [pc, #160]	; (8001818 <HAL_RCC_OscConfig+0x7bc>)
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	2b00      	cmp	r3, #0
 800178c:	d01f      	beq.n	80017ce <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	d010      	beq.n	80017bc <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800179a:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 800179c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017a0:	4a1c      	ldr	r2, [pc, #112]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80017ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017ba:	e018      	b.n	80017ee <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017bc:	4b15      	ldr	r3, [pc, #84]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80017be:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017c2:	4a14      	ldr	r2, [pc, #80]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017cc:	e00f      	b.n	80017ee <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80017d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017d4:	4a0f      	ldr	r2, [pc, #60]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80017d6:	f023 0301 	bic.w	r3, r3, #1
 80017da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80017de:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80017e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017e4:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <HAL_RCC_OscConfig+0x7b8>)
 80017e6:	f023 0304 	bic.w	r3, r3, #4
 80017ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d057      	beq.n	80018a6 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80017f6:	f7ff f809 	bl	800080c <HAL_GetTick>
 80017fa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017fc:	e00e      	b.n	800181c <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff f805 	bl	800080c <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d905      	bls.n	800181c <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e2f8      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
 8001814:	46020c00 	.word	0x46020c00
 8001818:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800181c:	4b9c      	ldr	r3, [pc, #624]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 800181e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d0e9      	beq.n	80017fe <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001832:	2b00      	cmp	r3, #0
 8001834:	d01b      	beq.n	800186e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001836:	4b96      	ldr	r3, [pc, #600]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001838:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800183c:	4a94      	ldr	r2, [pc, #592]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 800183e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001842:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001846:	e00a      	b.n	800185e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001848:	f7fe ffe0 	bl	800080c <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	f241 3288 	movw	r2, #5000	; 0x1388
 8001856:	4293      	cmp	r3, r2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e2d3      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800185e:	4b8c      	ldr	r3, [pc, #560]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001860:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0ed      	beq.n	8001848 <HAL_RCC_OscConfig+0x7ec>
 800186c:	e053      	b.n	8001916 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800186e:	4b88      	ldr	r3, [pc, #544]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001870:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001874:	4a86      	ldr	r2, [pc, #536]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001876:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800187a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800187e:	e00a      	b.n	8001896 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001880:	f7fe ffc4 	bl	800080c <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	f241 3288 	movw	r2, #5000	; 0x1388
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e2b7      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001896:	4b7e      	ldr	r3, [pc, #504]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800189c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1ed      	bne.n	8001880 <HAL_RCC_OscConfig+0x824>
 80018a4:	e037      	b.n	8001916 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80018a6:	f7fe ffb1 	bl	800080c <HAL_GetTick>
 80018aa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7fe ffad 	bl	800080c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e2a0      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c4:	4b72      	ldr	r3, [pc, #456]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 80018c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ed      	bne.n	80018ae <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80018d2:	4b6f      	ldr	r3, [pc, #444]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 80018d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d01a      	beq.n	8001916 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80018e0:	4b6b      	ldr	r3, [pc, #428]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 80018e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018e6:	4a6a      	ldr	r2, [pc, #424]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 80018e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80018f0:	e00a      	b.n	8001908 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f7fe ff8b 	bl	800080c <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e27e      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001908:	4b61      	ldr	r3, [pc, #388]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 800190a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800190e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ed      	bne.n	80018f2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001916:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800191a:	2b01      	cmp	r3, #1
 800191c:	d107      	bne.n	800192e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800191e:	4b5c      	ldr	r3, [pc, #368]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001920:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001924:	4a5a      	ldr	r2, [pc, #360]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001926:	f023 0304 	bic.w	r3, r3, #4
 800192a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0320 	and.w	r3, r3, #32
 8001936:	2b00      	cmp	r3, #0
 8001938:	d036      	beq.n	80019a8 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	2b00      	cmp	r3, #0
 8001940:	d019      	beq.n	8001976 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001942:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a52      	ldr	r2, [pc, #328]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800194c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800194e:	f7fe ff5d 	bl	800080c <HAL_GetTick>
 8001952:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001956:	f7fe ff59 	bl	800080c <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e24e      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001968:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x8fa>
 8001974:	e018      	b.n	80019a8 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001976:	4b46      	ldr	r3, [pc, #280]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a45      	ldr	r2, [pc, #276]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 800197c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001980:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001982:	f7fe ff43 	bl	800080c <HAL_GetTick>
 8001986:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800198a:	f7fe ff3f 	bl	800080c <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e234      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800199c:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1f0      	bne.n	800198a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d036      	beq.n	8001a22 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d019      	beq.n	80019f0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80019bc:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a33      	ldr	r2, [pc, #204]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 80019c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80019c8:	f7fe ff20 	bl	800080c <HAL_GetTick>
 80019cc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80019d0:	f7fe ff1c 	bl	800080c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e211      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x974>
 80019ee:	e018      	b.n	8001a22 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 80019f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019fa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80019fc:	f7fe ff06 	bl	800080c <HAL_GetTick>
 8001a00:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001a04:	f7fe ff02 	bl	800080c <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e1f7      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1f0      	bne.n	8001a04 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d07f      	beq.n	8001b2e <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d062      	beq.n	8001afc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001a3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a40:	6093      	str	r3, [r2, #8]
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a4e:	4910      	ldr	r1, [pc, #64]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001a50:	4313      	orrs	r3, r2
 8001a52:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001a5c:	d309      	bcc.n	8001a72 <HAL_RCC_OscConfig+0xa16>
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	f023 021f 	bic.w	r2, r3, #31
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	4909      	ldr	r1, [pc, #36]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	60cb      	str	r3, [r1, #12]
 8001a70:	e02a      	b.n	8001ac8 <HAL_RCC_OscConfig+0xa6c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	da0c      	bge.n	8001a94 <HAL_RCC_OscConfig+0xa38>
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a1b      	ldr	r3, [r3, #32]
 8001a86:	015b      	lsls	r3, r3, #5
 8001a88:	4901      	ldr	r1, [pc, #4]	; (8001a90 <HAL_RCC_OscConfig+0xa34>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60cb      	str	r3, [r1, #12]
 8001a8e:	e01b      	b.n	8001ac8 <HAL_RCC_OscConfig+0xa6c>
 8001a90:	46020c00 	.word	0x46020c00
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9c:	d30a      	bcc.n	8001ab4 <HAL_RCC_OscConfig+0xa58>
 8001a9e:	4ba1      	ldr	r3, [pc, #644]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	029b      	lsls	r3, r3, #10
 8001aac:	499d      	ldr	r1, [pc, #628]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60cb      	str	r3, [r1, #12]
 8001ab2:	e009      	b.n	8001ac8 <HAL_RCC_OscConfig+0xa6c>
 8001ab4:	4b9b      	ldr	r3, [pc, #620]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
 8001ac0:	03db      	lsls	r3, r3, #15
 8001ac2:	4998      	ldr	r1, [pc, #608]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8001ac8:	4b96      	ldr	r3, [pc, #600]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a95      	ldr	r2, [pc, #596]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001ace:	f043 0310 	orr.w	r3, r3, #16
 8001ad2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001ad4:	f7fe fe9a 	bl	800080c <HAL_GetTick>
 8001ad8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001adc:	f7fe fe96 	bl	800080c <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e18b      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8001aee:	4b8d      	ldr	r3, [pc, #564]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0320 	and.w	r3, r3, #32
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0xa80>
 8001afa:	e018      	b.n	8001b2e <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8001afc:	4b89      	ldr	r3, [pc, #548]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a88      	ldr	r2, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001b02:	f023 0310 	bic.w	r3, r3, #16
 8001b06:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001b08:	f7fe fe80 	bl	800080c <HAL_GetTick>
 8001b0c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8001b10:	f7fe fe7c 	bl	800080c <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e171      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8001b22:	4b80      	ldr	r3, [pc, #512]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0320 	and.w	r3, r3, #32
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f000 8166 	beq.w	8001e04 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b3e:	4b79      	ldr	r3, [pc, #484]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001b40:	69db      	ldr	r3, [r3, #28]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b0c      	cmp	r3, #12
 8001b48:	f000 80f2 	beq.w	8001d30 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	f040 80c5 	bne.w	8001ce0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a72      	ldr	r2, [pc, #456]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001b5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b60:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b62:	f7fe fe53 	bl	800080c <HAL_GetTick>
 8001b66:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001b68:	e008      	b.n	8001b7c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6a:	f7fe fe4f 	bl	800080c <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d901      	bls.n	8001b7c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	e144      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001b7c:	4b69      	ldr	r3, [pc, #420]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d1f0      	bne.n	8001b6a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b88:	4b66      	ldr	r3, [pc, #408]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d111      	bne.n	8001bba <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b9c:	4a61      	ldr	r2, [pc, #388]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ba6:	4b5f      	ldr	r3, [pc, #380]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bac:	f003 0304 	and.w	r3, r3, #4
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8001bba:	4b5b      	ldr	r3, [pc, #364]	; (8001d28 <HAL_RCC_OscConfig+0xccc>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001bce:	4b56      	ldr	r3, [pc, #344]	; (8001d28 <HAL_RCC_OscConfig+0xccc>)
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	4a55      	ldr	r2, [pc, #340]	; (8001d28 <HAL_RCC_OscConfig+0xccc>)
 8001bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8001bda:	4b52      	ldr	r3, [pc, #328]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001be2:	f023 0303 	bic.w	r3, r3, #3
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001bee:	3a01      	subs	r2, #1
 8001bf0:	0212      	lsls	r2, r2, #8
 8001bf2:	4311      	orrs	r1, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	494a      	ldr	r1, [pc, #296]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	628b      	str	r3, [r1, #40]	; 0x28
 8001c00:	4b48      	ldr	r3, [pc, #288]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c04:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <HAL_RCC_OscConfig+0xcd0>)
 8001c06:	4013      	ands	r3, r2
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c0c:	3a01      	subs	r2, #1
 8001c0e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c16:	3a01      	subs	r2, #1
 8001c18:	0252      	lsls	r2, r2, #9
 8001c1a:	b292      	uxth	r2, r2
 8001c1c:	4311      	orrs	r1, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c22:	3a01      	subs	r2, #1
 8001c24:	0412      	lsls	r2, r2, #16
 8001c26:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8001c2a:	4311      	orrs	r1, r2
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001c30:	3a01      	subs	r2, #1
 8001c32:	0612      	lsls	r2, r2, #24
 8001c34:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	493a      	ldr	r1, [pc, #232]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001c40:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c44:	4a37      	ldr	r2, [pc, #220]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001c46:	f023 0310 	bic.w	r3, r3, #16
 8001c4a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	4a34      	ldr	r2, [pc, #208]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001c56:	4b33      	ldr	r3, [pc, #204]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c5a:	4a32      	ldr	r2, [pc, #200]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001c5c:	f043 0310 	orr.w	r3, r3, #16
 8001c60:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8001c62:	4b30      	ldr	r3, [pc, #192]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c66:	f023 020c 	bic.w	r2, r3, #12
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	492d      	ldr	r1, [pc, #180]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8001c74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d105      	bne.n	8001c88 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8001c7c:	4b2a      	ldr	r3, [pc, #168]	; (8001d28 <HAL_RCC_OscConfig+0xccc>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4a29      	ldr	r2, [pc, #164]	; (8001d28 <HAL_RCC_OscConfig+0xccc>)
 8001c82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c86:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8001c88:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d107      	bne.n	8001ca0 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8001c90:	4b24      	ldr	r3, [pc, #144]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c96:	4a23      	ldr	r2, [pc, #140]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001c98:	f023 0304 	bic.w	r3, r3, #4
 8001c9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca4:	4a1f      	ldr	r2, [pc, #124]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001ca6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001caa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8001cac:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001cb8:	f7fe fda8 	bl	800080c <HAL_GetTick>
 8001cbc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7fe fda4 	bl	800080c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e099      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0xc64>
 8001cde:	e091      	b.n	8001e04 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cea:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001cec:	f7fe fd8e 	bl	800080c <HAL_GetTick>
 8001cf0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7fe fd8a 	bl	800080c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e07f      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8001d06:	4b07      	ldr	r3, [pc, #28]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8001d12:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d16:	4a03      	ldr	r2, [pc, #12]	; (8001d24 <HAL_RCC_OscConfig+0xcc8>)
 8001d18:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001d1c:	f023 0303 	bic.w	r3, r3, #3
 8001d20:	6293      	str	r3, [r2, #40]	; 0x28
 8001d22:	e06f      	b.n	8001e04 <HAL_RCC_OscConfig+0xda8>
 8001d24:	46020c00 	.word	0x46020c00
 8001d28:	46020800 	.word	0x46020800
 8001d2c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8001d30:	4b37      	ldr	r3, [pc, #220]	; (8001e10 <HAL_RCC_OscConfig+0xdb4>)
 8001d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d34:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001d36:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <HAL_RCC_OscConfig+0xdb4>)
 8001d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d039      	beq.n	8001db8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0203 	and.w	r2, r3, #3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d132      	bne.n	8001db8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d129      	bne.n	8001db8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d122      	bne.n	8001db8 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d7c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d11a      	bne.n	8001db8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	0a5b      	lsrs	r3, r3, #9
 8001d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d111      	bne.n	8001db8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	0c1b      	lsrs	r3, r3, #16
 8001d98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001da0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d108      	bne.n	8001db8 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	0e1b      	lsrs	r3, r3, #24
 8001daa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e024      	b.n	8001e06 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_RCC_OscConfig+0xdb4>)
 8001dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d01a      	beq.n	8001e04 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8001dce:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <HAL_RCC_OscConfig+0xdb4>)
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <HAL_RCC_OscConfig+0xdb4>)
 8001dd4:	f023 0310 	bic.w	r3, r3, #16
 8001dd8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7fe fd17 	bl	800080c <HAL_GetTick>
 8001dde:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8001de0:	bf00      	nop
 8001de2:	f7fe fd13 	bl	800080c <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d0f9      	beq.n	8001de2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df2:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_RCC_OscConfig+0xdb4>)
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <HAL_RCC_OscConfig+0xdb4>)
 8001dfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_RCC_OscConfig+0xdb4>)
 8001dfe:	f043 0310 	orr.w	r3, r3, #16
 8001e02:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3738      	adds	r7, #56	; 0x38
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	46020c00 	.word	0x46020c00

08001e14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e1d9      	b.n	80021dc <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e28:	4b9b      	ldr	r3, [pc, #620]	; (8002098 <HAL_RCC_ClockConfig+0x284>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 030f 	and.w	r3, r3, #15
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d910      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b98      	ldr	r3, [pc, #608]	; (8002098 <HAL_RCC_ClockConfig+0x284>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 020f 	bic.w	r2, r3, #15
 8001e3e:	4996      	ldr	r1, [pc, #600]	; (8002098 <HAL_RCC_ClockConfig+0x284>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b94      	ldr	r3, [pc, #592]	; (8002098 <HAL_RCC_ClockConfig+0x284>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e1c1      	b.n	80021dc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d010      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695a      	ldr	r2, [r3, #20]
 8001e68:	4b8c      	ldr	r3, [pc, #560]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d908      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8001e74:	4b89      	ldr	r3, [pc, #548]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	4986      	ldr	r1, [pc, #536]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d012      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	691a      	ldr	r2, [r3, #16]
 8001e96:	4b81      	ldr	r3, [pc, #516]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d909      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8001ea4:	4b7d      	ldr	r3, [pc, #500]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001ea6:	6a1b      	ldr	r3, [r3, #32]
 8001ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	497a      	ldr	r1, [pc, #488]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0304 	and.w	r3, r3, #4
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d010      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68da      	ldr	r2, [r3, #12]
 8001ec8:	4b74      	ldr	r3, [pc, #464]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d908      	bls.n	8001ee6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8001ed4:	4b71      	ldr	r3, [pc, #452]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001ed6:	6a1b      	ldr	r3, [r3, #32]
 8001ed8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	496e      	ldr	r1, [pc, #440]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d010      	beq.n	8001f14 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	4b69      	ldr	r3, [pc, #420]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d908      	bls.n	8001f14 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8001f02:	4b66      	ldr	r3, [pc, #408]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	f023 020f 	bic.w	r2, r3, #15
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	4963      	ldr	r1, [pc, #396]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80d2 	beq.w	80020c6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d143      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2e:	4b5b      	ldr	r3, [pc, #364]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001f30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d110      	bne.n	8001f5e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	4b57      	ldr	r3, [pc, #348]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f42:	4a56      	ldr	r2, [pc, #344]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001f44:	f043 0304 	orr.w	r3, r3, #4
 8001f48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001f4c:	4b53      	ldr	r3, [pc, #332]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8001f5e:	f7fe fc55 	bl	800080c <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8001f64:	4b4e      	ldr	r3, [pc, #312]	; (80020a0 <HAL_RCC_ClockConfig+0x28c>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00f      	beq.n	8001f90 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8001f72:	f7fe fc4b 	bl	800080c <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e12b      	b.n	80021dc <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8001f84:	4b46      	ldr	r3, [pc, #280]	; (80020a0 <HAL_RCC_ClockConfig+0x28c>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9c:	4a3f      	ldr	r2, [pc, #252]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001f9e:	f023 0304 	bic.w	r3, r3, #4
 8001fa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8001fa6:	4b3d      	ldr	r3, [pc, #244]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d121      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e112      	b.n	80021dc <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d107      	bne.n	8001fce <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fbe:	4b37      	ldr	r3, [pc, #220]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d115      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e106      	b.n	80021dc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d107      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001fd6:	4b31      	ldr	r3, [pc, #196]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d109      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e0fa      	b.n	80021dc <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fe6:	4b2d      	ldr	r3, [pc, #180]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d101      	bne.n	8001ff6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	e0f2      	b.n	80021dc <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8001ff6:	4b29      	ldr	r3, [pc, #164]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	f023 0203 	bic.w	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	4926      	ldr	r1, [pc, #152]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8002004:	4313      	orrs	r3, r2
 8002006:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8002008:	f7fe fc00 	bl	800080c <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b03      	cmp	r3, #3
 8002014:	d112      	bne.n	800203c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002016:	e00a      	b.n	800202e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002018:	f7fe fbf8 	bl	800080c <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d901      	bls.n	800202e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e0d6      	b.n	80021dc <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800202e:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f003 030c 	and.w	r3, r3, #12
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d1ee      	bne.n	8002018 <HAL_RCC_ClockConfig+0x204>
 800203a:	e044      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d112      	bne.n	800206a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002044:	e00a      	b.n	800205c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002046:	f7fe fbe1 	bl	800080c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	f241 3288 	movw	r2, #5000	; 0x1388
 8002054:	4293      	cmp	r3, r2
 8002056:	d901      	bls.n	800205c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e0bf      	b.n	80021dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	f003 030c 	and.w	r3, r3, #12
 8002064:	2b08      	cmp	r3, #8
 8002066:	d1ee      	bne.n	8002046 <HAL_RCC_ClockConfig+0x232>
 8002068:	e02d      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d123      	bne.n	80020ba <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002072:	e00a      	b.n	800208a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002074:	f7fe fbca 	bl	800080c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e0a8      	b.n	80021dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800208a:	4b04      	ldr	r3, [pc, #16]	; (800209c <HAL_RCC_ClockConfig+0x288>)
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1ee      	bne.n	8002074 <HAL_RCC_ClockConfig+0x260>
 8002096:	e016      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2b2>
 8002098:	40022000 	.word	0x40022000
 800209c:	46020c00 	.word	0x46020c00
 80020a0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020a4:	f7fe fbb2 	bl	800080c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e090      	b.n	80021dc <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020ba:	4b4a      	ldr	r3, [pc, #296]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	f003 030c 	and.w	r3, r3, #12
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	d1ee      	bne.n	80020a4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d010      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	4b43      	ldr	r3, [pc, #268]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	429a      	cmp	r2, r3
 80020e0:	d208      	bcs.n	80020f4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80020e2:	4b40      	ldr	r3, [pc, #256]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	f023 020f 	bic.w	r2, r3, #15
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	493d      	ldr	r1, [pc, #244]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f4:	4b3c      	ldr	r3, [pc, #240]	; (80021e8 <HAL_RCC_ClockConfig+0x3d4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d210      	bcs.n	8002124 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <HAL_RCC_ClockConfig+0x3d4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 020f 	bic.w	r2, r3, #15
 800210a:	4937      	ldr	r1, [pc, #220]	; (80021e8 <HAL_RCC_ClockConfig+0x3d4>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b35      	ldr	r3, [pc, #212]	; (80021e8 <HAL_RCC_ClockConfig+0x3d4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e05b      	b.n	80021dc <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d010      	beq.n	8002152 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800213c:	429a      	cmp	r2, r3
 800213e:	d208      	bcs.n	8002152 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002140:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	4925      	ldr	r1, [pc, #148]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 800214e:	4313      	orrs	r3, r2
 8002150:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d012      	beq.n	8002184 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800216c:	429a      	cmp	r2, r3
 800216e:	d209      	bcs.n	8002184 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002170:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	691b      	ldr	r3, [r3, #16]
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	4919      	ldr	r1, [pc, #100]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 8002180:	4313      	orrs	r3, r2
 8002182:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b00      	cmp	r3, #0
 800218e:	d010      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 8002196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002198:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800219c:	429a      	cmp	r2, r3
 800219e:	d208      	bcs.n	80021b2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80021a0:	4b10      	ldr	r3, [pc, #64]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 80021a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	490d      	ldr	r1, [pc, #52]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80021b2:	f000 f821 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_RCC_ClockConfig+0x3d0>)
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	490a      	ldr	r1, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x3d8>)
 80021c2:	5ccb      	ldrb	r3, [r1, r3]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
 80021c8:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x3dc>)
 80021ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x3e0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe fad1 	bl	8000778 <HAL_InitTick>
 80021d6:	4603      	mov	r3, r0
 80021d8:	73fb      	strb	r3, [r7, #15]

  return status;
 80021da:	7bfb      	ldrb	r3, [r7, #15]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3718      	adds	r7, #24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	46020c00 	.word	0x46020c00
 80021e8:	40022000 	.word	0x40022000
 80021ec:	08003718 	.word	0x08003718
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000004 	.word	0x20000004

080021f8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b08b      	sub	sp, #44	; 0x2c
 80021fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002206:	4b78      	ldr	r3, [pc, #480]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002210:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	f003 0303 	and.w	r3, r3, #3
 8002218:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x34>
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d121      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d11e      	bne.n	800226a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800222c:	4b6e      	ldr	r3, [pc, #440]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d107      	bne.n	8002248 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002238:	4b6b      	ldr	r3, [pc, #428]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800223a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800223e:	0b1b      	lsrs	r3, r3, #12
 8002240:	f003 030f 	and.w	r3, r3, #15
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	e005      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002248:	4b67      	ldr	r3, [pc, #412]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	0f1b      	lsrs	r3, r3, #28
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002254:	4a65      	ldr	r2, [pc, #404]	; (80023ec <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800225c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d110      	bne.n	8002286 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002266:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002268:	e00d      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800226a:	4b5f      	ldr	r3, [pc, #380]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	f003 030c 	and.w	r3, r3, #12
 8002272:	2b04      	cmp	r3, #4
 8002274:	d102      	bne.n	800227c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002276:	4b5e      	ldr	r3, [pc, #376]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002278:	623b      	str	r3, [r7, #32]
 800227a:	e004      	b.n	8002286 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b08      	cmp	r3, #8
 8002280:	d101      	bne.n	8002286 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002282:	4b5b      	ldr	r3, [pc, #364]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002284:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	2b0c      	cmp	r3, #12
 800228a:	f040 80a5 	bne.w	80023d8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800228e:	4b56      	ldr	r3, [pc, #344]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002298:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3301      	adds	r3, #1
 80022a4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80022a6:	4b50      	ldr	r3, [pc, #320]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	091b      	lsrs	r3, r3, #4
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80022b2:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80022b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b6:	08db      	lsrs	r3, r3, #3
 80022b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	fb02 f303 	mul.w	r3, r2, r3
 80022c2:	ee07 3a90 	vmov	s15, r3
 80022c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ca:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d003      	beq.n	80022dc <HAL_RCC_GetSysClockFreq+0xe4>
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	2b03      	cmp	r3, #3
 80022d8:	d022      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x128>
 80022da:	e043      	b.n	8002364 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e6:	eddf 6a43 	vldr	s13, [pc, #268]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80022ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ee:	4b3e      	ldr	r3, [pc, #248]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80022f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80022fe:	ed97 6a01 	vldr	s12, [r7, #4]
 8002302:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80023f8 <HAL_RCC_GetSysClockFreq+0x200>
 8002306:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800230a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800230e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002312:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800231e:	e046      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	ee07 3a90 	vmov	s15, r3
 8002326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800232a:	eddf 6a32 	vldr	s13, [pc, #200]	; 80023f4 <HAL_RCC_GetSysClockFreq+0x1fc>
 800232e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002332:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233a:	ee07 3a90 	vmov	s15, r3
 800233e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002342:	ed97 6a01 	vldr	s12, [r7, #4]
 8002346:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80023f8 <HAL_RCC_GetSysClockFreq+0x200>
 800234a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800234e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002356:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800235a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800235e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002362:	e024      	b.n	80023ae <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	ee07 3a90 	vmov	s15, r3
 800236a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	ee07 3a90 	vmov	s15, r3
 8002374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002378:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800237e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002384:	ee07 3a90 	vmov	s15, r3
 8002388:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800238c:	ed97 6a01 	vldr	s12, [r7, #4]
 8002390:	eddf 5a19 	vldr	s11, [pc, #100]	; 80023f8 <HAL_RCC_GetSysClockFreq+0x200>
 8002394:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002398:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800239c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80023a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023ac:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80023b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b2:	0e1b      	lsrs	r3, r3, #24
 80023b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023b8:	3301      	adds	r3, #1
 80023ba:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	ee07 3a90 	vmov	s15, r3
 80023c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80023ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023d2:	ee17 3a90 	vmov	r3, s15
 80023d6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80023d8:	6a3b      	ldr	r3, [r7, #32]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	372c      	adds	r7, #44	; 0x2c
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
 80023e6:	bf00      	nop
 80023e8:	46020c00 	.word	0x46020c00
 80023ec:	08003728 	.word	0x08003728
 80023f0:	00f42400 	.word	0x00f42400
 80023f4:	4b742400 	.word	0x4b742400
 80023f8:	46000000 	.word	0x46000000

080023fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002400:	f7ff fefa 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b07      	ldr	r3, [pc, #28]	; (8002424 <HAL_RCC_GetHCLKFreq+0x28>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	f003 030f 	and.w	r3, r3, #15
 800240e:	4906      	ldr	r1, [pc, #24]	; (8002428 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002410:	5ccb      	ldrb	r3, [r1, r3]
 8002412:	fa22 f303 	lsr.w	r3, r2, r3
 8002416:	4a05      	ldr	r2, [pc, #20]	; (800242c <HAL_RCC_GetHCLKFreq+0x30>)
 8002418:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <HAL_RCC_GetHCLKFreq+0x30>)
 800241c:	681b      	ldr	r3, [r3, #0]
}
 800241e:	4618      	mov	r0, r3
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	46020c00 	.word	0x46020c00
 8002428:	08003718 	.word	0x08003718
 800242c:	20000000 	.word	0x20000000

08002430 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002438:	4b3e      	ldr	r3, [pc, #248]	; (8002534 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002446:	f7fe fdcf 	bl	8000fe8 <HAL_PWREx_GetVoltageRange>
 800244a:	6178      	str	r0, [r7, #20]
 800244c:	e019      	b.n	8002482 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b39      	ldr	r3, [pc, #228]	; (8002534 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002450:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002454:	4a37      	ldr	r2, [pc, #220]	; (8002534 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002456:	f043 0304 	orr.w	r3, r3, #4
 800245a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800245e:	4b35      	ldr	r3, [pc, #212]	; (8002534 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800246c:	f7fe fdbc 	bl	8000fe8 <HAL_PWREx_GetVoltageRange>
 8002470:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002472:	4b30      	ldr	r3, [pc, #192]	; (8002534 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002478:	4a2e      	ldr	r2, [pc, #184]	; (8002534 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800247a:	f023 0304 	bic.w	r3, r3, #4
 800247e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002488:	d003      	beq.n	8002492 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002490:	d109      	bne.n	80024a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002498:	d202      	bcs.n	80024a0 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800249a:	2301      	movs	r3, #1
 800249c:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800249e:	e033      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80024a0:	2300      	movs	r3, #0
 80024a2:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80024a4:	e030      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024ac:	d208      	bcs.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024b4:	d102      	bne.n	80024bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80024b6:	2303      	movs	r3, #3
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	e025      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e035      	b.n	800252c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024c6:	d90f      	bls.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80024d4:	d902      	bls.n	80024dc <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	e015      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80024dc:	2301      	movs	r3, #1
 80024de:	613b      	str	r3, [r7, #16]
 80024e0:	e012      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80024e2:	2300      	movs	r3, #0
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	e00f      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024ee:	d109      	bne.n	8002504 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f6:	d102      	bne.n	80024fe <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80024f8:	2301      	movs	r3, #1
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	e004      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80024fe:	2302      	movs	r3, #2
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	e001      	b.n	8002508 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002504:	2301      	movs	r3, #1
 8002506:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002508:	4b0b      	ldr	r3, [pc, #44]	; (8002538 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 020f 	bic.w	r2, r3, #15
 8002510:	4909      	ldr	r1, [pc, #36]	; (8002538 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002518:	4b07      	ldr	r3, [pc, #28]	; (8002538 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	429a      	cmp	r2, r3
 8002524:	d001      	beq.n	800252a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	46020c00 	.word	0x46020c00
 8002538:	40022000 	.word	0x40022000

0800253c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800253c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002540:	b0b8      	sub	sp, #224	; 0xe0
 8002542:	af00      	add	r7, sp, #0
 8002544:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002548:	2300      	movs	r3, #0
 800254a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800254e:	2300      	movs	r3, #0
 8002550:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002554:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255c:	f002 0401 	and.w	r4, r2, #1
 8002560:	2500      	movs	r5, #0
 8002562:	ea54 0305 	orrs.w	r3, r4, r5
 8002566:	d00b      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002568:	4bca      	ldr	r3, [pc, #808]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800256a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800256e:	f023 0103 	bic.w	r1, r3, #3
 8002572:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002578:	4ac6      	ldr	r2, [pc, #792]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800257a:	430b      	orrs	r3, r1
 800257c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002588:	f002 0802 	and.w	r8, r2, #2
 800258c:	f04f 0900 	mov.w	r9, #0
 8002590:	ea58 0309 	orrs.w	r3, r8, r9
 8002594:	d00b      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002596:	4bbf      	ldr	r3, [pc, #764]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800259c:	f023 010c 	bic.w	r1, r3, #12
 80025a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	4abb      	ldr	r2, [pc, #748]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80025a8:	430b      	orrs	r3, r1
 80025aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	f002 0a04 	and.w	sl, r2, #4
 80025ba:	f04f 0b00 	mov.w	fp, #0
 80025be:	ea5a 030b 	orrs.w	r3, sl, fp
 80025c2:	d00b      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80025c4:	4bb3      	ldr	r3, [pc, #716]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80025c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ca:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80025ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d4:	4aaf      	ldr	r2, [pc, #700]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80025d6:	430b      	orrs	r3, r1
 80025d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80025e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e4:	f002 0308 	and.w	r3, r2, #8
 80025e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80025f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4313      	orrs	r3, r2
 80025fa:	d00b      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80025fc:	4ba5      	ldr	r3, [pc, #660]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80025fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002602:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002606:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	4aa1      	ldr	r2, [pc, #644]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800260e:	430b      	orrs	r3, r1
 8002610:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002614:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261c:	f002 0310 	and.w	r3, r2, #16
 8002620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002624:	2300      	movs	r3, #0
 8002626:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800262a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800262e:	460b      	mov	r3, r1
 8002630:	4313      	orrs	r3, r2
 8002632:	d00b      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002634:	4b97      	ldr	r3, [pc, #604]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800263e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002642:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002644:	4a93      	ldr	r2, [pc, #588]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002646:	430b      	orrs	r3, r1
 8002648:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800264c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	f002 0320 	and.w	r3, r2, #32
 8002658:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800265c:	2300      	movs	r3, #0
 800265e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002662:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002666:	460b      	mov	r3, r1
 8002668:	4313      	orrs	r3, r2
 800266a:	d00b      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 800266c:	4b89      	ldr	r3, [pc, #548]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800266e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002672:	f023 0107 	bic.w	r1, r3, #7
 8002676:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800267a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800267c:	4a85      	ldr	r2, [pc, #532]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800267e:	430b      	orrs	r3, r1
 8002680:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002684:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800268c:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002690:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002694:	2300      	movs	r3, #0
 8002696:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800269a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800269e:	460b      	mov	r3, r1
 80026a0:	4313      	orrs	r3, r2
 80026a2:	d00b      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80026a4:	4b7b      	ldr	r3, [pc, #492]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026aa:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80026ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026b4:	4a77      	ldr	r2, [pc, #476]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026b6:	430b      	orrs	r3, r1
 80026b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80026bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80026c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80026d2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80026d6:	460b      	mov	r3, r1
 80026d8:	4313      	orrs	r3, r2
 80026da:	d00b      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80026dc:	4b6d      	ldr	r3, [pc, #436]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ec:	4a69      	ldr	r2, [pc, #420]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80026ee:	430b      	orrs	r3, r1
 80026f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800270a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800270e:	460b      	mov	r3, r1
 8002710:	4313      	orrs	r3, r2
 8002712:	d00b      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002714:	4b5f      	ldr	r3, [pc, #380]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002716:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800271a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800271e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002724:	4a5b      	ldr	r2, [pc, #364]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002726:	430b      	orrs	r3, r1
 8002728:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800272c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002734:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002738:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800273c:	2300      	movs	r3, #0
 800273e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002742:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002746:	460b      	mov	r3, r1
 8002748:	4313      	orrs	r3, r2
 800274a:	d00b      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 800274c:	4b51      	ldr	r3, [pc, #324]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800274e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002752:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8002756:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800275a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275c:	4a4d      	ldr	r2, [pc, #308]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800275e:	430b      	orrs	r3, r1
 8002760:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002764:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276c:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002770:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800277a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800277e:	460b      	mov	r3, r1
 8002780:	4313      	orrs	r3, r2
 8002782:	d00b      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002784:	4b43      	ldr	r3, [pc, #268]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800278a:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800278e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002794:	4a3f      	ldr	r2, [pc, #252]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002796:	430b      	orrs	r3, r1
 8002798:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800279c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a4:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80027a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027ac:	2300      	movs	r3, #0
 80027ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80027b6:	460b      	mov	r3, r1
 80027b8:	4313      	orrs	r3, r2
 80027ba:	d00b      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80027bc:	4b35      	ldr	r3, [pc, #212]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027c2:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80027c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027cc:	4a31      	ldr	r2, [pc, #196]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027ce:	430b      	orrs	r3, r1
 80027d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80027d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027dc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80027e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80027e2:	2300      	movs	r3, #0
 80027e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027e6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80027ea:	460b      	mov	r3, r1
 80027ec:	4313      	orrs	r3, r2
 80027ee:	d00c      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80027f0:	4b28      	ldr	r3, [pc, #160]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002802:	4a24      	ldr	r2, [pc, #144]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002804:	430b      	orrs	r3, r1
 8002806:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800280a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800280e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002812:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002816:	673b      	str	r3, [r7, #112]	; 0x70
 8002818:	2300      	movs	r3, #0
 800281a:	677b      	str	r3, [r7, #116]	; 0x74
 800281c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002820:	460b      	mov	r3, r1
 8002822:	4313      	orrs	r3, r2
 8002824:	d04f      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002826:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	2b80      	cmp	r3, #128	; 0x80
 8002830:	d02d      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x352>
 8002832:	2b80      	cmp	r3, #128	; 0x80
 8002834:	d827      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002836:	2b60      	cmp	r3, #96	; 0x60
 8002838:	d02e      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800283a:	2b60      	cmp	r3, #96	; 0x60
 800283c:	d823      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d006      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002842:	2b40      	cmp	r3, #64	; 0x40
 8002844:	d81f      	bhi.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x322>
 800284a:	2b20      	cmp	r3, #32
 800284c:	d011      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800284e:	e01a      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002850:	4b10      	ldr	r3, [pc, #64]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002856:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800285a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800285c:	e01d      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800285e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002862:	3308      	adds	r3, #8
 8002864:	4618      	mov	r0, r3
 8002866:	f000 fc0d 	bl	8003084 <RCCEx_PLL2_Config>
 800286a:	4603      	mov	r3, r0
 800286c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002870:	e013      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002872:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002876:	332c      	adds	r3, #44	; 0x2c
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fc9b 	bl	80031b4 <RCCEx_PLL3_Config>
 800287e:	4603      	mov	r3, r0
 8002880:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002884:	e009      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800288c:	e005      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 800288e:	bf00      	nop
 8002890:	e003      	b.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002892:	bf00      	nop
 8002894:	46020c00 	.word	0x46020c00
        break;
 8002898:	bf00      	nop
    }

    if (ret == HAL_OK)
 800289a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10d      	bne.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80028a2:	4bb6      	ldr	r3, [pc, #728]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80028a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80028a8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80028ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b4:	4ab1      	ldr	r2, [pc, #708]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80028b6:	430b      	orrs	r3, r1
 80028b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80028bc:	e003      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028be:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80028c2:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80028d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80028d4:	2300      	movs	r3, #0
 80028d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028d8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80028dc:	460b      	mov	r3, r1
 80028de:	4313      	orrs	r3, r2
 80028e0:	d053      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80028e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ee:	d033      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80028f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028f4:	d82c      	bhi.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80028f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028fa:	d02f      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80028fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002900:	d826      	bhi.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002906:	d008      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800290c:	d820      	bhi.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002916:	d011      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002918:	e01a      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800291a:	4b98      	ldr	r3, [pc, #608]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	4a97      	ldr	r2, [pc, #604]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002926:	e01a      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002928:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800292c:	3308      	adds	r3, #8
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fba8 	bl	8003084 <RCCEx_PLL2_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800293a:	e010      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800293c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002940:	332c      	adds	r3, #44	; 0x2c
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fc36 	bl	80031b4 <RCCEx_PLL3_Config>
 8002948:	4603      	mov	r3, r0
 800294a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 800294e:	e006      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8002956:	e002      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8002958:	bf00      	nop
 800295a:	e000      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 800295c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800295e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002962:	2b00      	cmp	r3, #0
 8002964:	d10d      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002966:	4b85      	ldr	r3, [pc, #532]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002968:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800296c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002970:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002974:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002978:	4a80      	ldr	r2, [pc, #512]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800297a:	430b      	orrs	r3, r1
 800297c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002980:	e003      	b.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002982:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002986:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800298a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002992:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002996:	663b      	str	r3, [r7, #96]	; 0x60
 8002998:	2300      	movs	r3, #0
 800299a:	667b      	str	r3, [r7, #100]	; 0x64
 800299c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80029a0:	460b      	mov	r3, r1
 80029a2:	4313      	orrs	r3, r2
 80029a4:	d046      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80029a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029ae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80029b2:	d028      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80029b4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80029b8:	d821      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80029ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029be:	d022      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80029c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029c4:	d81b      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80029c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029ca:	d01c      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80029cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029d0:	d815      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80029d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029d6:	d008      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80029d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029dc:	d80f      	bhi.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d011      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80029e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e6:	d00e      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80029e8:	e009      	b.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80029ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029ee:	3308      	adds	r3, #8
 80029f0:	4618      	mov	r0, r3
 80029f2:	f000 fb47 	bl	8003084 <RCCEx_PLL2_Config>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80029fc:	e004      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8002a04:	e000      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8002a06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a08:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10d      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8002a10:	4b5a      	ldr	r3, [pc, #360]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a16:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002a1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002a22:	4a56      	ldr	r2, [pc, #344]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002a24:	430b      	orrs	r3, r1
 8002a26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a2a:	e003      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a2c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002a30:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8002a34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8002a40:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a42:	2300      	movs	r3, #0
 8002a44:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a46:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	d03f      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8002a50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d81e      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8002a5c:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8002a5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a62:	bf00      	nop
 8002a64:	08002aa3 	.word	0x08002aa3
 8002a68:	08002a79 	.word	0x08002a79
 8002a6c:	08002a87 	.word	0x08002a87
 8002a70:	08002aa3 	.word	0x08002aa3
 8002a74:	08002aa3 	.word	0x08002aa3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a78:	4b40      	ldr	r3, [pc, #256]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7c:	4a3f      	ldr	r2, [pc, #252]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a82:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002a84:	e00e      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002a86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a8a:	332c      	adds	r3, #44	; 0x2c
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 fb91 	bl	80031b4 <RCCEx_PLL3_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8002a98:	e004      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8002aa0:	e000      	b.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8002aa2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002aa4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d10d      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8002aac:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002aae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002ab2:	f023 0107 	bic.w	r1, r3, #7
 8002ab6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	4a2f      	ldr	r2, [pc, #188]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002ac6:	e003      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002acc:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8002ad0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8002adc:	653b      	str	r3, [r7, #80]	; 0x50
 8002ade:	2300      	movs	r3, #0
 8002ae0:	657b      	str	r3, [r7, #84]	; 0x54
 8002ae2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	d04d      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8002aec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002af8:	d028      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x610>
 8002afa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002afe:	d821      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002b00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b04:	d024      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8002b06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b0a:	d81b      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002b0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b10:	d00e      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8002b12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b16:	d815      	bhi.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01b      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8002b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b20:	d110      	bne.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b22:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b2c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002b2e:	e012      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b34:	332c      	adds	r3, #44	; 0x2c
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 fb3c 	bl	80031b4 <RCCEx_PLL3_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8002b42:	e008      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8002b4a:	e004      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8002b4c:	bf00      	nop
 8002b4e:	e002      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8002b50:	bf00      	nop
 8002b52:	e000      	b.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8002b54:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002b56:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d110      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b64:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002b68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b70:	4a02      	ldr	r2, [pc, #8]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002b72:	430b      	orrs	r3, r1
 8002b74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b78:	e006      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002b7a:	bf00      	nop
 8002b7c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b80:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002b84:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b90:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8002b94:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b96:	2300      	movs	r3, #0
 8002b98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b9a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	f000 80b5 	beq.w	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bac:	4b9d      	ldr	r3, [pc, #628]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d113      	bne.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	4b9a      	ldr	r3, [pc, #616]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002bbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc0:	4a98      	ldr	r2, [pc, #608]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002bca:	4b96      	ldr	r3, [pc, #600]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002bcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bd8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8002be2:	4b91      	ldr	r3, [pc, #580]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	4a90      	ldr	r2, [pc, #576]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bee:	f7fd fe0d 	bl	800080c <HAL_GetTick>
 8002bf2:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf8:	f7fd fe08 	bl	800080c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d903      	bls.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8002c0e:	e005      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8002c10:	4b85      	ldr	r3, [pc, #532]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8002c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0ed      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8002c1c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d165      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c24:	4b7f      	ldr	r3, [pc, #508]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8002c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d023      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x746>
 8002c3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c3e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 8002c42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01b      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c4a:	4b76      	ldr	r3, [pc, #472]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002c4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c58:	4b72      	ldr	r3, [pc, #456]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002c5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c5e:	4a71      	ldr	r2, [pc, #452]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c68:	4b6e      	ldr	r3, [pc, #440]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002c6e:	4a6d      	ldr	r2, [pc, #436]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c78:	4a6a      	ldr	r2, [pc, #424]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002c7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d019      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fd fdbd 	bl	800080c <HAL_GetTick>
 8002c92:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c96:	e00d      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fd fdb8 	bl	800080c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002ca2:	1ad2      	subs	r2, r2, r3
 8002ca4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d903      	bls.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 8002cb2:	e006      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb4:	4b5b      	ldr	r3, [pc, #364]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ea      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8002cc2:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10d      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8002cca:	4b56      	ldr	r3, [pc, #344]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002ccc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cd0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cd8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002cdc:	4a51      	ldr	r2, [pc, #324]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002cde:	430b      	orrs	r3, r1
 8002ce0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ce6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002cea:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8002cee:	e003      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002cf4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cf8:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b48      	ldr	r3, [pc, #288]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d06:	4a47      	ldr	r2, [pc, #284]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002d08:	f023 0304 	bic.w	r3, r3, #4
 8002d0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8002d10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d18:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8002d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8002d1e:	2300      	movs	r3, #0
 8002d20:	647b      	str	r3, [r7, #68]	; 0x44
 8002d22:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002d26:	460b      	mov	r3, r1
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	d042      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8002d2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d34:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002d38:	d022      	beq.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x844>
 8002d3a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8002d3e:	d81b      	bhi.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002d40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d44:	d011      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8002d46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d4a:	d815      	bhi.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d019      	beq.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8002d50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d54:	d110      	bne.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 f991 	bl	8003084 <RCCEx_PLL2_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8002d68:	e00d      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d6a:	4b2e      	ldr	r3, [pc, #184]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6e:	4a2d      	ldr	r2, [pc, #180]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d74:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8002d76:	e006      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8002d7e:	e002      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8002d80:	bf00      	nop
 8002d82:	e000      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 8002d84:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002d86:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10d      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8002d8e:	4b25      	ldr	r3, [pc, #148]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d94:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002d98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002da0:	4a20      	ldr	r2, [pc, #128]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002da2:	430b      	orrs	r3, r1
 8002da4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002da8:	e003      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002daa:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002dae:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002db2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8002dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dc4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	d032      	beq.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8002dce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dda:	d00b      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002ddc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002de0:	d804      	bhi.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8002de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dea:	d007      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8002df2:	e004      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8002df4:	bf00      	nop
 8002df6:	e002      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8002df8:	bf00      	nop
 8002dfa:	e000      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8002dfc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8002dfe:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d112      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8002e06:	4b07      	ldr	r3, [pc, #28]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002e08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e10:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e18:	4a02      	ldr	r2, [pc, #8]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8002e1a:	430b      	orrs	r3, r1
 8002e1c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002e20:	e008      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8002e22:	bf00      	nop
 8002e24:	46020c00 	.word	0x46020c00
 8002e28:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e2c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002e30:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8002e34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8002e40:	633b      	str	r3, [r7, #48]	; 0x30
 8002e42:	2300      	movs	r3, #0
 8002e44:	637b      	str	r3, [r7, #52]	; 0x34
 8002e46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	d019      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8002e50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e5c:	d105      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002e5e:	4b88      	ldr	r3, [pc, #544]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	4a87      	ldr	r2, [pc, #540]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8002e6a:	4b85      	ldr	r3, [pc, #532]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002e6c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e70:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8002e74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002e7c:	4a80      	ldr	r2, [pc, #512]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002e7e:	430b      	orrs	r3, r1
 8002e80:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8002e84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e92:	2300      	movs	r3, #0
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e96:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	d00c      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8002ea0:	4b77      	ldr	r3, [pc, #476]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eaa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002eae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002eb2:	4973      	ldr	r1, [pc, #460]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8002eba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002ec6:	623b      	str	r3, [r7, #32]
 8002ec8:	2300      	movs	r3, #0
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
 8002ecc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	d00c      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8002ed6:	4b6a      	ldr	r3, [pc, #424]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002edc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ee0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ee4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ee8:	4965      	ldr	r1, [pc, #404]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8002ef0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002f06:	460b      	mov	r3, r1
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	d00c      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8002f0c:	4b5c      	ldr	r3, [pc, #368]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002f0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f12:	f023 0218 	bic.w	r2, r3, #24
 8002f16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f1a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002f1e:	4958      	ldr	r1, [pc, #352]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002f26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2e:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]
 8002f38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	d032      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8002f42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f50:	4b4b      	ldr	r3, [pc, #300]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	4a4a      	ldr	r2, [pc, #296]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002f56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f5a:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8002f5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f60:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f68:	d108      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f6e:	3308      	adds	r3, #8
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 f887 	bl	8003084 <RCCEx_PLL2_Config>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 8002f7c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10d      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8002f84:	4b3e      	ldr	r3, [pc, #248]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002f86:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002f8a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f96:	493a      	ldr	r1, [pc, #232]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8002f9e:	e003      	b.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa0:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002fa4:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8002fa8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb0:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	d03a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8002fc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fd0:	d00e      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002fd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fd6:	d815      	bhi.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d017      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8002fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fe0:	d110      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fe2:	4b27      	ldr	r3, [pc, #156]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe6:	4a26      	ldr	r2, [pc, #152]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8002fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fec:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8002fee:	e00e      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ff0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f844 	bl	8003084 <RCCEx_PLL2_Config>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003002:	e004      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800300a:	e000      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800300c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800300e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10d      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800301c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003020:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003024:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003028:	4915      	ldr	r1, [pc, #84]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003030:	e003      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003032:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003036:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800303a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	2300      	movs	r3, #0
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003050:	460b      	mov	r3, r1
 8003052:	4313      	orrs	r3, r2
 8003054:	d00c      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8003056:	4b0a      	ldr	r3, [pc, #40]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800305c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003060:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003064:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003068:	4905      	ldr	r1, [pc, #20]	; (8003080 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800306a:	4313      	orrs	r3, r2
 800306c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8003070:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 8003074:	4618      	mov	r0, r3
 8003076:	37e0      	adds	r7, #224	; 0xe0
 8003078:	46bd      	mov	sp, r7
 800307a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307e:	bf00      	nop
 8003080:	46020c00 	.word	0x46020c00

08003084 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800308c:	4b47      	ldr	r3, [pc, #284]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a46      	ldr	r2, [pc, #280]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 8003092:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003096:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003098:	f7fd fbb8 	bl	800080c <HAL_GetTick>
 800309c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800309e:	e008      	b.n	80030b2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80030a0:	f7fd fbb4 	bl	800080c <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e077      	b.n	80031a2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80030b2:	4b3e      	ldr	r3, [pc, #248]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80030be:	4b3b      	ldr	r3, [pc, #236]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 80030c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030c6:	f023 0303 	bic.w	r3, r3, #3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6811      	ldr	r1, [r2, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6852      	ldr	r2, [r2, #4]
 80030d2:	3a01      	subs	r2, #1
 80030d4:	0212      	lsls	r2, r2, #8
 80030d6:	430a      	orrs	r2, r1
 80030d8:	4934      	ldr	r1, [pc, #208]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 80030de:	4b33      	ldr	r3, [pc, #204]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 80030e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030e2:	4b33      	ldr	r3, [pc, #204]	; (80031b0 <RCCEx_PLL2_Config+0x12c>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6892      	ldr	r2, [r2, #8]
 80030ea:	3a01      	subs	r2, #1
 80030ec:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68d2      	ldr	r2, [r2, #12]
 80030f4:	3a01      	subs	r2, #1
 80030f6:	0252      	lsls	r2, r2, #9
 80030f8:	b292      	uxth	r2, r2
 80030fa:	4311      	orrs	r1, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6912      	ldr	r2, [r2, #16]
 8003100:	3a01      	subs	r2, #1
 8003102:	0412      	lsls	r2, r2, #16
 8003104:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003108:	4311      	orrs	r1, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6952      	ldr	r2, [r2, #20]
 800310e:	3a01      	subs	r2, #1
 8003110:	0612      	lsls	r2, r2, #24
 8003112:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003116:	430a      	orrs	r2, r1
 8003118:	4924      	ldr	r1, [pc, #144]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 800311a:	4313      	orrs	r3, r2
 800311c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800311e:	4b23      	ldr	r3, [pc, #140]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 8003120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003122:	f023 020c 	bic.w	r2, r3, #12
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	4920      	ldr	r1, [pc, #128]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 800312c:	4313      	orrs	r3, r2
 800312e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003130:	4b1e      	ldr	r3, [pc, #120]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 8003132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a1b      	ldr	r3, [r3, #32]
 8003138:	491c      	ldr	r1, [pc, #112]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 800313a:	4313      	orrs	r3, r2
 800313c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800313e:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 8003140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003142:	4a1a      	ldr	r2, [pc, #104]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 8003144:	f023 0310 	bic.w	r3, r3, #16
 8003148:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800314a:	4b18      	ldr	r3, [pc, #96]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003152:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	69d2      	ldr	r2, [r2, #28]
 800315a:	00d2      	lsls	r2, r2, #3
 800315c:	4913      	ldr	r1, [pc, #76]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 800315e:	4313      	orrs	r3, r2
 8003160:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8003162:	4b12      	ldr	r3, [pc, #72]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	4a11      	ldr	r2, [pc, #68]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 8003168:	f043 0310 	orr.w	r3, r3, #16
 800316c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a0e      	ldr	r2, [pc, #56]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 8003174:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003178:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800317a:	f7fd fb47 	bl	800080c <HAL_GetTick>
 800317e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003180:	e008      	b.n	8003194 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003182:	f7fd fb43 	bl	800080c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b02      	cmp	r3, #2
 800318e:	d901      	bls.n	8003194 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e006      	b.n	80031a2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <RCCEx_PLL2_Config+0x128>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0

}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	46020c00 	.word	0x46020c00
 80031b0:	80800000 	.word	0x80800000

080031b4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80031bc:	4b47      	ldr	r3, [pc, #284]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a46      	ldr	r2, [pc, #280]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 80031c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80031c8:	f7fd fb20 	bl	800080c <HAL_GetTick>
 80031cc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80031ce:	e008      	b.n	80031e2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80031d0:	f7fd fb1c 	bl	800080c <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d901      	bls.n	80031e2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e077      	b.n	80032d2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80031e2:	4b3e      	ldr	r3, [pc, #248]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1f0      	bne.n	80031d0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80031ee:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031f6:	f023 0303 	bic.w	r3, r3, #3
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6811      	ldr	r1, [r2, #0]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6852      	ldr	r2, [r2, #4]
 8003202:	3a01      	subs	r2, #1
 8003204:	0212      	lsls	r2, r2, #8
 8003206:	430a      	orrs	r2, r1
 8003208:	4934      	ldr	r1, [pc, #208]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 800320a:	4313      	orrs	r3, r2
 800320c:	630b      	str	r3, [r1, #48]	; 0x30
 800320e:	4b33      	ldr	r3, [pc, #204]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 8003210:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003212:	4b33      	ldr	r3, [pc, #204]	; (80032e0 <RCCEx_PLL3_Config+0x12c>)
 8003214:	4013      	ands	r3, r2
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6892      	ldr	r2, [r2, #8]
 800321a:	3a01      	subs	r2, #1
 800321c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	68d2      	ldr	r2, [r2, #12]
 8003224:	3a01      	subs	r2, #1
 8003226:	0252      	lsls	r2, r2, #9
 8003228:	b292      	uxth	r2, r2
 800322a:	4311      	orrs	r1, r2
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6912      	ldr	r2, [r2, #16]
 8003230:	3a01      	subs	r2, #1
 8003232:	0412      	lsls	r2, r2, #16
 8003234:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003238:	4311      	orrs	r1, r2
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6952      	ldr	r2, [r2, #20]
 800323e:	3a01      	subs	r2, #1
 8003240:	0612      	lsls	r2, r2, #24
 8003242:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8003246:	430a      	orrs	r2, r1
 8003248:	4924      	ldr	r1, [pc, #144]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 800324a:	4313      	orrs	r3, r2
 800324c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800324e:	4b23      	ldr	r3, [pc, #140]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f023 020c 	bic.w	r2, r3, #12
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	4920      	ldr	r1, [pc, #128]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 800325c:	4313      	orrs	r3, r2
 800325e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8003260:	4b1e      	ldr	r3, [pc, #120]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 8003262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	491c      	ldr	r1, [pc, #112]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 800326a:	4313      	orrs	r3, r2
 800326c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800326e:	4b1b      	ldr	r3, [pc, #108]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	4a1a      	ldr	r2, [pc, #104]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 8003274:	f023 0310 	bic.w	r3, r3, #16
 8003278:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800327a:	4b18      	ldr	r3, [pc, #96]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 800327c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800327e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003282:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	69d2      	ldr	r2, [r2, #28]
 800328a:	00d2      	lsls	r2, r2, #3
 800328c:	4913      	ldr	r1, [pc, #76]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 800328e:	4313      	orrs	r3, r2
 8003290:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8003292:	4b12      	ldr	r3, [pc, #72]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003296:	4a11      	ldr	r2, [pc, #68]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 8003298:	f043 0310 	orr.w	r3, r3, #16
 800329c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800329e:	4b0f      	ldr	r3, [pc, #60]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032a8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032aa:	f7fd faaf 	bl	800080c <HAL_GetTick>
 80032ae:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80032b0:	e008      	b.n	80032c4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80032b2:	f7fd faab 	bl	800080c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d901      	bls.n	80032c4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e006      	b.n	80032d2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <RCCEx_PLL3_Config+0x128>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	46020c00 	.word	0x46020c00
 80032e0:	80800000 	.word	0x80800000

080032e4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d071      	beq.n	80033da <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd f91c 	bl	8000548 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003318:	4b32      	ldr	r3, [pc, #200]	; (80033e4 <HAL_RTC_Init+0x100>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b10      	cmp	r3, #16
 8003322:	d051      	beq.n	80033c8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003324:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_RTC_Init+0x100>)
 8003326:	22ca      	movs	r2, #202	; 0xca
 8003328:	625a      	str	r2, [r3, #36]	; 0x24
 800332a:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <HAL_RTC_Init+0x100>)
 800332c:	2253      	movs	r2, #83	; 0x53
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f88b 	bl	800344c <RTC_EnterInitMode>
 8003336:	4603      	mov	r3, r0
 8003338:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d13f      	bne.n	80033c0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003340:	4b28      	ldr	r3, [pc, #160]	; (80033e4 <HAL_RTC_Init+0x100>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	4a27      	ldr	r2, [pc, #156]	; (80033e4 <HAL_RTC_Init+0x100>)
 8003346:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800334a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800334e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003350:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <HAL_RTC_Init+0x100>)
 8003352:	699a      	ldr	r2, [r3, #24]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	4319      	orrs	r1, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	430b      	orrs	r3, r1
 8003364:	491f      	ldr	r1, [pc, #124]	; (80033e4 <HAL_RTC_Init+0x100>)
 8003366:	4313      	orrs	r3, r2
 8003368:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68da      	ldr	r2, [r3, #12]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	491b      	ldr	r1, [pc, #108]	; (80033e4 <HAL_RTC_Init+0x100>)
 8003376:	4313      	orrs	r3, r2
 8003378:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800337a:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <HAL_RTC_Init+0x100>)
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	430b      	orrs	r3, r1
 800338c:	4915      	ldr	r1, [pc, #84]	; (80033e4 <HAL_RTC_Init+0x100>)
 800338e:	4313      	orrs	r3, r2
 8003390:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f896 	bl	80034c4 <RTC_ExitInitMode>
 8003398:	4603      	mov	r3, r0
 800339a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10e      	bne.n	80033c0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80033a2:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <HAL_RTC_Init+0x100>)
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a19      	ldr	r1, [r3, #32]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4319      	orrs	r1, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	430b      	orrs	r3, r1
 80033ba:	490a      	ldr	r1, [pc, #40]	; (80033e4 <HAL_RTC_Init+0x100>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033c0:	4b08      	ldr	r3, [pc, #32]	; (80033e4 <HAL_RTC_Init+0x100>)
 80033c2:	22ff      	movs	r2, #255	; 0xff
 80033c4:	625a      	str	r2, [r3, #36]	; 0x24
 80033c6:	e001      	b.n	80033cc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d103      	bne.n	80033da <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80033da:	7bfb      	ldrb	r3, [r7, #15]
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	46007800 	.word	0x46007800

080033e8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <HAL_RTC_WaitForSynchro+0x60>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	4a14      	ldr	r2, [pc, #80]	; (8003448 <HAL_RTC_WaitForSynchro+0x60>)
 80033f6:	f023 0320 	bic.w	r3, r3, #32
 80033fa:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80033fc:	f7fd fa06 	bl	800080c <HAL_GetTick>
 8003400:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003402:	e013      	b.n	800342c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003404:	f7fd fa02 	bl	800080c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003412:	d90b      	bls.n	800342c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003414:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <HAL_RTC_WaitForSynchro+0x60>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10c      	bne.n	800343a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2203      	movs	r2, #3
 8003424:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e008      	b.n	800343e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800342c:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_RTC_WaitForSynchro+0x60>)
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0e5      	beq.n	8003404 <HAL_RTC_WaitForSynchro+0x1c>
 8003438:	e000      	b.n	800343c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800343a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	46007800 	.word	0x46007800

0800344c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003458:	4b19      	ldr	r3, [pc, #100]	; (80034c0 <RTC_EnterInitMode+0x74>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003460:	2b00      	cmp	r3, #0
 8003462:	d128      	bne.n	80034b6 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003464:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <RTC_EnterInitMode+0x74>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	4a15      	ldr	r2, [pc, #84]	; (80034c0 <RTC_EnterInitMode+0x74>)
 800346a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800346e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003470:	f7fd f9cc 	bl	800080c <HAL_GetTick>
 8003474:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003476:	e013      	b.n	80034a0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003478:	f7fd f9c8 	bl	800080c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003486:	d90b      	bls.n	80034a0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003488:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <RTC_EnterInitMode+0x74>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10f      	bne.n	80034b4 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2203      	movs	r2, #3
 800349c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <RTC_EnterInitMode+0x74>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d104      	bne.n	80034b6 <RTC_EnterInitMode+0x6a>
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d1e2      	bne.n	8003478 <RTC_EnterInitMode+0x2c>
 80034b2:	e000      	b.n	80034b6 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 80034b4:	bf00      	nop
        }
      }
    }
  }

  return status;
 80034b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	46007800 	.word	0x46007800

080034c4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80034d0:	4b1a      	ldr	r3, [pc, #104]	; (800353c <RTC_ExitInitMode+0x78>)
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	4a19      	ldr	r2, [pc, #100]	; (800353c <RTC_ExitInitMode+0x78>)
 80034d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034da:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80034dc:	4b17      	ldr	r3, [pc, #92]	; (800353c <RTC_ExitInitMode+0x78>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	f003 0320 	and.w	r3, r3, #32
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10c      	bne.n	8003502 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff ff7d 	bl	80033e8 <HAL_RTC_WaitForSynchro>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d01e      	beq.n	8003532 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2203      	movs	r2, #3
 80034f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	73fb      	strb	r3, [r7, #15]
 8003500:	e017      	b.n	8003532 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003502:	4b0e      	ldr	r3, [pc, #56]	; (800353c <RTC_ExitInitMode+0x78>)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	4a0d      	ldr	r2, [pc, #52]	; (800353c <RTC_ExitInitMode+0x78>)
 8003508:	f023 0320 	bic.w	r3, r3, #32
 800350c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ff6a 	bl	80033e8 <HAL_RTC_WaitForSynchro>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2203      	movs	r2, #3
 800351e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003526:	4b05      	ldr	r3, [pc, #20]	; (800353c <RTC_ExitInitMode+0x78>)
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	4a04      	ldr	r2, [pc, #16]	; (800353c <RTC_ExitInitMode+0x78>)
 800352c:	f043 0320 	orr.w	r3, r3, #32
 8003530:	6193      	str	r3, [r2, #24]
  }
  return status;
 8003532:	7bfb      	ldrb	r3, [r7, #15]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	46007800 	.word	0x46007800

08003540 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8003558:	2302      	movs	r3, #2
 800355a:	e057      	b.n	800360c <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d


  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 800356c:	4b29      	ldr	r3, [pc, #164]	; (8003614 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 800356e:	699b      	ldr	r3, [r3, #24]
 8003570:	4a28      	ldr	r2, [pc, #160]	; (8003614 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8003572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003576:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 8003578:	4b26      	ldr	r3, [pc, #152]	; (8003614 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 800357a:	2204      	movs	r2, #4
 800357c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800357e:	4b25      	ldr	r3, [pc, #148]	; (8003614 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b00      	cmp	r3, #0
 8003588:	d123      	bne.n	80035d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
  {
    tickstart = HAL_GetTick();
 800358a:	f7fd f93f 	bl	800080c <HAL_GetTick>
 800358e:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8003590:	e017      	b.n	80035c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003592:	f7fd f93b 	bl	800080c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035a0:	d90f      	bls.n	80035c2 <HAL_RTCEx_SetWakeUpTimer_IT+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80035a2:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d110      	bne.n	80035d0 <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
        {

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2203      	movs	r2, #3
 80035b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e024      	b.n	800360c <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	f003 0304 	and.w	r3, r3, #4
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0e1      	beq.n	8003592 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
 80035ce:	e000      	b.n	80035d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x92>
        }
        else
        {
          break;
 80035d0:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	041a      	lsls	r2, r3, #16
 80035d6:	490f      	ldr	r1, [pc, #60]	; (8003614 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	4313      	orrs	r3, r2
 80035dc:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 80035de:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f023 0207 	bic.w	r2, r3, #7
 80035e6:	490b      	ldr	r1, [pc, #44]	; (8003614 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 80035ee:	4b09      	ldr	r3, [pc, #36]	; (8003614 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	4a08      	ldr	r2, [pc, #32]	; (8003614 <HAL_RTCEx_SetWakeUpTimer_IT+0xd4>)
 80035f4:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 80035f8:	6193      	str	r3, [r2, #24]


  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3718      	adds	r7, #24
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	46007800 	.word	0x46007800

08003618 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8003620:	4b09      	ldr	r3, [pc, #36]	; (8003648 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8003622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d005      	beq.n	8003638 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 800362c:	4b06      	ldr	r3, [pc, #24]	; (8003648 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800362e:	2204      	movs	r2, #4
 8003630:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fc ff5e 	bl	80004f4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8003640:	bf00      	nop
 8003642:	3708      	adds	r7, #8
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	46007800 	.word	0x46007800

0800364c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4910      	ldr	r1, [pc, #64]	; (80036a0 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8003660:	4313      	orrs	r3, r2
 8003662:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	431a      	orrs	r2, r3
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	490c      	ldr	r1, [pc, #48]	; (80036a4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8003674:	4313      	orrs	r3, r2
 8003676:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	6919      	ldr	r1, [r3, #16]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	041b      	lsls	r3, r3, #16
 800368a:	430b      	orrs	r3, r1
 800368c:	4905      	ldr	r1, [pc, #20]	; (80036a4 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800368e:	4313      	orrs	r3, r2
 8003690:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	46007800 	.word	0x46007800
 80036a4:	46007c00 	.word	0x46007c00

080036a8 <memset>:
 80036a8:	4402      	add	r2, r0
 80036aa:	4603      	mov	r3, r0
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d100      	bne.n	80036b2 <memset+0xa>
 80036b0:	4770      	bx	lr
 80036b2:	f803 1b01 	strb.w	r1, [r3], #1
 80036b6:	e7f9      	b.n	80036ac <memset+0x4>

080036b8 <__libc_init_array>:
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	4d0d      	ldr	r5, [pc, #52]	; (80036f0 <__libc_init_array+0x38>)
 80036bc:	2600      	movs	r6, #0
 80036be:	4c0d      	ldr	r4, [pc, #52]	; (80036f4 <__libc_init_array+0x3c>)
 80036c0:	1b64      	subs	r4, r4, r5
 80036c2:	10a4      	asrs	r4, r4, #2
 80036c4:	42a6      	cmp	r6, r4
 80036c6:	d109      	bne.n	80036dc <__libc_init_array+0x24>
 80036c8:	4d0b      	ldr	r5, [pc, #44]	; (80036f8 <__libc_init_array+0x40>)
 80036ca:	2600      	movs	r6, #0
 80036cc:	4c0b      	ldr	r4, [pc, #44]	; (80036fc <__libc_init_array+0x44>)
 80036ce:	f000 f817 	bl	8003700 <_init>
 80036d2:	1b64      	subs	r4, r4, r5
 80036d4:	10a4      	asrs	r4, r4, #2
 80036d6:	42a6      	cmp	r6, r4
 80036d8:	d105      	bne.n	80036e6 <__libc_init_array+0x2e>
 80036da:	bd70      	pop	{r4, r5, r6, pc}
 80036dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e0:	3601      	adds	r6, #1
 80036e2:	4798      	blx	r3
 80036e4:	e7ee      	b.n	80036c4 <__libc_init_array+0xc>
 80036e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ea:	3601      	adds	r6, #1
 80036ec:	4798      	blx	r3
 80036ee:	e7f2      	b.n	80036d6 <__libc_init_array+0x1e>
 80036f0:	080037e8 	.word	0x080037e8
 80036f4:	080037e8 	.word	0x080037e8
 80036f8:	080037e8 	.word	0x080037e8
 80036fc:	080037ec 	.word	0x080037ec

08003700 <_init>:
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	bf00      	nop
 8003704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003706:	bc08      	pop	{r3}
 8003708:	469e      	mov	lr, r3
 800370a:	4770      	bx	lr

0800370c <_fini>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr
