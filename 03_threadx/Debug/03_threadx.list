
03_threadx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000637c  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  080065b4  080065b4  000165b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080066d8  080066d8  000166d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080066dc  080066dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080066e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000013e0  20000010  080066f0  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200013f0  080066f0  000213f0  2**0
                  ALLOC
  8 .ARM.attributes 00000036  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001f956  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005b21  00000000  00000000  0003f9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000017c8  00000000  00000000  00045500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001144  00000000  00000000  00046cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036a73  00000000  00000000  00047e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024239  00000000  00000000  0007e87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014aaa2  00000000  00000000  000a2ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000581c  00000000  00000000  001ed55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000109  00000000  00000000  001f2d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000010 	.word	0x20000010
 8000254:	00000000 	.word	0x00000000
 8000258:	0800659c 	.word	0x0800659c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000014 	.word	0x20000014
 8000274:	0800659c 	.word	0x0800659c

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4917      	ldr	r1, [pc, #92]	; (80002dc <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4816      	ldr	r0, [pc, #88]	; (80002e0 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4815      	ldr	r0, [pc, #84]	; (80002e4 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4912      	ldr	r1, [pc, #72]	; (80002dc <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	4913      	ldr	r1, [pc, #76]	; (80002e8 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029c:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 800029e:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a2:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a4:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002a8:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ac:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b0:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b4:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b6:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002ba:	4770      	bx	lr

080002bc <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002bc:	f7ff bffe 	b.w	80002bc <__tx_BadHandler>

080002c0 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c0:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002c6:	4770      	bx	lr

080002c8 <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c8:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ca:	f000 f89f 	bl	800040c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d2:	4770      	bx	lr

080002d4 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d4:	f7ff bffe 	b.w	80002d4 <__tx_NMIHandler>

080002d8 <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002dc:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e0:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e4:	20000de0 	.word	0x20000de0
    LDR     r1, =SYSTICK_CYCLES
 80002e8:	0003a97f 	.word	0x0003a97f
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a31      	ldr	r2, [pc, #196]	; (80003bc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c22      	ldr	r4, [pc, #136]	; (80003c8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c1b      	ldr	r4, [pc, #108]	; (80003c8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b949      	cbnz	r1, 80003a6 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000392:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000394:	f005 ff78 	bl	8006288 <tx_low_power_enter>
    POP     {r0-r3}
 8000398:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800039a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 800039c:	f005 ff9c 	bl	80062d8 <tx_low_power_exit>
    POP     {r0-r3}
 80003a0:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a4:	e7f1      	b.n	800038a <__tx_ts_wait>

080003a6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003aa:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003ae:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b4:	e7d0      	b.n	8000358 <__tx_ts_restore>
 80003b6:	bf00      	nop

080003b8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b8:	4770      	bx	lr
 80003ba:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003bc:	20000e7c 	.word	0x20000e7c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c0:	20000de4 	.word	0x20000de4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c4:	20000de8 	.word	0x20000de8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c8:	200013e8 	.word	0x200013e8

080003cc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003cc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ce:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003da:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003dc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ea:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003ec:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ee:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fe:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000400:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000406:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000408:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr

0800040c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	4922      	ldr	r1, [pc, #136]	; (8000498 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000410:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000414:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000418:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041a:	b13a      	cbz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800041c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000420:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000422:	b91a      	cbnz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000426:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042a:	6018      	str	r0, [r3, #0]

0800042c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000430:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000432:	b122      	cbz	r2, 800043e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000436:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800043c:	e008      	b.n	8000450 <__tx_timer_done>

0800043e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000444:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000446:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000448:	d101      	bne.n	800044e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800044c:	6818      	ldr	r0, [r3, #0]

0800044e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044e:	6008      	str	r0, [r1, #0]

08000450 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000452:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000454:	b912      	cbnz	r2, 800045c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045a:	b1c8      	cbz	r0, 8000490 <__tx_timer_nothing_expired>

0800045c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800045c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045e:	4912      	ldr	r1, [pc, #72]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000462:	b108      	cbz	r0, 8000468 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000464:	f005 f9b6 	bl	80057d4 <_tx_timer_expiration_process>

08000468 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800046c:	b172      	cbz	r2, 800048c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046e:	f005 f905 	bl	800567c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000474:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000476:	b949      	cbnz	r1, 800048c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000486:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000488:	d000      	beq.n	800048c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048a:	6002      	str	r2, [r0, #0]

0800048c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800048c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000490 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000490:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000494:	4770      	bx	lr
 8000496:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000498:	20000e88 	.word	0x20000e88
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049c:	200013e8 	.word	0x200013e8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a0:	20000e8c 	.word	0x20000e8c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a4:	20000f18 	.word	0x20000f18
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a8:	20000f1c 	.word	0x20000f1c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004ac:	20000f14 	.word	0x20000f14
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b0:	20000f10 	.word	0x20000f10
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b4:	20000e7c 	.word	0x20000e7c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b8:	20000de4 	.word	0x20000de4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004bc:	20000de8 	.word	0x20000de8
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c0:	e000ed04 	.word	0xe000ed04

080004c4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80004cc:	2300      	movs	r3, #0
 80004ce:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80004d0:	2334      	movs	r3, #52	; 0x34
 80004d2:	9300      	str	r3, [sp, #0]
 80004d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80004d8:	4a0a      	ldr	r2, [pc, #40]	; (8000504 <tx_application_define+0x40>)
 80004da:	490b      	ldr	r1, [pc, #44]	; (8000508 <tx_application_define+0x44>)
 80004dc:	480b      	ldr	r0, [pc, #44]	; (800050c <tx_application_define+0x48>)
 80004de:	f005 fc23 	bl	8005d28 <_txe_byte_pool_create>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d109      	bne.n	80004fc <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80004e8:	4b08      	ldr	r3, [pc, #32]	; (800050c <tx_application_define+0x48>)
 80004ea:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80004ec:	68b8      	ldr	r0, [r7, #8]
 80004ee:	f000 f80f 	bl	8000510 <App_ThreadX_Init>
 80004f2:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d000      	beq.n	80004fc <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80004fa:	e7fe      	b.n	80004fa <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80004fc:	bf00      	nop
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	2000002c 	.word	0x2000002c
 8000508:	080065b4 	.word	0x080065b4
 800050c:	20000c2c 	.word	0x20000c2c

08000510 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b08e      	sub	sp, #56	; 0x38
 8000514:	af08      	add	r7, sp, #32
 8000516:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	613b      	str	r3, [r7, #16]

  /* USER CODE END App_ThreadX_MEM_POOL */
CHAR *pointer;

  /* Allocate the stack for tx app thread  */
  if (tx_byte_allocate(byte_pool, (VOID**) &pointer,
 8000520:	f107 010c 	add.w	r1, r7, #12
 8000524:	2300      	movs	r3, #0
 8000526:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052a:	6938      	ldr	r0, [r7, #16]
 800052c:	f005 fb88 	bl	8005c40 <_txe_byte_allocate>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <App_ThreadX_Init+0x2a>
                       TX_APP_STACK_SIZE, TX_NO_WAIT) != TX_SUCCESS)
  {
    return TX_POOL_ERROR;
 8000536:	2302      	movs	r3, #2
 8000538:	e025      	b.n	8000586 <App_ThreadX_Init+0x76>
  }
   /* Create tx app thread.  */
  if (tx_thread_create(&tx_app_thread, "tx app thread", tx_app_thread_entry, 0, pointer,
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	22b0      	movs	r2, #176	; 0xb0
 800053e:	9206      	str	r2, [sp, #24]
 8000540:	2201      	movs	r2, #1
 8000542:	9205      	str	r2, [sp, #20]
 8000544:	2200      	movs	r2, #0
 8000546:	9204      	str	r2, [sp, #16]
 8000548:	220a      	movs	r2, #10
 800054a:	9203      	str	r2, [sp, #12]
 800054c:	220a      	movs	r2, #10
 800054e:	9202      	str	r2, [sp, #8]
 8000550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000554:	9201      	str	r2, [sp, #4]
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	4a0d      	ldr	r2, [pc, #52]	; (8000590 <App_ThreadX_Init+0x80>)
 800055c:	490d      	ldr	r1, [pc, #52]	; (8000594 <App_ThreadX_Init+0x84>)
 800055e:	480e      	ldr	r0, [pc, #56]	; (8000598 <App_ThreadX_Init+0x88>)
 8000560:	f005 fda0 	bl	80060a4 <_txe_thread_create>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <App_ThreadX_Init+0x5e>
                       TX_APP_STACK_SIZE, TX_APP_THREAD_PRIO, TX_APP_THREAD_PREEMPTION_THRESHOLD,
                       TX_APP_THREAD_TIME_SLICE, TX_APP_THREAD_AUTO_START) != TX_SUCCESS)
  {
    return TX_THREAD_ERROR;
 800056a:	230e      	movs	r3, #14
 800056c:	e00b      	b.n	8000586 <App_ThreadX_Init+0x76>
  }

  /* Create tx app semaphore.  */
  if (tx_semaphore_create(&tx_app_semaphore, "tx app semaphore", 0) != TX_SUCCESS)
 800056e:	231c      	movs	r3, #28
 8000570:	2200      	movs	r2, #0
 8000572:	490a      	ldr	r1, [pc, #40]	; (800059c <App_ThreadX_Init+0x8c>)
 8000574:	480a      	ldr	r0, [pc, #40]	; (80005a0 <App_ThreadX_Init+0x90>)
 8000576:	f005 fc77 	bl	8005e68 <_txe_semaphore_create>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <App_ThreadX_Init+0x74>
  {
    return TX_SEMAPHORE_ERROR;
 8000580:	230c      	movs	r3, #12
 8000582:	e000      	b.n	8000586 <App_ThreadX_Init+0x76>
  }

  /* USER CODE BEGIN App_ThreadX_Init */
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000584:	697b      	ldr	r3, [r7, #20]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3718      	adds	r7, #24
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	080005a5 	.word	0x080005a5
 8000594:	080065c8 	.word	0x080065c8
 8000598:	20000c60 	.word	0x20000c60
 800059c:	080065d8 	.word	0x080065d8
 80005a0:	20000d10 	.word	0x20000d10

080005a4 <tx_app_thread_entry>:
  * @brief  Function implementing the tx_app_thread_entry thread.
  * @param  thread_input: Not used.
  * @retval None
  */
void tx_app_thread_entry(ULONG thread_input)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN tx_app_thread_entry */
	uint32_t i = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		if(tx_semaphore_get(&tx_app_semaphore, TX_WAIT_FOREVER) == TX_SUCCESS)
 80005b0:	f04f 31ff 	mov.w	r1, #4294967295
 80005b4:	480b      	ldr	r0, [pc, #44]	; (80005e4 <tx_app_thread_entry+0x40>)
 80005b6:	f005 fced 	bl	8005f94 <_txe_semaphore_get>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1f7      	bne.n	80005b0 <tx_app_thread_entry+0xc>
		{
			for(i = 0; i<10; i++)
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	e009      	b.n	80005da <tx_app_thread_entry+0x36>
			{
				HAL_GPIO_TogglePin(LED_3_SIGNAL_1_GPIO_Port, LED_3_SIGNAL_1_Pin);
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <tx_app_thread_entry+0x44>)
 80005ca:	f000 fe9b 	bl	8001304 <HAL_GPIO_TogglePin>
				App_Delay(50);
 80005ce:	2032      	movs	r0, #50	; 0x32
 80005d0:	f000 f9b8 	bl	8000944 <App_Delay>
			for(i = 0; i<10; i++)
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3301      	adds	r3, #1
 80005d8:	60fb      	str	r3, [r7, #12]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	d9f2      	bls.n	80005c6 <tx_app_thread_entry+0x22>
		if(tx_semaphore_get(&tx_app_semaphore, TX_WAIT_FOREVER) == TX_SUCCESS)
 80005e0:	e7e6      	b.n	80005b0 <tx_app_thread_entry+0xc>
 80005e2:	bf00      	nop
 80005e4:	20000d10 	.word	0x20000d10
 80005e8:	42020400 	.word	0x42020400

080005ec <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 80005f0:	f004 fa52 	bl	8004a98 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 80005f4:	bf00      	nop
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */

  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 8000600:	bf00      	nop
 8000602:	370c      	adds	r7, #12
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */
	HAL_GPIO_WritePin(LED_2_ACTIVE_GPIO_Port, LED_2_ACTIVE_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2140      	movs	r1, #64	; 0x40
 8000614:	4803      	ldr	r0, [pc, #12]	; (8000624 <App_ThreadX_LowPower_Enter+0x18>)
 8000616:	f000 fe5d 	bl	80012d4 <HAL_GPIO_WritePin>
	HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800061a:	2001      	movs	r0, #1
 800061c:	f000 ffca 	bl	80015b4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	42020400 	.word	0x42020400

08000628 <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Exit */
	HAL_GPIO_WritePin(LED_2_ACTIVE_GPIO_Port, LED_2_ACTIVE_Pin, GPIO_PIN_SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2140      	movs	r1, #64	; 0x40
 8000630:	4802      	ldr	r0, [pc, #8]	; (800063c <App_ThreadX_LowPower_Exit+0x14>)
 8000632:	f000 fe4f 	bl	80012d4 <HAL_GPIO_WritePin>

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	42020400 	.word	0x42020400

08000640 <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
  return 0;
 8000644:	2300      	movs	r3, #0
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 8000646:	4618      	mov	r0, r3
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr

08000650 <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE BEGIN 1 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	4603      	mov	r3, r0
 8000658:	80fb      	strh	r3, [r7, #6]
  ULONG currentValue = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  if (GPIO_Pin == GPIO_PIN_13)
 800065e:	88fb      	ldrh	r3, [r7, #6]
 8000660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000664:	d110      	bne.n	8000688 <HAL_GPIO_EXTI_Rising_Callback+0x38>
  {
    /* Add additional checks to avoid multiple semaphore puts by successively
    clicking on the user button */
    tx_semaphore_info_get(&tx_app_semaphore, NULL, &currentValue, NULL, NULL, NULL);
 8000666:	f107 020c 	add.w	r2, r7, #12
 800066a:	2300      	movs	r3, #0
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2300      	movs	r3, #0
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2300      	movs	r3, #0
 8000674:	2100      	movs	r1, #0
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8000678:	f005 fcce 	bl	8006018 <_txe_semaphore_info_get>
    if (currentValue == 0)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d102      	bne.n	8000688 <HAL_GPIO_EXTI_Rising_Callback+0x38>
    {
      /* Put the semaphore to release the MainThread */
      tx_semaphore_put(&tx_app_semaphore);
 8000682:	4803      	ldr	r0, [pc, #12]	; (8000690 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 8000684:	f005 fcf0 	bl	8006068 <_txe_semaphore_put>
    }
  }
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000d10 	.word	0x20000d10

08000694 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f000 faf2 	bl	8000c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f80f 	bl	80006be <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80006a0:	f000 f85b 	bl	800075a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a4:	f000 f8d2 	bl	800084c <MX_GPIO_Init>
  MX_ICACHE_Init();
 80006a8:	f000 f865 	bl	8000776 <MX_ICACHE_Init>
  MX_RTC_Init();
 80006ac:	f000 f876 	bl	800079c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(WAIT_FOR_STLINK);
 80006b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006b4:	f000 fb32 	bl	8000d1c <HAL_Delay>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80006b8:	f7ff ff98 	bl	80005ec <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <main+0x28>

080006be <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b09e      	sub	sp, #120	; 0x78
 80006c2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c4:	f107 0318 	add.w	r3, r7, #24
 80006c8:	2260      	movs	r2, #96	; 0x60
 80006ca:	2100      	movs	r1, #0
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 ff39 	bl	8006544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
 80006e0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80006e2:	2000      	movs	r0, #0
 80006e4:	f000 fe8a 	bl	80013fc <HAL_PWREx_ControlVoltageScaling>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ee:	f000 f951 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80006f2:	2318      	movs	r3, #24
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_1;
 8000704:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000708:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800070e:	2300      	movs	r3, #0
 8000710:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	4618      	mov	r0, r3
 8000718:	f000 ff88 	bl	800162c <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000722:	f000 f937 	bl	8000994 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	231f      	movs	r3, #31
 8000728:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800073e:	463b      	mov	r3, r7
 8000740:	2101      	movs	r1, #1
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fe4e 	bl	80023e4 <HAL_RCC_ClockConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800074e:	f000 f921 	bl	8000994 <Error_Handler>
  }
}
 8000752:	bf00      	nop
 8000754:	3778      	adds	r7, #120	; 0x78
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 800075e:	f000 ff55 	bl	800160c <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000762:	2002      	movs	r0, #2
 8000764:	f000 fed6 	bl	8001514 <HAL_PWREx_ConfigSupply>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800076e:	f000 f911 	bl	8000994 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}

08000776 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000776:	b580      	push	{r7, lr}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 800077a:	2000      	movs	r0, #0
 800077c:	f000 fe0e 	bl	800139c <HAL_ICACHE_ConfigAssociativityMode>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000786:	f000 f905 	bl	8000994 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 800078a:	f000 fe27 	bl	80013dc <HAL_ICACHE_Enable>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000794:	f000 f8fe 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b088      	sub	sp, #32
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
 80007b0:	615a      	str	r2, [r3, #20]
 80007b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007b4:	4b23      	ldr	r3, [pc, #140]	; (8000844 <MX_RTC_Init+0xa8>)
 80007b6:	4a24      	ldr	r2, [pc, #144]	; (8000848 <MX_RTC_Init+0xac>)
 80007b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ba:	4b22      	ldr	r3, [pc, #136]	; (8000844 <MX_RTC_Init+0xa8>)
 80007bc:	2200      	movs	r2, #0
 80007be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007c0:	4b20      	ldr	r3, [pc, #128]	; (8000844 <MX_RTC_Init+0xa8>)
 80007c2:	227f      	movs	r2, #127	; 0x7f
 80007c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007c6:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <MX_RTC_Init+0xa8>)
 80007c8:	22ff      	movs	r2, #255	; 0xff
 80007ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_RTC_Init+0xa8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007d2:	4b1c      	ldr	r3, [pc, #112]	; (8000844 <MX_RTC_Init+0xa8>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007d8:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_RTC_Init+0xa8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007de:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_RTC_Init+0xa8>)
 80007e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_RTC_Init+0xa8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_RTC_Init+0xa8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007f2:	4814      	ldr	r0, [pc, #80]	; (8000844 <MX_RTC_Init+0xa8>)
 80007f4:	f003 f8aa 	bl	800394c <HAL_RTC_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 80007fe:	f000 f8c9 	bl	8000994 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800080e:	2300      	movs	r3, #0
 8000810:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	4619      	mov	r1, r3
 8000816:	480b      	ldr	r0, [pc, #44]	; (8000844 <MX_RTC_Init+0xa8>)
 8000818:	f003 fa2c 	bl	8003c74 <HAL_RTCEx_PrivilegeModeSet>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8000822:	f000 f8b7 	bl	8000994 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 1, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 8000826:	2204      	movs	r2, #4
 8000828:	2101      	movs	r1, #1
 800082a:	4806      	ldr	r0, [pc, #24]	; (8000844 <MX_RTC_Init+0xa8>)
 800082c:	f003 f9bc 	bl	8003ba8 <HAL_RTCEx_SetWakeUpTimer>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_RTC_Init+0x9e>
  {
    Error_Handler();
 8000836:	f000 f8ad 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	3720      	adds	r7, #32
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000d2c 	.word	0x20000d2c
 8000848:	46007800 	.word	0x46007800

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b34      	ldr	r3, [pc, #208]	; (8000934 <MX_GPIO_Init+0xe8>)
 8000864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000868:	4a32      	ldr	r2, [pc, #200]	; (8000934 <MX_GPIO_Init+0xe8>)
 800086a:	f043 0304 	orr.w	r3, r3, #4
 800086e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000872:	4b30      	ldr	r3, [pc, #192]	; (8000934 <MX_GPIO_Init+0xe8>)
 8000874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000880:	4b2c      	ldr	r3, [pc, #176]	; (8000934 <MX_GPIO_Init+0xe8>)
 8000882:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000886:	4a2b      	ldr	r2, [pc, #172]	; (8000934 <MX_GPIO_Init+0xe8>)
 8000888:	f043 0310 	orr.w	r3, r3, #16
 800088c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000890:	4b28      	ldr	r3, [pc, #160]	; (8000934 <MX_GPIO_Init+0xe8>)
 8000892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089e:	4b25      	ldr	r3, [pc, #148]	; (8000934 <MX_GPIO_Init+0xe8>)
 80008a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008a4:	4a23      	ldr	r2, [pc, #140]	; (8000934 <MX_GPIO_Init+0xe8>)
 80008a6:	f043 0301 	orr.w	r3, r3, #1
 80008aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008ae:	4b21      	ldr	r3, [pc, #132]	; (8000934 <MX_GPIO_Init+0xe8>)
 80008b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_GPIO_Init+0xe8>)
 80008be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008c2:	4a1c      	ldr	r2, [pc, #112]	; (8000934 <MX_GPIO_Init+0xe8>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_GPIO_Init+0xe8>)
 80008ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_ERROR_Pin|LED_2_ACTIVE_Pin|LED_3_SIGNAL_1_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	21e0      	movs	r1, #224	; 0xe0
 80008de:	4816      	ldr	r0, [pc, #88]	; (8000938 <MX_GPIO_Init+0xec>)
 80008e0:	f000 fcf8 	bl	80012d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_GPIO_Init+0xf0>)
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4811      	ldr	r0, [pc, #68]	; (8000940 <MX_GPIO_Init+0xf4>)
 80008fa:	f000 fb13 	bl	8000f24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_ERROR_Pin LED_2_ACTIVE_Pin LED_3_SIGNAL_1_Pin */
  GPIO_InitStruct.Pin = LED_1_ERROR_Pin|LED_2_ACTIVE_Pin|LED_3_SIGNAL_1_Pin;
 80008fe:	23e0      	movs	r3, #224	; 0xe0
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	4808      	ldr	r0, [pc, #32]	; (8000938 <MX_GPIO_Init+0xec>)
 8000916:	f000 fb05 	bl	8000f24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 800091a:	2200      	movs	r2, #0
 800091c:	2100      	movs	r1, #0
 800091e:	2018      	movs	r0, #24
 8000920:	f000 fad8 	bl	8000ed4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000924:	2018      	movs	r0, #24
 8000926:	f000 faef 	bl	8000f08 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092a:	bf00      	nop
 800092c:	3728      	adds	r7, #40	; 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	46020c00 	.word	0x46020c00
 8000938:	42020400 	.word	0x42020400
 800093c:	10110000 	.word	0x10110000
 8000940:	42021000 	.word	0x42021000

08000944 <App_Delay>:

/* USER CODE BEGIN 4 */
void App_Delay(uint32_t delay)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	uint32_t initial_time = tx_time_get();
 800094c:	f004 ff24 	bl	8005798 <_tx_time_get>
 8000950:	60f8      	str	r0, [r7, #12]
	while((tx_time_get() - initial_time) < delay);
 8000952:	bf00      	nop
 8000954:	f004 ff20 	bl	8005798 <_tx_time_get>
 8000958:	4602      	mov	r2, r0
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	1ad3      	subs	r3, r2, r3
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	429a      	cmp	r2, r3
 8000962:	d8f7      	bhi.n	8000954 <App_Delay+0x10>
}
 8000964:	bf00      	nop
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
	...

08000970 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a04      	ldr	r2, [pc, #16]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d101      	bne.n	8000986 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000982:	f000 f9ab 	bl	8000cdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40001000 	.word	0x40001000

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(LED_1_ERROR_GPIO_Port, LED_1_ERROR_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2120      	movs	r1, #32
 80009a0:	4806      	ldr	r0, [pc, #24]	; (80009bc <Error_Handler+0x28>)
 80009a2:	f000 fc97 	bl	80012d4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80009a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009aa:	f000 f9b7 	bl	8000d1c <HAL_Delay>
	  HAL_GPIO_WritePin(LED_1_ERROR_GPIO_Port, LED_1_ERROR_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2120      	movs	r1, #32
 80009b2:	4802      	ldr	r0, [pc, #8]	; (80009bc <Error_Handler+0x28>)
 80009b4:	f000 fc8e 	bl	80012d4 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_1_ERROR_GPIO_Port, LED_1_ERROR_Pin, GPIO_PIN_SET);
 80009b8:	e7f0      	b.n	800099c <Error_Handler+0x8>
 80009ba:	bf00      	nop
 80009bc:	42020400 	.word	0x42020400

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <HAL_MspInit+0x30>)
 80009c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009cc:	4a08      	ldr	r2, [pc, #32]	; (80009f0 <HAL_MspInit+0x30>)
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_MspInit+0x30>)
 80009d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ee:	4770      	bx	lr
 80009f0:	46020c00 	.word	0x46020c00

080009f4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b0b4      	sub	sp, #208	; 0xd0
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009fc:	f107 0310 	add.w	r3, r7, #16
 8000a00:	22c0      	movs	r2, #192	; 0xc0
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f005 fd9d 	bl	8006544 <memset>
  if(hrtc->Instance==RTC)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a1d      	ldr	r2, [pc, #116]	; (8000a84 <HAL_RTC_MspInit+0x90>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d132      	bne.n	8000a7a <HAL_RTC_MspInit+0x86>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000a14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a18:	f04f 0300 	mov.w	r3, #0
 8000a1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000a20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f002 f8b9 	bl	8002ba4 <HAL_RCCEx_PeriphCLKConfig>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8000a38:	f7ff ffac 	bl	8000994 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <HAL_RTC_MspInit+0x94>)
 8000a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000a42:	4a11      	ldr	r2, [pc, #68]	; (8000a88 <HAL_RTC_MspInit+0x94>)
 8000a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000a4c:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_RTC_MspInit+0x94>)
 8000a4e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000a52:	4a0d      	ldr	r2, [pc, #52]	; (8000a88 <HAL_RTC_MspInit+0x94>)
 8000a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a58:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <HAL_RTC_MspInit+0x94>)
 8000a5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <HAL_RTC_MspInit+0x94>)
 8000a6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a70:	4a05      	ldr	r2, [pc, #20]	; (8000a88 <HAL_RTC_MspInit+0x94>)
 8000a72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a76:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a7a:	bf00      	nop
 8000a7c:	37d0      	adds	r7, #208	; 0xd0
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	46007800 	.word	0x46007800
 8000a88:	46020c00 	.word	0x46020c00

08000a8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	; 0x38
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a9c:	4b2e      	ldr	r3, [pc, #184]	; (8000b58 <HAL_InitTick+0xcc>)
 8000a9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000aa2:	4a2d      	ldr	r2, [pc, #180]	; (8000b58 <HAL_InitTick+0xcc>)
 8000aa4:	f043 0310 	orr.w	r3, r3, #16
 8000aa8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8000aac:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <HAL_InitTick+0xcc>)
 8000aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ab2:	f003 0310 	and.w	r3, r3, #16
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aba:	f107 0210 	add.w	r2, r7, #16
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 ffaf 	bl	8002a28 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aca:	f001 ff99 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8000ace:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad2:	4a22      	ldr	r2, [pc, #136]	; (8000b5c <HAL_InitTick+0xd0>)
 8000ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad8:	0c9b      	lsrs	r3, r3, #18
 8000ada:	3b01      	subs	r3, #1
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ade:	4b20      	ldr	r3, [pc, #128]	; (8000b60 <HAL_InitTick+0xd4>)
 8000ae0:	4a20      	ldr	r2, [pc, #128]	; (8000b64 <HAL_InitTick+0xd8>)
 8000ae2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <HAL_InitTick+0xd4>)
 8000ae6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000aec:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <HAL_InitTick+0xd4>)
 8000aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000af2:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <HAL_InitTick+0xd4>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_InitTick+0xd4>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000afe:	4818      	ldr	r0, [pc, #96]	; (8000b60 <HAL_InitTick+0xd4>)
 8000b00:	f003 f8e6 	bl	8003cd0 <HAL_TIM_Base_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8000b0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d118      	bne.n	8000b44 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b12:	4813      	ldr	r0, [pc, #76]	; (8000b60 <HAL_InitTick+0xd4>)
 8000b14:	f003 f93e 	bl	8003d94 <HAL_TIM_Base_Start_IT>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8000b1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d10e      	bne.n	8000b44 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d808      	bhi.n	8000b3e <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	2031      	movs	r0, #49	; 0x31
 8000b32:	f000 f9cf 	bl	8000ed4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b36:	4a0c      	ldr	r2, [pc, #48]	; (8000b68 <HAL_InitTick+0xdc>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e002      	b.n	8000b44 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000b44:	2031      	movs	r0, #49	; 0x31
 8000b46:	f000 f9df 	bl	8000f08 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8000b4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3738      	adds	r7, #56	; 0x38
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	46020c00 	.word	0x46020c00
 8000b5c:	431bde83 	.word	0x431bde83
 8000b60:	20000d5c 	.word	0x20000d5c
 8000b64:	40001000 	.word	0x40001000
 8000b68:	20000004 	.word	0x20000004

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	e7fe      	b.n	8000b70 <NMI_Handler+0x4>

08000b72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <HardFault_Handler+0x4>

08000b78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <MemManage_Handler+0x4>

08000b7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <BusFault_Handler+0x4>

08000b84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <UsageFault_Handler+0x4>

08000b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ba0:	f000 fbca 	bl	8001338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000bac:	4802      	ldr	r0, [pc, #8]	; (8000bb8 <TIM6_IRQHandler+0x10>)
 8000bae:	f003 f991 	bl	8003ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	20000d5c 	.word	0x20000d5c

08000bbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <SystemInit+0x68>)
 8000bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bc6:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <SystemInit+0x68>)
 8000bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <SystemInit+0x6c>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <SystemInit+0x6c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <SystemInit+0x6c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <SystemInit+0x6c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <SystemInit+0x6c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <SystemInit+0x6c>)
 8000bee:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000bf2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000bf6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <SystemInit+0x6c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <SystemInit+0x6c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a09      	ldr	r2, [pc, #36]	; (8000c28 <SystemInit+0x6c>)
 8000c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8000c0a:	4b07      	ldr	r3, [pc, #28]	; (8000c28 <SystemInit+0x6c>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SystemInit+0x68>)
 8000c12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c16:	609a      	str	r2, [r3, #8]
  #endif
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00
 8000c28:	46020c00 	.word	0x46020c00

08000c2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c30:	f7ff ffc4 	bl	8000bbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000c34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000c36:	e003      	b.n	8000c40 <LoopCopyDataInit>

08000c38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000c3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000c3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000c3e:	3104      	adds	r1, #4

08000c40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000c40:	480a      	ldr	r0, [pc, #40]	; (8000c6c <LoopForever+0xa>)
	ldr	r3, =_edata
 8000c42:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000c44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000c46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c48:	d3f6      	bcc.n	8000c38 <CopyDataInit>
	ldr	r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000c4c:	e002      	b.n	8000c54 <LoopFillZerobss>

08000c4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c50:	f842 3b04 	str.w	r3, [r2], #4

08000c54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <LoopForever+0x16>)
	cmp	r2, r3
 8000c56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c58:	d3f9      	bcc.n	8000c4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f005 fc7b 	bl	8006554 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c5e:	f7ff fd19 	bl	8000694 <main>

08000c62 <LoopForever>:

LoopForever:
    b LoopForever
 8000c62:	e7fe      	b.n	8000c62 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000c64:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8000c68:	080066e0 	.word	0x080066e0
	ldr	r0, =_sdata
 8000c6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c70:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000c74:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000c78:	200013f0 	.word	0x200013f0

08000c7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC1_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c84:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <HAL_Init+0x4c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a10      	ldr	r2, [pc, #64]	; (8000ccc <HAL_Init+0x4c>)
 8000c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c90:	2003      	movs	r0, #3
 8000c92:	f000 f914 	bl	8000ebe <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8000c96:	f001 fd97 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8000c9a:	4602      	mov	r2, r0
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <HAL_Init+0x50>)
 8000c9e:	6a1b      	ldr	r3, [r3, #32]
 8000ca0:	f003 030f 	and.w	r3, r3, #15
 8000ca4:	490b      	ldr	r1, [pc, #44]	; (8000cd4 <HAL_Init+0x54>)
 8000ca6:	5ccb      	ldrb	r3, [r1, r3]
 8000ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8000cac:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <HAL_Init+0x58>)
 8000cae:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f7ff feeb 	bl	8000a8c <HAL_InitTick>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e002      	b.n	8000cc6 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fe7e 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40022000 	.word	0x40022000
 8000cd0:	46020c00 	.word	0x46020c00
 8000cd4:	08006600 	.word	0x08006600
 8000cd8:	20000000 	.word	0x20000000

08000cdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	; (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	20000da8 	.word	0x20000da8

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	; (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000da8 	.word	0x20000da8

08000d1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d24:	f7ff ffee 	bl	8000d04 <HAL_GetTick>
 8000d28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d34:	d005      	beq.n	8000d42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d36:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Delay+0x44>)
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4413      	add	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d42:	bf00      	nop
 8000d44:	f7ff ffde 	bl	8000d04 <HAL_GetTick>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d8f7      	bhi.n	8000d44 <HAL_Delay+0x28>
  {
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff4c 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee2:	f7ff ff63 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000ee6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	68b9      	ldr	r1, [r7, #8]
 8000eec:	6978      	ldr	r0, [r7, #20]
 8000eee:	f7ff ffb3 	bl	8000e58 <NVIC_EncodePriority>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef8:	4611      	mov	r1, r2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff ff82 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f00:	bf00      	nop
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff ff56 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f36:	e1ba      	b.n	80012ae <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f000 81aa 	beq.w	80012a8 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4a55      	ldr	r2, [pc, #340]	; (80010ac <HAL_GPIO_Init+0x188>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d15d      	bne.n	8001018 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8000f62:	2201      	movs	r2, #1
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f003 0201 	and.w	r2, r3, #1
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69fa      	ldr	r2, [r7, #28]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69fa      	ldr	r2, [r7, #28]
 8000f8a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8000f8c:	4a48      	ldr	r2, [pc, #288]	; (80010b0 <HAL_GPIO_Init+0x18c>)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000f94:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8000f96:	4a46      	ldr	r2, [pc, #280]	; (80010b0 <HAL_GPIO_Init+0x18c>)
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	08da      	lsrs	r2, r3, #3
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	3208      	adds	r2, #8
 8000faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fae:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8000fc6:	69bb      	ldr	r3, [r7, #24]
 8000fc8:	f003 0307 	and.w	r3, r3, #7
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	220b      	movs	r2, #11
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	69fa      	ldr	r2, [r7, #28]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	08da      	lsrs	r2, r3, #3
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	3208      	adds	r2, #8
 8000fe2:	69f9      	ldr	r1, [r7, #28]
 8000fe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	69fa      	ldr	r2, [r7, #28]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2202      	movs	r2, #2
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	69fa      	ldr	r2, [r7, #28]
 800100c:	4313      	orrs	r3, r2
 800100e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	69fa      	ldr	r2, [r7, #28]
 8001014:	601a      	str	r2, [r3, #0]
 8001016:	e067      	b.n	80010e8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b02      	cmp	r3, #2
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x104>
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b12      	cmp	r3, #18
 8001026:	d145      	bne.n	80010b4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	08da      	lsrs	r2, r3, #3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3208      	adds	r2, #8
 8001030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001034:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f003 0307 	and.w	r3, r3, #7
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	4013      	ands	r3, r2
 800104a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	f003 020f 	and.w	r2, r3, #15
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	4313      	orrs	r3, r2
 8001064:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	69f9      	ldr	r1, [r7, #28]
 8001070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	69fa      	ldr	r2, [r7, #28]
 8001088:	4013      	ands	r3, r2
 800108a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0203 	and.w	r2, r3, #3
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69fa      	ldr	r2, [r7, #28]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	69fa      	ldr	r2, [r7, #28]
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e01e      	b.n	80010e8 <HAL_GPIO_Init+0x1c4>
 80010aa:	bf00      	nop
 80010ac:	46020000 	.word	0x46020000
 80010b0:	08006658 	.word	0x08006658
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	2203      	movs	r2, #3
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	43db      	mvns	r3, r3
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	4013      	ands	r3, r2
 80010ca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0203 	and.w	r2, r3, #3
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	69fa      	ldr	r2, [r7, #28]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	69fa      	ldr	r2, [r7, #28]
 80010e6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d00b      	beq.n	8001108 <HAL_GPIO_Init+0x1e4>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d007      	beq.n	8001108 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010fc:	2b11      	cmp	r3, #17
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b12      	cmp	r3, #18
 8001106:	d130      	bne.n	800116a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	2203      	movs	r2, #3
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69fa      	ldr	r2, [r7, #28]
 800111c:	4013      	ands	r3, r2
 800111e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	68da      	ldr	r2, [r3, #12]
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	69fa      	ldr	r2, [r7, #28]
 800112e:	4313      	orrs	r3, r2
 8001130:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	69fa      	ldr	r2, [r7, #28]
 8001136:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800113e:	2201      	movs	r2, #1
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69fa      	ldr	r2, [r7, #28]
 800114a:	4013      	ands	r3, r2
 800114c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	f003 0201 	and.w	r2, r3, #1
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	4313      	orrs	r3, r2
 8001162:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	69fa      	ldr	r2, [r7, #28]
 8001168:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b03      	cmp	r3, #3
 8001170:	d017      	beq.n	80011a2 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	4013      	ands	r3, r2
 8001188:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	4313      	orrs	r3, r2
 800119a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	69fa      	ldr	r2, [r7, #28]
 80011a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d07c      	beq.n	80012a8 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80011ae:	4a47      	ldr	r2, [pc, #284]	; (80012cc <HAL_GPIO_Init+0x3a8>)
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3318      	adds	r3, #24
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	0a9a      	lsrs	r2, r3, #10
 80011d6:	4b3e      	ldr	r3, [pc, #248]	; (80012d0 <HAL_GPIO_Init+0x3ac>)
 80011d8:	4013      	ands	r3, r2
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	f002 0203 	and.w	r2, r2, #3
 80011e0:	00d2      	lsls	r2, r2, #3
 80011e2:	4093      	lsls	r3, r2
 80011e4:	69fa      	ldr	r2, [r7, #28]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80011ea:	4938      	ldr	r1, [pc, #224]	; (80012cc <HAL_GPIO_Init+0x3a8>)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	089b      	lsrs	r3, r3, #2
 80011f0:	3318      	adds	r3, #24
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80011f8:	4b34      	ldr	r3, [pc, #208]	; (80012cc <HAL_GPIO_Init+0x3a8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	43db      	mvns	r3, r3
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	4013      	ands	r3, r2
 8001206:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001210:	2b00      	cmp	r3, #0
 8001212:	d003      	beq.n	800121c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8001214:	69fa      	ldr	r2, [r7, #28]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4313      	orrs	r3, r2
 800121a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800121c:	4a2b      	ldr	r2, [pc, #172]	; (80012cc <HAL_GPIO_Init+0x3a8>)
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8001222:	4b2a      	ldr	r3, [pc, #168]	; (80012cc <HAL_GPIO_Init+0x3a8>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	43db      	mvns	r3, r3
 800122c:	69fa      	ldr	r2, [r7, #28]
 800122e:	4013      	ands	r3, r2
 8001230:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d003      	beq.n	8001246 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800123e:	69fa      	ldr	r2, [r7, #28]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8001246:	4a21      	ldr	r2, [pc, #132]	; (80012cc <HAL_GPIO_Init+0x3a8>)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800124c:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_GPIO_Init+0x3a8>)
 800124e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001252:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	4013      	ands	r3, r2
 800125c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800126a:	69fa      	ldr	r2, [r7, #28]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8001272:	4a16      	ldr	r2, [pc, #88]	; (80012cc <HAL_GPIO_Init+0x3a8>)
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800127a:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_GPIO_Init+0x3a8>)
 800127c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001280:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	43db      	mvns	r3, r3
 8001286:	69fa      	ldr	r2, [r7, #28]
 8001288:	4013      	ands	r3, r2
 800128a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001294:	2b00      	cmp	r3, #0
 8001296:	d003      	beq.n	80012a0 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8001298:	69fa      	ldr	r2, [r7, #28]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4313      	orrs	r3, r2
 800129e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80012a0:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_GPIO_Init+0x3a8>)
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	3301      	adds	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f47f ae3d 	bne.w	8000f38 <HAL_GPIO_Init+0x14>
  }
}
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
 80012c2:	3724      	adds	r7, #36	; 0x24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	46022000 	.word	0x46022000
 80012d0:	002f7f7f 	.word	0x002f7f7f

080012d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	807b      	strh	r3, [r7, #2]
 80012e0:	4613      	mov	r3, r2
 80012e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012e4:	787b      	ldrb	r3, [r7, #1]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80012f0:	e002      	b.n	80012f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80012f2:	887a      	ldrh	r2, [r7, #2]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001316:	887a      	ldrh	r2, [r7, #2]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4013      	ands	r3, r2
 800131c:	041a      	lsls	r2, r3, #16
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	43d9      	mvns	r1, r3
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	400b      	ands	r3, r1
 8001326:	431a      	orrs	r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001342:	4b0f      	ldr	r3, [pc, #60]	; (8001380 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001344:	68da      	ldr	r2, [r3, #12]
 8001346:	88fb      	ldrh	r3, [r7, #6]
 8001348:	4013      	ands	r3, r2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800134e:	4a0c      	ldr	r2, [pc, #48]	; (8001380 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001354:	88fb      	ldrh	r3, [r7, #6]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f97a 	bl	8000650 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	88fb      	ldrh	r3, [r7, #6]
 8001362:	4013      	ands	r3, r2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d006      	beq.n	8001376 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001368:	4a05      	ldr	r2, [pc, #20]	; (8001380 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f807 	bl	8001384 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	46022000 	.word	0x46022000

08001384 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80013a8:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d002      	beq.n	80013ba <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
 80013b8:	e007      	b.n	80013ca <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80013ba:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 0204 	bic.w	r2, r3, #4
 80013c2:	4905      	ldr	r1, [pc, #20]	; (80013d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	40030400 	.word	0x40030400

080013dc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_ICACHE_Enable+0x1c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_ICACHE_Enable+0x1c>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40030400 	.word	0x40030400

080013fc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800140c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	429a      	cmp	r2, r3
 8001414:	d10b      	bne.n	800142e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141c:	d905      	bls.n	800142a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800141e:	4b33      	ldr	r3, [pc, #204]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	4a32      	ldr	r2, [pc, #200]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001428:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e057      	b.n	80014de <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d90a      	bls.n	800144c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8001436:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4313      	orrs	r3, r2
 8001442:	4a2a      	ldr	r2, [pc, #168]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001448:	60d3      	str	r3, [r2, #12]
 800144a:	e007      	b.n	800145c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001454:	4925      	ldr	r1, [pc, #148]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4313      	orrs	r3, r2
 800145a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800145c:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a24      	ldr	r2, [pc, #144]	; (80014f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001462:	fba2 2303 	umull	r2, r3, r2, r3
 8001466:	099b      	lsrs	r3, r3, #6
 8001468:	2232      	movs	r2, #50	; 0x32
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8001470:	fba2 2303 	umull	r2, r3, r2, r3
 8001474:	099b      	lsrs	r3, r3, #6
 8001476:	3301      	adds	r3, #1
 8001478:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800147a:	e002      	b.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	3b01      	subs	r3, #1
 8001480:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8001482:	4b1a      	ldr	r3, [pc, #104]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x98>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d1f3      	bne.n	800147c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d01b      	beq.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a15      	ldr	r2, [pc, #84]	; (80014f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80014a0:	fba2 2303 	umull	r2, r3, r2, r3
 80014a4:	099b      	lsrs	r3, r3, #6
 80014a6:	2232      	movs	r2, #50	; 0x32
 80014a8:	fb02 f303 	mul.w	r3, r2, r3
 80014ac:	4a11      	ldr	r2, [pc, #68]	; (80014f4 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	099b      	lsrs	r3, r3, #6
 80014b4:	3301      	adds	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80014b8:	e002      	b.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3b01      	subs	r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80014c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d102      	bne.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f3      	bne.n	80014ba <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e000      	b.n	80014de <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	46020800 	.word	0x46020800
 80014f0:	20000000 	.word	0x20000000
 80014f4:	10624dd3 	.word	0x10624dd3

080014f8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <HAL_PWREx_GetVoltageRange+0x18>)
 80014fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	46020800 	.word	0x46020800

08001514 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <HAL_PWREx_ConfigSupply+0x94>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a22      	ldr	r2, [pc, #136]	; (80015ac <HAL_PWREx_ConfigSupply+0x98>)
 8001522:	fba2 2303 	umull	r2, r3, r2, r3
 8001526:	099b      	lsrs	r3, r3, #6
 8001528:	2232      	movs	r2, #50	; 0x32
 800152a:	fb02 f303 	mul.w	r3, r2, r3
 800152e:	4a1f      	ldr	r2, [pc, #124]	; (80015ac <HAL_PWREx_ConfigSupply+0x98>)
 8001530:	fba2 2303 	umull	r2, r3, r2, r3
 8001534:	099b      	lsrs	r3, r3, #6
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d113      	bne.n	8001568 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <HAL_PWREx_ConfigSupply+0x9c>)
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	4a1a      	ldr	r2, [pc, #104]	; (80015b0 <HAL_PWREx_ConfigSupply+0x9c>)
 8001546:	f023 0302 	bic.w	r3, r3, #2
 800154a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800154c:	e002      	b.n	8001554 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	3b01      	subs	r3, #1
 8001552:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001554:	4b16      	ldr	r3, [pc, #88]	; (80015b0 <HAL_PWREx_ConfigSupply+0x9c>)
 8001556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	2b02      	cmp	r3, #2
 800155e:	d116      	bne.n	800158e <HAL_PWREx_ConfigSupply+0x7a>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f3      	bne.n	800154e <HAL_PWREx_ConfigSupply+0x3a>
 8001566:	e012      	b.n	800158e <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_PWREx_ConfigSupply+0x9c>)
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	4a10      	ldr	r2, [pc, #64]	; (80015b0 <HAL_PWREx_ConfigSupply+0x9c>)
 800156e:	f043 0302 	orr.w	r3, r3, #2
 8001572:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8001574:	e002      	b.n	800157c <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	3b01      	subs	r3, #1
 800157a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_PWREx_ConfigSupply+0x9c>)
 800157e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d102      	bne.n	800158e <HAL_PWREx_ConfigSupply+0x7a>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1f3      	bne.n	8001576 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e000      	b.n	800159a <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000000 	.word	0x20000000
 80015ac:	10624dd3 	.word	0x10624dd3
 80015b0:	46020800 	.word	0x46020800

080015b4 <HAL_PWREx_EnterSTOP2Mode>:
  *                     @arg @ref PWR_STOPENTRY_WFE enter Stop mode with Wait
  *                               For Event request.
  * @retval None.
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Stop 2 mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_1);
 80015be:	4b11      	ldr	r3, [pc, #68]	; (8001604 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f023 0307 	bic.w	r3, r3, #7
 80015c6:	4a0f      	ldr	r2, [pc, #60]	; (8001604 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80015c8:	f043 0302 	orr.w	r3, r3, #2
 80015cc:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	4a0d      	ldr	r2, [pc, #52]	; (8001608 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80015e0:	bf30      	wfi
 80015e2:	e002      	b.n	80015ea <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80015e4:	bf40      	sev
    __WFE();
 80015e6:	bf20      	wfe
    __WFE();
 80015e8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	6113      	str	r3, [r2, #16]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	46020800 	.word	0x46020800
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001614:	4a04      	ldr	r2, [pc, #16]	; (8001628 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	46020800 	.word	0x46020800

0800162c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08e      	sub	sp, #56	; 0x38
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8001634:	2300      	movs	r3, #0
 8001636:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	f000 bec8 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001646:	4b99      	ldr	r3, [pc, #612]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001650:	4b96      	ldr	r3, [pc, #600]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0310 	and.w	r3, r3, #16
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 816c 	beq.w	8001940 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <HAL_RCC_OscConfig+0x52>
 800166e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001670:	2b0c      	cmp	r3, #12
 8001672:	f040 80de 	bne.w	8001832 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001678:	2b01      	cmp	r3, #1
 800167a:	f040 80da 	bne.w	8001832 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	f000 bea5 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001690:	4b86      	ldr	r3, [pc, #536]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_RCC_OscConfig+0x7a>
 800169c:	4b83      	ldr	r3, [pc, #524]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80016a4:	e005      	b.n	80016b2 <HAL_RCC_OscConfig+0x86>
 80016a6:	4b81      	ldr	r3, [pc, #516]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016ac:	041b      	lsls	r3, r3, #16
 80016ae:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d255      	bcs.n	8001762 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80016b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10a      	bne.n	80016d2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 f9e9 	bl	8002a98 <RCC_SetFlashLatencyFromMSIRange>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	f000 be82 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80016d2:	4b76      	ldr	r3, [pc, #472]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	4a75      	ldr	r2, [pc, #468]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80016dc:	6093      	str	r3, [r2, #8]
 80016de:	4b73      	ldr	r3, [pc, #460]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	4970      	ldr	r1, [pc, #448]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80016f8:	d309      	bcc.n	800170e <HAL_RCC_OscConfig+0xe2>
 80016fa:	4b6c      	ldr	r3, [pc, #432]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f023 021f 	bic.w	r2, r3, #31
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a1b      	ldr	r3, [r3, #32]
 8001706:	4969      	ldr	r1, [pc, #420]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001708:	4313      	orrs	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
 800170c:	e07e      	b.n	800180c <HAL_RCC_OscConfig+0x1e0>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	2b00      	cmp	r3, #0
 8001714:	da0a      	bge.n	800172c <HAL_RCC_OscConfig+0x100>
 8001716:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	015b      	lsls	r3, r3, #5
 8001724:	4961      	ldr	r1, [pc, #388]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001726:	4313      	orrs	r3, r2
 8001728:	60cb      	str	r3, [r1, #12]
 800172a:	e06f      	b.n	800180c <HAL_RCC_OscConfig+0x1e0>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001734:	d30a      	bcc.n	800174c <HAL_RCC_OscConfig+0x120>
 8001736:	4b5d      	ldr	r3, [pc, #372]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	029b      	lsls	r3, r3, #10
 8001744:	4959      	ldr	r1, [pc, #356]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001746:	4313      	orrs	r3, r2
 8001748:	60cb      	str	r3, [r1, #12]
 800174a:	e05f      	b.n	800180c <HAL_RCC_OscConfig+0x1e0>
 800174c:	4b57      	ldr	r3, [pc, #348]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	03db      	lsls	r3, r3, #15
 800175a:	4954      	ldr	r1, [pc, #336]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800175c:	4313      	orrs	r3, r2
 800175e:	60cb      	str	r3, [r1, #12]
 8001760:	e054      	b.n	800180c <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8001762:	4b52      	ldr	r3, [pc, #328]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	4a51      	ldr	r2, [pc, #324]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001768:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800176c:	6093      	str	r3, [r2, #8]
 800176e:	4b4f      	ldr	r3, [pc, #316]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	494c      	ldr	r1, [pc, #304]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800177c:	4313      	orrs	r3, r2
 800177e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001788:	d309      	bcc.n	800179e <HAL_RCC_OscConfig+0x172>
 800178a:	4b48      	ldr	r3, [pc, #288]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	f023 021f 	bic.w	r2, r3, #31
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4945      	ldr	r1, [pc, #276]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001798:	4313      	orrs	r3, r2
 800179a:	60cb      	str	r3, [r1, #12]
 800179c:	e028      	b.n	80017f0 <HAL_RCC_OscConfig+0x1c4>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	da0a      	bge.n	80017bc <HAL_RCC_OscConfig+0x190>
 80017a6:	4b41      	ldr	r3, [pc, #260]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a1b      	ldr	r3, [r3, #32]
 80017b2:	015b      	lsls	r3, r3, #5
 80017b4:	493d      	ldr	r1, [pc, #244]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60cb      	str	r3, [r1, #12]
 80017ba:	e019      	b.n	80017f0 <HAL_RCC_OscConfig+0x1c4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c4:	d30a      	bcc.n	80017dc <HAL_RCC_OscConfig+0x1b0>
 80017c6:	4b39      	ldr	r3, [pc, #228]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	029b      	lsls	r3, r3, #10
 80017d4:	4935      	ldr	r1, [pc, #212]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	60cb      	str	r3, [r1, #12]
 80017da:	e009      	b.n	80017f0 <HAL_RCC_OscConfig+0x1c4>
 80017dc:	4b33      	ldr	r3, [pc, #204]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	03db      	lsls	r3, r3, #15
 80017ea:	4930      	ldr	r1, [pc, #192]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80017f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d10a      	bne.n	800180c <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fa:	4618      	mov	r0, r3
 80017fc:	f001 f94c 	bl	8002a98 <RCC_SetFlashLatencyFromMSIRange>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	f000 bde5 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 800180c:	f001 f8de 	bl	80029cc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001810:	4b27      	ldr	r3, [pc, #156]	; (80018b0 <HAL_RCC_OscConfig+0x284>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff f939 	bl	8000a8c <HAL_InitTick>
 800181a:	4603      	mov	r3, r0
 800181c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8001820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 808a 	beq.w	800193e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800182a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800182e:	f000 bdd2 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d066      	beq.n	8001908 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a1b      	ldr	r2, [pc, #108]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001846:	f7ff fa5d 	bl	8000d04 <HAL_GetTick>
 800184a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800184c:	e009      	b.n	8001862 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800184e:	f7ff fa59 	bl	8000d04 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d902      	bls.n	8001862 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	f000 bdba 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0ef      	beq.n	800184e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001874:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001878:	6093      	str	r3, [r2, #8]
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	4909      	ldr	r1, [pc, #36]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001888:	4313      	orrs	r3, r2
 800188a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001894:	d30e      	bcc.n	80018b4 <HAL_RCC_OscConfig+0x288>
 8001896:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f023 021f 	bic.w	r2, r3, #31
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a1b      	ldr	r3, [r3, #32]
 80018a2:	4902      	ldr	r1, [pc, #8]	; (80018ac <HAL_RCC_OscConfig+0x280>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	60cb      	str	r3, [r1, #12]
 80018a8:	e04a      	b.n	8001940 <HAL_RCC_OscConfig+0x314>
 80018aa:	bf00      	nop
 80018ac:	46020c00 	.word	0x46020c00
 80018b0:	20000004 	.word	0x20000004
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	da0a      	bge.n	80018d2 <HAL_RCC_OscConfig+0x2a6>
 80018bc:	4b98      	ldr	r3, [pc, #608]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	015b      	lsls	r3, r3, #5
 80018ca:	4995      	ldr	r1, [pc, #596]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80018cc:	4313      	orrs	r3, r2
 80018ce:	60cb      	str	r3, [r1, #12]
 80018d0:	e036      	b.n	8001940 <HAL_RCC_OscConfig+0x314>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018da:	d30a      	bcc.n	80018f2 <HAL_RCC_OscConfig+0x2c6>
 80018dc:	4b90      	ldr	r3, [pc, #576]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	029b      	lsls	r3, r3, #10
 80018ea:	498d      	ldr	r1, [pc, #564]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60cb      	str	r3, [r1, #12]
 80018f0:	e026      	b.n	8001940 <HAL_RCC_OscConfig+0x314>
 80018f2:	4b8b      	ldr	r3, [pc, #556]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	03db      	lsls	r3, r3, #15
 8001900:	4987      	ldr	r1, [pc, #540]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001902:	4313      	orrs	r3, r2
 8001904:	60cb      	str	r3, [r1, #12]
 8001906:	e01b      	b.n	8001940 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8001908:	4b85      	ldr	r3, [pc, #532]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a84      	ldr	r2, [pc, #528]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001914:	f7ff f9f6 	bl	8000d04 <HAL_GetTick>
 8001918:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800191a:	e009      	b.n	8001930 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800191c:	f7ff f9f2 	bl	8000d04 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d902      	bls.n	8001930 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	f000 bd53 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8001930:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1ef      	bne.n	800191c <HAL_RCC_OscConfig+0x2f0>
 800193c:	e000      	b.n	8001940 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800193e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 808b 	beq.w	8001a64 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800194e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001950:	2b08      	cmp	r3, #8
 8001952:	d005      	beq.n	8001960 <HAL_RCC_OscConfig+0x334>
 8001954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d109      	bne.n	800196e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800195a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195c:	2b03      	cmp	r3, #3
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d17d      	bne.n	8001a64 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	f000 bd34 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x35a>
 8001978:	4b69      	ldr	r3, [pc, #420]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a68      	ldr	r2, [pc, #416]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 800197e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e041      	b.n	8001a0a <HAL_RCC_OscConfig+0x3de>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800198e:	d112      	bne.n	80019b6 <HAL_RCC_OscConfig+0x38a>
 8001990:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a62      	ldr	r2, [pc, #392]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001996:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b60      	ldr	r3, [pc, #384]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a5f      	ldr	r2, [pc, #380]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019a2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80019a6:	6013      	str	r3, [r2, #0]
 80019a8:	4b5d      	ldr	r3, [pc, #372]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a5c      	ldr	r2, [pc, #368]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	e029      	b.n	8001a0a <HAL_RCC_OscConfig+0x3de>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80019be:	d112      	bne.n	80019e6 <HAL_RCC_OscConfig+0x3ba>
 80019c0:	4b57      	ldr	r3, [pc, #348]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a56      	ldr	r2, [pc, #344]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b54      	ldr	r3, [pc, #336]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a53      	ldr	r2, [pc, #332]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b51      	ldr	r3, [pc, #324]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a50      	ldr	r2, [pc, #320]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	e011      	b.n	8001a0a <HAL_RCC_OscConfig+0x3de>
 80019e6:	4b4e      	ldr	r3, [pc, #312]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a4d      	ldr	r2, [pc, #308]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b4b      	ldr	r3, [pc, #300]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a4a      	ldr	r2, [pc, #296]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b48      	ldr	r3, [pc, #288]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a47      	ldr	r2, [pc, #284]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001a04:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001a08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d014      	beq.n	8001a3c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8001a12:	f7ff f977 	bl	8000d04 <HAL_GetTick>
 8001a16:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a18:	e009      	b.n	8001a2e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1a:	f7ff f973 	bl	8000d04 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b64      	cmp	r3, #100	; 0x64
 8001a26:	d902      	bls.n	8001a2e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	f000 bcd4 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a2e:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0ef      	beq.n	8001a1a <HAL_RCC_OscConfig+0x3ee>
 8001a3a:	e013      	b.n	8001a64 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f962 	bl	8000d04 <HAL_GetTick>
 8001a40:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a42:	e009      	b.n	8001a58 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff f95e 	bl	8000d04 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d902      	bls.n	8001a58 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	f000 bcbf 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a58:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ef      	bne.n	8001a44 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0302 	and.w	r3, r3, #2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d05f      	beq.n	8001b30 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d005      	beq.n	8001a82 <HAL_RCC_OscConfig+0x456>
 8001a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a78:	2b0c      	cmp	r3, #12
 8001a7a:	d114      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d111      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	f000 bca3 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001a90:	4b23      	ldr	r3, [pc, #140]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	041b      	lsls	r3, r3, #16
 8001a9e:	4920      	ldr	r1, [pc, #128]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001aa4:	e044      	b.n	8001b30 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d024      	beq.n	8001af8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1b      	ldr	r2, [pc, #108]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001aba:	f7ff f923 	bl	8000d04 <HAL_GetTick>
 8001abe:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac0:	e009      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff f91f 	bl	8000d04 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d902      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	f000 bc80 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad6:	4b12      	ldr	r3, [pc, #72]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0ef      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	041b      	lsls	r3, r3, #16
 8001af0:	490b      	ldr	r1, [pc, #44]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	610b      	str	r3, [r1, #16]
 8001af6:	e01b      	b.n	8001b30 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8001af8:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b02:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8001b04:	f7ff f8fe 	bl	8000d04 <HAL_GetTick>
 8001b08:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b0a:	e00b      	b.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff f8fa 	bl	8000d04 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d904      	bls.n	8001b24 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	f000 bc5b 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
 8001b20:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b24:	4baf      	ldr	r3, [pc, #700]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1ed      	bne.n	8001b0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 80c8 	beq.w	8001cce <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b44:	4ba7      	ldr	r3, [pc, #668]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b4a:	f003 0304 	and.w	r3, r3, #4
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d111      	bne.n	8001b76 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	4ba4      	ldr	r3, [pc, #656]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b58:	4aa2      	ldr	r2, [pc, #648]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001b5a:	f043 0304 	orr.w	r3, r3, #4
 8001b5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001b62:	4ba0      	ldr	r3, [pc, #640]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b68:	f003 0304 	and.w	r3, r3, #4
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b76:	4b9c      	ldr	r3, [pc, #624]	; (8001de8 <HAL_RCC_OscConfig+0x7bc>)
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d119      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001b82:	4b99      	ldr	r3, [pc, #612]	; (8001de8 <HAL_RCC_OscConfig+0x7bc>)
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	4a98      	ldr	r2, [pc, #608]	; (8001de8 <HAL_RCC_OscConfig+0x7bc>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff f8b9 	bl	8000d04 <HAL_GetTick>
 8001b92:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001b94:	e009      	b.n	8001baa <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b96:	f7ff f8b5 	bl	8000d04 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d902      	bls.n	8001baa <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	f000 bc16 	b.w	80023d6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001baa:	4b8f      	ldr	r3, [pc, #572]	; (8001de8 <HAL_RCC_OscConfig+0x7bc>)
 8001bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0ef      	beq.n	8001b96 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	695b      	ldr	r3, [r3, #20]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d05f      	beq.n	8001c7e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8001bbe:	4b89      	ldr	r3, [pc, #548]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bc4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	6a3b      	ldr	r3, [r7, #32]
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d037      	beq.n	8001c44 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d006      	beq.n	8001bec <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8001bde:	6a3b      	ldr	r3, [r7, #32]
 8001be0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e3f4      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d01b      	beq.n	8001c2e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8001bf6:	4b7b      	ldr	r3, [pc, #492]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001bf8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001bfc:	4a79      	ldr	r2, [pc, #484]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001bfe:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001c02:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8001c06:	f7ff f87d 	bl	8000d04 <HAL_GetTick>
 8001c0a:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c0e:	f7ff f879 	bl	8000d04 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e3da      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c20:	4b70      	ldr	r3, [pc, #448]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001c22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1ef      	bne.n	8001c0e <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8001c2e:	4b6d      	ldr	r3, [pc, #436]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c34:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	4969      	ldr	r1, [pc, #420]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8001c44:	4b67      	ldr	r3, [pc, #412]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001c46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c4a:	4a66      	ldr	r2, [pc, #408]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001c4c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c50:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001c54:	f7ff f856 	bl	8000d04 <HAL_GetTick>
 8001c58:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5c:	f7ff f852 	bl	8000d04 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b05      	cmp	r3, #5
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e3b3      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8001c6e:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001c70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ef      	beq.n	8001c5c <HAL_RCC_OscConfig+0x630>
 8001c7c:	e01b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8001c7e:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001c80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001c84:	4a57      	ldr	r2, [pc, #348]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001c86:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001c8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8001c8e:	f7ff f839 	bl	8000d04 <HAL_GetTick>
 8001c92:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff f835 	bl	8000d04 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b05      	cmp	r3, #5
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e396      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1ef      	bne.n	8001c96 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001cb6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d107      	bne.n	8001cce <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cbe:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc4:	4a47      	ldr	r2, [pc, #284]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001cc6:	f023 0304 	bic.w	r3, r3, #4
 8001cca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8111 	beq.w	8001efe <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ce2:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d111      	bne.n	8001d14 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cf0:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf6:	4a3b      	ldr	r2, [pc, #236]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001cf8:	f043 0304 	orr.w	r3, r3, #4
 8001cfc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001d00:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	613b      	str	r3, [r7, #16]
 8001d0c:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d14:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <HAL_RCC_OscConfig+0x7bc>)
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d118      	bne.n	8001d52 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <HAL_RCC_OscConfig+0x7bc>)
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	4a30      	ldr	r2, [pc, #192]	; (8001de8 <HAL_RCC_OscConfig+0x7bc>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2c:	f7fe ffea 	bl	8000d04 <HAL_GetTick>
 8001d30:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d34:	f7fe ffe6 	bl	8000d04 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e347      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8001d46:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <HAL_RCC_OscConfig+0x7bc>)
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0f0      	beq.n	8001d34 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d01f      	beq.n	8001d9e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	f003 0304 	and.w	r3, r3, #4
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d010      	beq.n	8001d8c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d70:	4a1c      	ldr	r2, [pc, #112]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d7a:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001d7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d80:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d8a:	e018      	b.n	8001dbe <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001d8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001d92:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001d9c:	e00f      	b.n	8001dbe <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001da4:	4a0f      	ldr	r2, [pc, #60]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001da6:	f023 0301 	bic.w	r3, r3, #1
 8001daa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001dae:	4b0d      	ldr	r3, [pc, #52]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001db0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001db4:	4a0b      	ldr	r2, [pc, #44]	; (8001de4 <HAL_RCC_OscConfig+0x7b8>)
 8001db6:	f023 0304 	bic.w	r3, r3, #4
 8001dba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d057      	beq.n	8001e76 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8001dc6:	f7fe ff9d 	bl	8000d04 <HAL_GetTick>
 8001dca:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dcc:	e00e      	b.n	8001dec <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dce:	f7fe ff99 	bl	8000d04 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d905      	bls.n	8001dec <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e2f8      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
 8001de4:	46020c00 	.word	0x46020c00
 8001de8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dec:	4b9c      	ldr	r3, [pc, #624]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001dee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0e9      	beq.n	8001dce <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d01b      	beq.n	8001e3e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e06:	4b96      	ldr	r3, [pc, #600]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e0c:	4a94      	ldr	r2, [pc, #592]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e16:	e00a      	b.n	8001e2e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e18:	f7fe ff74 	bl	8000d04 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e2d3      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001e2e:	4b8c      	ldr	r3, [pc, #560]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001e30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0ed      	beq.n	8001e18 <HAL_RCC_OscConfig+0x7ec>
 8001e3c:	e053      	b.n	8001ee6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001e3e:	4b88      	ldr	r3, [pc, #544]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001e40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e44:	4a86      	ldr	r2, [pc, #536]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001e46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e4a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e4e:	e00a      	b.n	8001e66 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e50:	f7fe ff58 	bl	8000d04 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e2b7      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001e66:	4b7e      	ldr	r3, [pc, #504]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001e68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1ed      	bne.n	8001e50 <HAL_RCC_OscConfig+0x824>
 8001e74:	e037      	b.n	8001ee6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8001e76:	f7fe ff45 	bl	8000d04 <HAL_GetTick>
 8001e7a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e7c:	e00a      	b.n	8001e94 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7fe ff41 	bl	8000d04 <HAL_GetTick>
 8001e82:	4602      	mov	r2, r0
 8001e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e2a0      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e94:	4b72      	ldr	r3, [pc, #456]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001e96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1ed      	bne.n	8001e7e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001ea2:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01a      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001eb0:	4b6b      	ldr	r3, [pc, #428]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001eb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001eb6:	4a6a      	ldr	r2, [pc, #424]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ebc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ec0:	e00a      	b.n	8001ed8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ec2:	f7fe ff1f 	bl	8000d04 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e27e      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001ed8:	4b61      	ldr	r3, [pc, #388]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001eda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ede:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1ed      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ee6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eee:	4b5c      	ldr	r3, [pc, #368]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef4:	4a5a      	ldr	r2, [pc, #360]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001ef6:	f023 0304 	bic.w	r3, r3, #4
 8001efa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d036      	beq.n	8001f78 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d019      	beq.n	8001f46 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8001f12:	4b53      	ldr	r3, [pc, #332]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f1c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f1e:	f7fe fef1 	bl	8000d04 <HAL_GetTick>
 8001f22:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f26:	f7fe feed 	bl	8000d04 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e24e      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001f38:	4b49      	ldr	r3, [pc, #292]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x8fa>
 8001f44:	e018      	b.n	8001f78 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8001f46:	4b46      	ldr	r3, [pc, #280]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a45      	ldr	r2, [pc, #276]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001f4c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f50:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f52:	f7fe fed7 	bl	8000d04 <HAL_GetTick>
 8001f56:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f5a:	f7fe fed3 	bl	8000d04 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e234      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001f6c:	4b3c      	ldr	r3, [pc, #240]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f0      	bne.n	8001f5a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d036      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d019      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8001f8c:	4b34      	ldr	r3, [pc, #208]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a33      	ldr	r2, [pc, #204]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001f92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f96:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001f98:	f7fe feb4 	bl	8000d04 <HAL_GetTick>
 8001f9c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001fa0:	f7fe feb0 	bl	8000d04 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e211      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8001fb2:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x974>
 8001fbe:	e018      	b.n	8001ff2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8001fc0:	4b27      	ldr	r3, [pc, #156]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a26      	ldr	r2, [pc, #152]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001fc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001fca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8001fcc:	f7fe fe9a 	bl	8000d04 <HAL_GetTick>
 8001fd0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8001fd4:	f7fe fe96 	bl	8000d04 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e1f7      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8001fe6:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f0      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d07f      	beq.n	80020fe <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002002:	2b00      	cmp	r3, #0
 8002004:	d062      	beq.n	80020cc <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4a15      	ldr	r2, [pc, #84]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 800200c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002010:	6093      	str	r3, [r2, #8]
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	4910      	ldr	r1, [pc, #64]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8002020:	4313      	orrs	r3, r2
 8002022:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800202c:	d309      	bcc.n	8002042 <HAL_RCC_OscConfig+0xa16>
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	f023 021f 	bic.w	r2, r3, #31
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	4909      	ldr	r1, [pc, #36]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 800203c:	4313      	orrs	r3, r2
 800203e:	60cb      	str	r3, [r1, #12]
 8002040:	e02a      	b.n	8002098 <HAL_RCC_OscConfig+0xa6c>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	2b00      	cmp	r3, #0
 8002048:	da0c      	bge.n	8002064 <HAL_RCC_OscConfig+0xa38>
 800204a:	4b05      	ldr	r3, [pc, #20]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	015b      	lsls	r3, r3, #5
 8002058:	4901      	ldr	r1, [pc, #4]	; (8002060 <HAL_RCC_OscConfig+0xa34>)
 800205a:	4313      	orrs	r3, r2
 800205c:	60cb      	str	r3, [r1, #12]
 800205e:	e01b      	b.n	8002098 <HAL_RCC_OscConfig+0xa6c>
 8002060:	46020c00 	.word	0x46020c00
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800206c:	d30a      	bcc.n	8002084 <HAL_RCC_OscConfig+0xa58>
 800206e:	4ba1      	ldr	r3, [pc, #644]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	029b      	lsls	r3, r3, #10
 800207c:	499d      	ldr	r1, [pc, #628]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 800207e:	4313      	orrs	r3, r2
 8002080:	60cb      	str	r3, [r1, #12]
 8002082:	e009      	b.n	8002098 <HAL_RCC_OscConfig+0xa6c>
 8002084:	4b9b      	ldr	r3, [pc, #620]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	03db      	lsls	r3, r3, #15
 8002092:	4998      	ldr	r1, [pc, #608]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002094:	4313      	orrs	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8002098:	4b96      	ldr	r3, [pc, #600]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a95      	ldr	r2, [pc, #596]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 800209e:	f043 0310 	orr.w	r3, r3, #16
 80020a2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80020a4:	f7fe fe2e 	bl	8000d04 <HAL_GetTick>
 80020a8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80020ac:	f7fe fe2a 	bl	8000d04 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e18b      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80020be:	4b8d      	ldr	r3, [pc, #564]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0xa80>
 80020ca:	e018      	b.n	80020fe <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80020cc:	4b89      	ldr	r3, [pc, #548]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a88      	ldr	r2, [pc, #544]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 80020d2:	f023 0310 	bic.w	r3, r3, #16
 80020d6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80020d8:	f7fe fe14 	bl	8000d04 <HAL_GetTick>
 80020dc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80020e0:	f7fe fe10 	bl	8000d04 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e171      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80020f2:	4b80      	ldr	r3, [pc, #512]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0320 	and.w	r3, r3, #32
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002102:	2b00      	cmp	r3, #0
 8002104:	f000 8166 	beq.w	80023d4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8002108:	2300      	movs	r3, #0
 800210a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800210e:	4b79      	ldr	r3, [pc, #484]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b0c      	cmp	r3, #12
 8002118:	f000 80f2 	beq.w	8002300 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002120:	2b02      	cmp	r3, #2
 8002122:	f040 80c5 	bne.w	80022b0 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b73      	ldr	r3, [pc, #460]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a72      	ldr	r2, [pc, #456]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 800212c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002130:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002132:	f7fe fde7 	bl	8000d04 <HAL_GetTick>
 8002136:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213a:	f7fe fde3 	bl	8000d04 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e144      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800214c:	4b69      	ldr	r3, [pc, #420]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f0      	bne.n	800213a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002158:	4b66      	ldr	r3, [pc, #408]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 800215a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d111      	bne.n	800218a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	4b63      	ldr	r3, [pc, #396]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216c:	4a61      	ldr	r2, [pc, #388]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 800216e:	f043 0304 	orr.w	r3, r3, #4
 8002172:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002176:	4b5f      	ldr	r3, [pc, #380]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8002184:	2301      	movs	r3, #1
 8002186:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800218a:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <HAL_RCC_OscConfig+0xccc>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002192:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002196:	d102      	bne.n	800219e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8002198:	2301      	movs	r3, #1
 800219a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800219e:	4b56      	ldr	r3, [pc, #344]	; (80022f8 <HAL_RCC_OscConfig+0xccc>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	4a55      	ldr	r2, [pc, #340]	; (80022f8 <HAL_RCC_OscConfig+0xccc>)
 80021a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021a8:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80021aa:	4b52      	ldr	r3, [pc, #328]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021b2:	f023 0303 	bic.w	r3, r3, #3
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021be:	3a01      	subs	r2, #1
 80021c0:	0212      	lsls	r2, r2, #8
 80021c2:	4311      	orrs	r1, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80021c8:	430a      	orrs	r2, r1
 80021ca:	494a      	ldr	r1, [pc, #296]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	628b      	str	r3, [r1, #40]	; 0x28
 80021d0:	4b48      	ldr	r3, [pc, #288]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 80021d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021d4:	4b49      	ldr	r3, [pc, #292]	; (80022fc <HAL_RCC_OscConfig+0xcd0>)
 80021d6:	4013      	ands	r3, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80021dc:	3a01      	subs	r2, #1
 80021de:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021e6:	3a01      	subs	r2, #1
 80021e8:	0252      	lsls	r2, r2, #9
 80021ea:	b292      	uxth	r2, r2
 80021ec:	4311      	orrs	r1, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80021f2:	3a01      	subs	r2, #1
 80021f4:	0412      	lsls	r2, r2, #16
 80021f6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80021fa:	4311      	orrs	r1, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002200:	3a01      	subs	r2, #1
 8002202:	0612      	lsls	r2, r2, #24
 8002204:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002208:	430a      	orrs	r2, r1
 800220a:	493a      	ldr	r1, [pc, #232]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 800220c:	4313      	orrs	r3, r2
 800220e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8002210:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	4a37      	ldr	r2, [pc, #220]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002216:	f023 0310 	bic.w	r3, r3, #16
 800221a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002220:	4a34      	ldr	r2, [pc, #208]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8002226:	4b33      	ldr	r3, [pc, #204]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222a:	4a32      	ldr	r2, [pc, #200]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 800222c:	f043 0310 	orr.w	r3, r3, #16
 8002230:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002236:	f023 020c 	bic.w	r2, r3, #12
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	492d      	ldr	r1, [pc, #180]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002240:	4313      	orrs	r3, r2
 8002242:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8002244:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002248:	2b01      	cmp	r3, #1
 800224a:	d105      	bne.n	8002258 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800224c:	4b2a      	ldr	r3, [pc, #168]	; (80022f8 <HAL_RCC_OscConfig+0xccc>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a29      	ldr	r2, [pc, #164]	; (80022f8 <HAL_RCC_OscConfig+0xccc>)
 8002252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002256:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8002258:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800225c:	2b01      	cmp	r3, #1
 800225e:	d107      	bne.n	8002270 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002266:	4a23      	ldr	r2, [pc, #140]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002268:	f023 0304 	bic.w	r3, r3, #4
 800226c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002270:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	4a1f      	ldr	r2, [pc, #124]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002276:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800227a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1c      	ldr	r2, [pc, #112]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002286:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8002288:	f7fe fd3c 	bl	8000d04 <HAL_GetTick>
 800228c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe fd38 	bl	8000d04 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e099      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80022a2:	4b14      	ldr	r3, [pc, #80]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0xc64>
 80022ae:	e091      	b.n	80023d4 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80022b0:	4b10      	ldr	r3, [pc, #64]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0f      	ldr	r2, [pc, #60]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 80022b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022ba:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80022bc:	f7fe fd22 	bl	8000d04 <HAL_GetTick>
 80022c0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c4:	f7fe fd1e 	bl	8000d04 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e07f      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80022d6:	4b07      	ldr	r3, [pc, #28]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f0      	bne.n	80022c4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 80022e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e6:	4a03      	ldr	r2, [pc, #12]	; (80022f4 <HAL_RCC_OscConfig+0xcc8>)
 80022e8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80022ec:	f023 0303 	bic.w	r3, r3, #3
 80022f0:	6293      	str	r3, [r2, #40]	; 0x28
 80022f2:	e06f      	b.n	80023d4 <HAL_RCC_OscConfig+0xda8>
 80022f4:	46020c00 	.word	0x46020c00
 80022f8:	46020800 	.word	0x46020800
 80022fc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8002300:	4b37      	ldr	r3, [pc, #220]	; (80023e0 <HAL_RCC_OscConfig+0xdb4>)
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002306:	4b36      	ldr	r3, [pc, #216]	; (80023e0 <HAL_RCC_OscConfig+0xdb4>)
 8002308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002310:	2b01      	cmp	r3, #1
 8002312:	d039      	beq.n	8002388 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0203 	and.w	r2, r3, #3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d132      	bne.n	8002388 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d129      	bne.n	8002388 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d122      	bne.n	8002388 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800234c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800234e:	429a      	cmp	r2, r3
 8002350:	d11a      	bne.n	8002388 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	0a5b      	lsrs	r3, r3, #9
 8002356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d111      	bne.n	8002388 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	0c1b      	lsrs	r3, r3, #16
 8002368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002370:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d108      	bne.n	8002388 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	0e1b      	lsrs	r3, r3, #24
 800237a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002382:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e024      	b.n	80023d6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <HAL_RCC_OscConfig+0xdb4>)
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	08db      	lsrs	r3, r3, #3
 8002392:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800239a:	429a      	cmp	r2, r3
 800239c:	d01a      	beq.n	80023d4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_RCC_OscConfig+0xdb4>)
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <HAL_RCC_OscConfig+0xdb4>)
 80023a4:	f023 0310 	bic.w	r3, r3, #16
 80023a8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023aa:	f7fe fcab 	bl	8000d04 <HAL_GetTick>
 80023ae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80023b0:	bf00      	nop
 80023b2:	f7fe fca7 	bl	8000d04 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d0f9      	beq.n	80023b2 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c2:	4a07      	ldr	r2, [pc, #28]	; (80023e0 <HAL_RCC_OscConfig+0xdb4>)
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80023c8:	4b05      	ldr	r3, [pc, #20]	; (80023e0 <HAL_RCC_OscConfig+0xdb4>)
 80023ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023cc:	4a04      	ldr	r2, [pc, #16]	; (80023e0 <HAL_RCC_OscConfig+0xdb4>)
 80023ce:	f043 0310 	orr.w	r3, r3, #16
 80023d2:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3738      	adds	r7, #56	; 0x38
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	46020c00 	.word	0x46020c00

080023e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e1d9      	b.n	80027ac <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f8:	4b9b      	ldr	r3, [pc, #620]	; (8002668 <HAL_RCC_ClockConfig+0x284>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 030f 	and.w	r3, r3, #15
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d910      	bls.n	8002428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b98      	ldr	r3, [pc, #608]	; (8002668 <HAL_RCC_ClockConfig+0x284>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 020f 	bic.w	r2, r3, #15
 800240e:	4996      	ldr	r1, [pc, #600]	; (8002668 <HAL_RCC_ClockConfig+0x284>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b94      	ldr	r3, [pc, #592]	; (8002668 <HAL_RCC_ClockConfig+0x284>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e1c1      	b.n	80027ac <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0310 	and.w	r3, r3, #16
 8002430:	2b00      	cmp	r3, #0
 8002432:	d010      	beq.n	8002456 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695a      	ldr	r2, [r3, #20]
 8002438:	4b8c      	ldr	r3, [pc, #560]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 800243a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002440:	429a      	cmp	r2, r3
 8002442:	d908      	bls.n	8002456 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8002444:	4b89      	ldr	r3, [pc, #548]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002448:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	4986      	ldr	r1, [pc, #536]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 8002452:	4313      	orrs	r3, r2
 8002454:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d012      	beq.n	8002488 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	691a      	ldr	r2, [r3, #16]
 8002466:	4b81      	ldr	r3, [pc, #516]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 8002468:	6a1b      	ldr	r3, [r3, #32]
 800246a:	091b      	lsrs	r3, r3, #4
 800246c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002470:	429a      	cmp	r2, r3
 8002472:	d909      	bls.n	8002488 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002474:	4b7d      	ldr	r3, [pc, #500]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	497a      	ldr	r1, [pc, #488]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 8002484:	4313      	orrs	r3, r2
 8002486:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b00      	cmp	r3, #0
 8002492:	d010      	beq.n	80024b6 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	4b74      	ldr	r3, [pc, #464]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d908      	bls.n	80024b6 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80024a4:	4b71      	ldr	r3, [pc, #452]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	496e      	ldr	r1, [pc, #440]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689a      	ldr	r2, [r3, #8]
 80024c6:	4b69      	ldr	r3, [pc, #420]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f003 030f 	and.w	r3, r3, #15
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d908      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80024d2:	4b66      	ldr	r3, [pc, #408]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	f023 020f 	bic.w	r2, r3, #15
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	4963      	ldr	r1, [pc, #396]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80d2 	beq.w	8002696 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b03      	cmp	r3, #3
 80024fc:	d143      	bne.n	8002586 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fe:	4b5b      	ldr	r3, [pc, #364]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 8002500:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d110      	bne.n	800252e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800250c:	4b57      	ldr	r3, [pc, #348]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 800250e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002512:	4a56      	ldr	r2, [pc, #344]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800251c:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 800251e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800252e:	f7fe fbe9 	bl	8000d04 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8002534:	4b4e      	ldr	r3, [pc, #312]	; (8002670 <HAL_RCC_ClockConfig+0x28c>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00f      	beq.n	8002560 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002540:	e008      	b.n	8002554 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8002542:	f7fe fbdf 	bl	8000d04 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d901      	bls.n	8002554 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e12b      	b.n	80027ac <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8002554:	4b46      	ldr	r3, [pc, #280]	; (8002670 <HAL_RCC_ClockConfig+0x28c>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d0f0      	beq.n	8002542 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002566:	4b41      	ldr	r3, [pc, #260]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 8002568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800256c:	4a3f      	ldr	r2, [pc, #252]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 800256e:	f023 0304 	bic.w	r3, r3, #4
 8002572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8002576:	4b3d      	ldr	r3, [pc, #244]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d121      	bne.n	80025c6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e112      	b.n	80027ac <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800258e:	4b37      	ldr	r3, [pc, #220]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d115      	bne.n	80025c6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e106      	b.n	80027ac <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d107      	bne.n	80025b6 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80025a6:	4b31      	ldr	r3, [pc, #196]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d109      	bne.n	80025c6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0fa      	b.n	80027ac <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b6:	4b2d      	ldr	r3, [pc, #180]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0f2      	b.n	80027ac <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80025c6:	4b29      	ldr	r3, [pc, #164]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f023 0203 	bic.w	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	4926      	ldr	r1, [pc, #152]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80025d8:	f7fe fb94 	bl	8000d04 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	d112      	bne.n	800260c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e6:	e00a      	b.n	80025fe <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7fe fb8c 	bl	8000d04 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e0d6      	b.n	80027ac <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fe:	4b1b      	ldr	r3, [pc, #108]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b0c      	cmp	r3, #12
 8002608:	d1ee      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x204>
 800260a:	e044      	b.n	8002696 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d112      	bne.n	800263a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002614:	e00a      	b.n	800262c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002616:	f7fe fb75 	bl	8000d04 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	; 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e0bf      	b.n	80027ac <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800262c:	4b0f      	ldr	r3, [pc, #60]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b08      	cmp	r3, #8
 8002636:	d1ee      	bne.n	8002616 <HAL_RCC_ClockConfig+0x232>
 8002638:	e02d      	b.n	8002696 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d123      	bne.n	800268a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002642:	e00a      	b.n	800265a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002644:	f7fe fb5e 	bl	8000d04 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e0a8      	b.n	80027ac <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <HAL_RCC_ClockConfig+0x288>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1ee      	bne.n	8002644 <HAL_RCC_ClockConfig+0x260>
 8002666:	e016      	b.n	8002696 <HAL_RCC_ClockConfig+0x2b2>
 8002668:	40022000 	.word	0x40022000
 800266c:	46020c00 	.word	0x46020c00
 8002670:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002674:	f7fe fb46 	bl	8000d04 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002682:	4293      	cmp	r3, r2
 8002684:	d901      	bls.n	800268a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e090      	b.n	80027ac <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800268a:	4b4a      	ldr	r3, [pc, #296]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 800268c:	69db      	ldr	r3, [r3, #28]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b04      	cmp	r3, #4
 8002694:	d1ee      	bne.n	8002674 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d010      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689a      	ldr	r2, [r3, #8]
 80026a6:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d208      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80026b2:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	f023 020f 	bic.w	r2, r3, #15
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	493d      	ldr	r1, [pc, #244]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b3c      	ldr	r3, [pc, #240]	; (80027b8 <HAL_RCC_ClockConfig+0x3d4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d210      	bcs.n	80026f4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <HAL_RCC_ClockConfig+0x3d4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 020f 	bic.w	r2, r3, #15
 80026da:	4937      	ldr	r1, [pc, #220]	; (80027b8 <HAL_RCC_ClockConfig+0x3d4>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b35      	ldr	r3, [pc, #212]	; (80027b8 <HAL_RCC_ClockConfig+0x3d4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e05b      	b.n	80027ac <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d010      	beq.n	8002722 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	4b2b      	ldr	r3, [pc, #172]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 8002706:	6a1b      	ldr	r3, [r3, #32]
 8002708:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800270c:	429a      	cmp	r2, r3
 800270e:	d208      	bcs.n	8002722 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8002710:	4b28      	ldr	r3, [pc, #160]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4925      	ldr	r1, [pc, #148]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 800271e:	4313      	orrs	r3, r2
 8002720:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d012      	beq.n	8002754 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691a      	ldr	r2, [r3, #16]
 8002732:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800273c:	429a      	cmp	r2, r3
 800273e:	d209      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8002740:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	011b      	lsls	r3, r3, #4
 800274e:	4919      	ldr	r1, [pc, #100]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 8002750:	4313      	orrs	r3, r2
 8002752:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d010      	beq.n	8002782 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	4b13      	ldr	r3, [pc, #76]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800276c:	429a      	cmp	r2, r3
 800276e:	d208      	bcs.n	8002782 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8002770:	4b10      	ldr	r3, [pc, #64]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	490d      	ldr	r1, [pc, #52]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 800277e:	4313      	orrs	r3, r2
 8002780:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002782:	f000 f821 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 8002786:	4602      	mov	r2, r0
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_RCC_ClockConfig+0x3d0>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	490a      	ldr	r1, [pc, #40]	; (80027bc <HAL_RCC_ClockConfig+0x3d8>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
 8002798:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x3dc>)
 800279a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800279c:	4b09      	ldr	r3, [pc, #36]	; (80027c4 <HAL_RCC_ClockConfig+0x3e0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe f973 	bl	8000a8c <HAL_InitTick>
 80027a6:	4603      	mov	r3, r0
 80027a8:	73fb      	strb	r3, [r7, #15]

  return status;
 80027aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3718      	adds	r7, #24
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	46020c00 	.word	0x46020c00
 80027b8:	40022000 	.word	0x40022000
 80027bc:	08006600 	.word	0x08006600
 80027c0:	20000000 	.word	0x20000000
 80027c4:	20000004 	.word	0x20000004

080027c8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b08b      	sub	sp, #44	; 0x2c
 80027cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027d6:	4b78      	ldr	r3, [pc, #480]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80027d8:	69db      	ldr	r3, [r3, #28]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027e0:	4b75      	ldr	r3, [pc, #468]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	f003 0303 	and.w	r3, r3, #3
 80027e8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d005      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x34>
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	2b0c      	cmp	r3, #12
 80027f4:	d121      	bne.n	800283a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d11e      	bne.n	800283a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80027fc:	4b6e      	ldr	r3, [pc, #440]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d107      	bne.n	8002818 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8002808:	4b6b      	ldr	r3, [pc, #428]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800280a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800280e:	0b1b      	lsrs	r3, r3, #12
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	e005      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8002818:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	0f1b      	lsrs	r3, r3, #28
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002824:	4a65      	ldr	r2, [pc, #404]	; (80029bc <HAL_RCC_GetSysClockFreq+0x1f4>)
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d110      	bne.n	8002856 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002836:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002838:	e00d      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800283a:	4b5f      	ldr	r3, [pc, #380]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f003 030c 	and.w	r3, r3, #12
 8002842:	2b04      	cmp	r3, #4
 8002844:	d102      	bne.n	800284c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002846:	4b5e      	ldr	r3, [pc, #376]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002848:	623b      	str	r3, [r7, #32]
 800284a:	e004      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	2b08      	cmp	r3, #8
 8002850:	d101      	bne.n	8002856 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002852:	4b5b      	ldr	r3, [pc, #364]	; (80029c0 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8002854:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	f040 80a5 	bne.w	80029a8 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800285e:	4b56      	ldr	r3, [pc, #344]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8002868:	4b53      	ldr	r3, [pc, #332]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	3301      	adds	r3, #1
 8002874:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8002876:	4b50      	ldr	r3, [pc, #320]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8002882:	4b4d      	ldr	r3, [pc, #308]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002886:	08db      	lsrs	r3, r3, #3
 8002888:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	fb02 f303 	mul.w	r3, r2, r3
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800289a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d003      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0xe4>
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d022      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x128>
 80028aa:	e043      	b.n	8002934 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b6:	eddf 6a43 	vldr	s13, [pc, #268]	; 80029c4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80028ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028be:	4b3e      	ldr	r3, [pc, #248]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80028c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80028ce:	ed97 6a01 	vldr	s12, [r7, #4]
 80028d2:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80029c8 <HAL_RCC_GetSysClockFreq+0x200>
 80028d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028da:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80028de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80028e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80028ee:	e046      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fa:	eddf 6a32 	vldr	s13, [pc, #200]	; 80029c4 <HAL_RCC_GetSysClockFreq+0x1fc>
 80028fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002902:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002912:	ed97 6a01 	vldr	s12, [r7, #4]
 8002916:	eddf 5a2c 	vldr	s11, [pc, #176]	; 80029c8 <HAL_RCC_GetSysClockFreq+0x200>
 800291a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800291e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8002922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002926:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800292a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002932:	e024      	b.n	800297e <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	ee07 3a90 	vmov	s15, r3
 8002944:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800294c:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800294e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002954:	ee07 3a90 	vmov	s15, r3
 8002958:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800295c:	ed97 6a01 	vldr	s12, [r7, #4]
 8002960:	eddf 5a19 	vldr	s11, [pc, #100]	; 80029c8 <HAL_RCC_GetSysClockFreq+0x200>
 8002964:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002968:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800296c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002970:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8002974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002978:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800297c:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8002980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002982:	0e1b      	lsrs	r3, r3, #24
 8002984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002988:	3301      	adds	r3, #1
 800298a:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002996:	edd7 6a07 	vldr	s13, [r7, #28]
 800299a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800299e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a2:	ee17 3a90 	vmov	r3, s15
 80029a6:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80029a8:	6a3b      	ldr	r3, [r7, #32]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	372c      	adds	r7, #44	; 0x2c
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	46020c00 	.word	0x46020c00
 80029bc:	08006618 	.word	0x08006618
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	4b742400 	.word	0x4b742400
 80029c8:	46000000 	.word	0x46000000

080029cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80029d0:	f7ff fefa 	bl	80027c8 <HAL_RCC_GetSysClockFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b07      	ldr	r3, [pc, #28]	; (80029f4 <HAL_RCC_GetHCLKFreq+0x28>)
 80029d8:	6a1b      	ldr	r3, [r3, #32]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	4906      	ldr	r1, [pc, #24]	; (80029f8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80029e0:	5ccb      	ldrb	r3, [r1, r3]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a05      	ldr	r2, [pc, #20]	; (80029fc <HAL_RCC_GetHCLKFreq+0x30>)
 80029e8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80029ea:	4b04      	ldr	r3, [pc, #16]	; (80029fc <HAL_RCC_GetHCLKFreq+0x30>)
 80029ec:	681b      	ldr	r3, [r3, #0]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	46020c00 	.word	0x46020c00
 80029f8:	08006600 	.word	0x08006600
 80029fc:	20000000 	.word	0x20000000

08002a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8002a04:	f7ff ffe2 	bl	80029cc <HAL_RCC_GetHCLKFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4903      	ldr	r1, [pc, #12]	; (8002a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	46020c00 	.word	0x46020c00
 8002a24:	08006610 	.word	0x08006610

08002a28 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	221f      	movs	r2, #31
 8002a36:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_RCC_GetClockConfig+0x68>)
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f003 0203 	and.w	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8002a44:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_RCC_GetClockConfig+0x68>)
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	f003 020f 	and.w	r2, r3, #15
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <HAL_RCC_GetClockConfig+0x68>)
 8002a52:	6a1b      	ldr	r3, [r3, #32]
 8002a54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <HAL_RCC_GetClockConfig+0x68>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	091b      	lsrs	r3, r3, #4
 8002a62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8002a6a:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <HAL_RCC_GetClockConfig+0x68>)
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_RCC_GetClockConfig+0x6c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 020f 	and.w	r2, r3, #15
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	601a      	str	r2, [r3, #0]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	46020c00 	.word	0x46020c00
 8002a94:	40022000 	.word	0x40022000

08002a98 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002aa0:	4b3e      	ldr	r3, [pc, #248]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d003      	beq.n	8002ab6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002aae:	f7fe fd23 	bl	80014f8 <HAL_PWREx_GetVoltageRange>
 8002ab2:	6178      	str	r0, [r7, #20]
 8002ab4:	e019      	b.n	8002aea <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	4b39      	ldr	r3, [pc, #228]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002abc:	4a37      	ldr	r2, [pc, #220]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002abe:	f043 0304 	orr.w	r3, r3, #4
 8002ac2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002ac6:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002acc:	f003 0304 	and.w	r3, r3, #4
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ad4:	f7fe fd10 	bl	80014f8 <HAL_PWREx_GetVoltageRange>
 8002ad8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ada:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae0:	4a2e      	ldr	r2, [pc, #184]	; (8002b9c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8002ae2:	f023 0304 	bic.w	r3, r3, #4
 8002ae6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002af0:	d003      	beq.n	8002afa <RCC_SetFlashLatencyFromMSIRange+0x62>
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002af8:	d109      	bne.n	8002b0e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b00:	d202      	bcs.n	8002b08 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8002b02:	2301      	movs	r3, #1
 8002b04:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002b06:	e033      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8002b0c:	e030      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b14:	d208      	bcs.n	8002b28 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1c:	d102      	bne.n	8002b24 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8002b1e:	2303      	movs	r3, #3
 8002b20:	613b      	str	r3, [r7, #16]
 8002b22:	e025      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e035      	b.n	8002b94 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b2e:	d90f      	bls.n	8002b50 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d109      	bne.n	8002b4a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002b3c:	d902      	bls.n	8002b44 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8002b3e:	2300      	movs	r3, #0
 8002b40:	613b      	str	r3, [r7, #16]
 8002b42:	e015      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8002b44:	2301      	movs	r3, #1
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	e012      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	e00f      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b56:	d109      	bne.n	8002b6c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5e:	d102      	bne.n	8002b66 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8002b60:	2301      	movs	r3, #1
 8002b62:	613b      	str	r3, [r7, #16]
 8002b64:	e004      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8002b66:	2302      	movs	r3, #2
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	e001      	b.n	8002b70 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f023 020f 	bic.w	r2, r3, #15
 8002b78:	4909      	ldr	r1, [pc, #36]	; (8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002b80:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d001      	beq.n	8002b92 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	46020c00 	.word	0x46020c00
 8002ba0:	40022000 	.word	0x40022000

08002ba4 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8002ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ba8:	b0b8      	sub	sp, #224	; 0xe0
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f002 0401 	and.w	r4, r2, #1
 8002bc8:	2500      	movs	r5, #0
 8002bca:	ea54 0305 	orrs.w	r3, r4, r5
 8002bce:	d00b      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8002bd0:	4bca      	ldr	r3, [pc, #808]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bd6:	f023 0103 	bic.w	r1, r3, #3
 8002bda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be0:	4ac6      	ldr	r2, [pc, #792]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002be2:	430b      	orrs	r3, r1
 8002be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002be8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf0:	f002 0802 	and.w	r8, r2, #2
 8002bf4:	f04f 0900 	mov.w	r9, #0
 8002bf8:	ea58 0309 	orrs.w	r3, r8, r9
 8002bfc:	d00b      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8002bfe:	4bbf      	ldr	r3, [pc, #764]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c04:	f023 010c 	bic.w	r1, r3, #12
 8002c08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0e:	4abb      	ldr	r2, [pc, #748]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c10:	430b      	orrs	r3, r1
 8002c12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c1e:	f002 0a04 	and.w	sl, r2, #4
 8002c22:	f04f 0b00 	mov.w	fp, #0
 8002c26:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c2a:	d00b      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8002c2c:	4bb3      	ldr	r3, [pc, #716]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c32:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002c36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	4aaf      	ldr	r2, [pc, #700]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c3e:	430b      	orrs	r3, r1
 8002c40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f002 0308 	and.w	r3, r2, #8
 8002c50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c5a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4313      	orrs	r3, r2
 8002c62:	d00b      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8002c64:	4ba5      	ldr	r3, [pc, #660]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002c6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	4aa1      	ldr	r2, [pc, #644]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c76:	430b      	orrs	r3, r1
 8002c78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c7c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c84:	f002 0310 	and.w	r3, r2, #16
 8002c88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002c92:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002c96:	460b      	mov	r3, r1
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8002c9c:	4b97      	ldr	r3, [pc, #604]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ca6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cac:	4a93      	ldr	r2, [pc, #588]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f002 0320 	and.w	r3, r2, #32
 8002cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cca:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	d00b      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8002cd4:	4b89      	ldr	r3, [pc, #548]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cda:	f023 0107 	bic.w	r1, r3, #7
 8002cde:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce4:	4a85      	ldr	r2, [pc, #532]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ce6:	430b      	orrs	r3, r1
 8002ce8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8002cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d02:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002d06:	460b      	mov	r3, r1
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	d00b      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8002d0c:	4b7b      	ldr	r3, [pc, #492]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d12:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002d16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d1c:	4a77      	ldr	r2, [pc, #476]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d1e:	430b      	orrs	r3, r1
 8002d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8002d30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002d34:	2300      	movs	r3, #0
 8002d36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002d3a:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4313      	orrs	r3, r2
 8002d42:	d00b      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8002d44:	4b6d      	ldr	r3, [pc, #436]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d4e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d54:	4a69      	ldr	r2, [pc, #420]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d56:	430b      	orrs	r3, r1
 8002d58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d64:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8002d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002d72:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8002d76:	460b      	mov	r3, r1
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	d00b      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8002d7c:	4b5f      	ldr	r3, [pc, #380]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8c:	4a5b      	ldr	r2, [pc, #364]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002da0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002da4:	2300      	movs	r3, #0
 8002da6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002daa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8002dae:	460b      	mov	r3, r1
 8002db0:	4313      	orrs	r3, r2
 8002db2:	d00b      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8002db4:	4b51      	ldr	r3, [pc, #324]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dba:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8002dbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc4:	4a4d      	ldr	r2, [pc, #308]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002dcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8002dd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002de2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8002de6:	460b      	mov	r3, r1
 8002de8:	4313      	orrs	r3, r2
 8002dea:	d00b      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8002dec:	4b43      	ldr	r3, [pc, #268]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002df2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8002df6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002dfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dfc:	4a3f      	ldr	r2, [pc, #252]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002dfe:	430b      	orrs	r3, r1
 8002e00:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002e04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002e10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e14:	2300      	movs	r3, #0
 8002e16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e1a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4313      	orrs	r3, r2
 8002e22:	d00b      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8002e24:	4b35      	ldr	r3, [pc, #212]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8002e2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e34:	4a31      	ldr	r2, [pc, #196]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e36:	430b      	orrs	r3, r1
 8002e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8002e3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e44:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002e48:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e4e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8002e52:	460b      	mov	r3, r1
 8002e54:	4313      	orrs	r3, r2
 8002e56:	d00c      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8002e58:	4b28      	ldr	r3, [pc, #160]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e5a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e5e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e6a:	4a24      	ldr	r2, [pc, #144]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002e7e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e80:	2300      	movs	r3, #0
 8002e82:	677b      	str	r3, [r7, #116]	; 0x74
 8002e84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	d04f      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8002e8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	d02d      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x352>
 8002e9a:	2b80      	cmp	r3, #128	; 0x80
 8002e9c:	d827      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002e9e:	2b60      	cmp	r3, #96	; 0x60
 8002ea0:	d02e      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002ea2:	2b60      	cmp	r3, #96	; 0x60
 8002ea4:	d823      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	d006      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8002eaa:	2b40      	cmp	r3, #64	; 0x40
 8002eac:	d81f      	bhi.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d009      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x322>
 8002eb2:	2b20      	cmp	r3, #32
 8002eb4:	d011      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x336>
 8002eb6:	e01a      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002eb8:	4b10      	ldr	r3, [pc, #64]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	4a0f      	ldr	r2, [pc, #60]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ebe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec2:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002ec4:	e01d      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002eca:	3308      	adds	r3, #8
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 fc0d 	bl	80036ec <RCCEx_PLL2_Config>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002ed8:	e013      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002eda:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ede:	332c      	adds	r3, #44	; 0x2c
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fc9b 	bl	800381c <RCCEx_PLL3_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002eec:	e009      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8002ef4:	e005      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8002ef6:	bf00      	nop
 8002ef8:	e003      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8002efa:	bf00      	nop
 8002efc:	46020c00 	.word	0x46020c00
        break;
 8002f00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f02:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10d      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8002f0a:	4bb6      	ldr	r3, [pc, #728]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002f0c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002f10:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8002f14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	4ab1      	ldr	r2, [pc, #708]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002f1e:	430b      	orrs	r3, r1
 8002f20:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002f24:	e003      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f26:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002f2a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f36:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f40:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8002f44:	460b      	mov	r3, r1
 8002f46:	4313      	orrs	r3, r2
 8002f48:	d053      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8002f4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f56:	d033      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5c:	d82c      	bhi.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002f5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f62:	d02f      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8002f64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f68:	d826      	bhi.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002f6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f74:	d820      	bhi.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8002f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7e:	d011      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002f80:	e01a      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002f82:	4b98      	ldr	r3, [pc, #608]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	4a97      	ldr	r2, [pc, #604]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8c:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002f8e:	e01a      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8002f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002f94:	3308      	adds	r3, #8
 8002f96:	4618      	mov	r0, r3
 8002f98:	f000 fba8 	bl	80036ec <RCCEx_PLL2_Config>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002fa2:	e010      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8002fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fa8:	332c      	adds	r3, #44	; 0x2c
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fc36 	bl	800381c <RCCEx_PLL3_Config>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8002fb6:	e006      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8002fbe:	e002      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8002fc0:	bf00      	nop
 8002fc2:	e000      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8002fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc6:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d10d      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8002fce:	4b85      	ldr	r3, [pc, #532]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002fd0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002fd4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002fd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fe0:	4a80      	ldr	r2, [pc, #512]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8002fe2:	430b      	orrs	r3, r1
 8002fe4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8002fe8:	e003      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fea:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8002fee:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8002ff2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002ffe:	663b      	str	r3, [r7, #96]	; 0x60
 8003000:	2300      	movs	r3, #0
 8003002:	667b      	str	r3, [r7, #100]	; 0x64
 8003004:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003008:	460b      	mov	r3, r1
 800300a:	4313      	orrs	r3, r2
 800300c:	d046      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800300e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003012:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003016:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800301a:	d028      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800301c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003020:	d821      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003026:	d022      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800302c:	d81b      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800302e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003032:	d01c      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003034:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003038:	d815      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800303a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800303e:	d008      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8003040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003044:	d80f      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d011      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800304a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304e:	d00e      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8003050:	e009      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003052:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003056:	3308      	adds	r3, #8
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fb47 	bl	80036ec <RCCEx_PLL2_Config>
 800305e:	4603      	mov	r3, r0
 8003060:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003064:	e004      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800306c:	e000      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 800306e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003070:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10d      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8003078:	4b5a      	ldr	r3, [pc, #360]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800307a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800307e:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003082:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003086:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800308a:	4a56      	ldr	r2, [pc, #344]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800308c:	430b      	orrs	r3, r1
 800308e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003092:	e003      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003098:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 800309c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80030a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80030aa:	2300      	movs	r3, #0
 80030ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80030b2:	460b      	mov	r3, r1
 80030b4:	4313      	orrs	r3, r2
 80030b6:	d03f      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80030b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d81e      	bhi.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 80030c4:	a201      	add	r2, pc, #4	; (adr r2, 80030cc <HAL_RCCEx_PeriphCLKConfig+0x528>)
 80030c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ca:	bf00      	nop
 80030cc:	0800310b 	.word	0x0800310b
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030ef 	.word	0x080030ef
 80030d8:	0800310b 	.word	0x0800310b
 80030dc:	0800310b 	.word	0x0800310b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030e0:	4b40      	ldr	r3, [pc, #256]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	4a3f      	ldr	r2, [pc, #252]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80030e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ea:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80030ec:	e00e      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80030ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80030f2:	332c      	adds	r3, #44	; 0x2c
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fb91 	bl	800381c <RCCEx_PLL3_Config>
 80030fa:	4603      	mov	r3, r0
 80030fc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003100:	e004      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003108:	e000      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 800310a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800310c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10d      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8003114:	4b33      	ldr	r3, [pc, #204]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003116:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800311a:	f023 0107 	bic.w	r1, r3, #7
 800311e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003126:	4a2f      	ldr	r2, [pc, #188]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003128:	430b      	orrs	r3, r1
 800312a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800312e:	e003      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003130:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003134:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8003138:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800313c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003140:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003144:	653b      	str	r3, [r7, #80]	; 0x50
 8003146:	2300      	movs	r3, #0
 8003148:	657b      	str	r3, [r7, #84]	; 0x54
 800314a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800314e:	460b      	mov	r3, r1
 8003150:	4313      	orrs	r3, r2
 8003152:	d04d      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8003154:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800315c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003160:	d028      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
 8003162:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003166:	d821      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003168:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800316c:	d024      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 800316e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003172:	d81b      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003174:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003178:	d00e      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 800317a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800317e:	d815      	bhi.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01b      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x618>
 8003184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003188:	d110      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 800318c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318e:	4a15      	ldr	r2, [pc, #84]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8003190:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003194:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8003196:	e012      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8003198:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800319c:	332c      	adds	r3, #44	; 0x2c
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fb3c 	bl	800381c <RCCEx_PLL3_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80031aa:	e008      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80031b2:	e004      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80031b4:	bf00      	nop
 80031b6:	e002      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80031b8:	bf00      	nop
 80031ba:	e000      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 80031bc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80031be:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d110      	bne.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80031c6:	4b07      	ldr	r3, [pc, #28]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80031c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031cc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80031d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d8:	4a02      	ldr	r2, [pc, #8]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x640>)
 80031da:	430b      	orrs	r3, r1
 80031dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031e0:	e006      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80031e2:	bf00      	nop
 80031e4:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e8:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80031ec:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80031f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80031fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80031fe:	2300      	movs	r3, #0
 8003200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003202:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003206:	460b      	mov	r3, r1
 8003208:	4313      	orrs	r3, r2
 800320a:	f000 80b5 	beq.w	8003378 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800320e:	2300      	movs	r3, #0
 8003210:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003214:	4b9d      	ldr	r3, [pc, #628]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d113      	bne.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003222:	4b9a      	ldr	r3, [pc, #616]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003228:	4a98      	ldr	r2, [pc, #608]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800322a:	f043 0304 	orr.w	r3, r3, #4
 800322e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003232:	4b96      	ldr	r3, [pc, #600]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003238:	f003 0304 	and.w	r3, r3, #4
 800323c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003240:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
      pwrclkchanged = SET;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800324a:	4b91      	ldr	r3, [pc, #580]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	4a90      	ldr	r2, [pc, #576]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003256:	f7fd fd55 	bl	8000d04 <HAL_GetTick>
 800325a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800325e:	e00b      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7fd fd50 	bl	8000d04 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800326a:	1ad3      	subs	r3, r2, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d903      	bls.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003276:	e005      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003278:	4b85      	ldr	r3, [pc, #532]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0ed      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 8003284:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003288:	2b00      	cmp	r3, #0
 800328a:	d165      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800328c:	4b7f      	ldr	r3, [pc, #508]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800328e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003296:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800329a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d023      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x746>
 80032a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032a6:	f8d3 20bc 	ldr.w	r2, [r3, #188]	; 0xbc
 80032aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01b      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032b2:	4b76      	ldr	r3, [pc, #472]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80032b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032c0:	4b72      	ldr	r3, [pc, #456]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80032c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032c6:	4a71      	ldr	r2, [pc, #452]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032cc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032d0:	4b6e      	ldr	r3, [pc, #440]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80032d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032d6:	4a6d      	ldr	r2, [pc, #436]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80032d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032dc:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032e0:	4a6a      	ldr	r2, [pc, #424]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80032e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d019      	beq.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f6:	f7fd fd05 	bl	8000d04 <HAL_GetTick>
 80032fa:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032fe:	e00d      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003300:	f7fd fd00 	bl	8000d04 <HAL_GetTick>
 8003304:	4602      	mov	r2, r0
 8003306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800330a:	1ad2      	subs	r2, r2, r3
 800330c:	f241 3388 	movw	r3, #5000	; 0x1388
 8003310:	429a      	cmp	r2, r3
 8003312:	d903      	bls.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
            break;
 800331a:	e006      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800331c:	4b5b      	ldr	r3, [pc, #364]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800331e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0ea      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 800332a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10d      	bne.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8003332:	4b56      	ldr	r3, [pc, #344]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003338:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800333c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003340:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003344:	4a51      	ldr	r2, [pc, #324]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003346:	430b      	orrs	r3, r1
 8003348:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800334c:	e008      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800334e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003352:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8003356:	e003      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003358:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800335c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003360:	f897 30d9 	ldrb.w	r3, [r7, #217]	; 0xd9
 8003364:	2b01      	cmp	r3, #1
 8003366:	d107      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003368:	4b48      	ldr	r3, [pc, #288]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800336a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800336e:	4a47      	ldr	r2, [pc, #284]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003370:	f023 0304 	bic.w	r3, r3, #4
 8003374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8003378:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800337c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003380:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003384:	643b      	str	r3, [r7, #64]	; 0x40
 8003386:	2300      	movs	r3, #0
 8003388:	647b      	str	r3, [r7, #68]	; 0x44
 800338a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800338e:	460b      	mov	r3, r1
 8003390:	4313      	orrs	r3, r2
 8003392:	d042      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8003394:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003398:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800339c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80033a0:	d022      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x844>
 80033a2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80033a6:	d81b      	bhi.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80033a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033ac:	d011      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80033ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033b2:	d815      	bhi.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d019      	beq.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0x848>
 80033b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033bc:	d110      	bne.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80033be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80033c2:	3308      	adds	r3, #8
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f991 	bl	80036ec <RCCEx_PLL2_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80033d0:	e00d      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033d2:	4b2e      	ldr	r3, [pc, #184]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	4a2d      	ldr	r2, [pc, #180]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033dc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80033de:	e006      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 80033e6:	e002      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80033e8:	bf00      	nop
 80033ea:	e000      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80033ec:	bf00      	nop
    }
    if (ret == HAL_OK)
 80033ee:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10d      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80033f6:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80033f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033fc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003400:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003404:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003408:	4a20      	ldr	r2, [pc, #128]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800340a:	430b      	orrs	r3, r1
 800340c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003410:	e003      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003412:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003416:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800341a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
 8003428:	2300      	movs	r3, #0
 800342a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800342c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003430:	460b      	mov	r3, r1
 8003432:	4313      	orrs	r3, r2
 8003434:	d032      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8003436:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800343a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800343e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003442:	d00b      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d804      	bhi.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800344e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003452:	d007      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 800345a:	e004      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800345c:	bf00      	nop
 800345e:	e002      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8003460:	bf00      	nop
 8003462:	e000      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8003464:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003466:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800346a:	2b00      	cmp	r3, #0
 800346c:	d112      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003470:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8003474:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003478:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800347c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003480:	4a02      	ldr	r2, [pc, #8]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8003482:	430b      	orrs	r3, r1
 8003484:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8003488:	e008      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 800348a:	bf00      	nop
 800348c:	46020c00 	.word	0x46020c00
 8003490:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003494:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8003498:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800349c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80034a8:	633b      	str	r3, [r7, #48]	; 0x30
 80034aa:	2300      	movs	r3, #0
 80034ac:	637b      	str	r3, [r7, #52]	; 0x34
 80034ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80034b2:	460b      	mov	r3, r1
 80034b4:	4313      	orrs	r3, r2
 80034b6:	d019      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80034b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034c4:	d105      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034c6:	4b88      	ldr	r3, [pc, #544]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	4a87      	ldr	r2, [pc, #540]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80034cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034d0:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80034d2:	4b85      	ldr	r3, [pc, #532]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80034d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80034d8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80034dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034e4:	4a80      	ldr	r2, [pc, #512]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80034e6:	430b      	orrs	r3, r1
 80034e8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80034ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80034f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80034fa:	2300      	movs	r3, #0
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034fe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003502:	460b      	mov	r3, r1
 8003504:	4313      	orrs	r3, r2
 8003506:	d00c      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8003508:	4b77      	ldr	r3, [pc, #476]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800350a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800350e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003512:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003516:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800351a:	4973      	ldr	r1, [pc, #460]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8003522:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800352e:	623b      	str	r3, [r7, #32]
 8003530:	2300      	movs	r3, #0
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
 8003534:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003538:	460b      	mov	r3, r1
 800353a:	4313      	orrs	r3, r2
 800353c:	d00c      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800353e:	4b6a      	ldr	r3, [pc, #424]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003544:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800354c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003550:	4965      	ldr	r1, [pc, #404]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003552:	4313      	orrs	r3, r2
 8003554:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8003558:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800355c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003560:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800356e:	460b      	mov	r3, r1
 8003570:	4313      	orrs	r3, r2
 8003572:	d00c      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8003574:	4b5c      	ldr	r3, [pc, #368]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003576:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800357a:	f023 0218 	bic.w	r2, r3, #24
 800357e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003582:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003586:	4958      	ldr	r1, [pc, #352]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800358e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80035a4:	460b      	mov	r3, r1
 80035a6:	4313      	orrs	r3, r2
 80035a8:	d032      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80035aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035b6:	d105      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035b8:	4b4b      	ldr	r3, [pc, #300]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	4a4a      	ldr	r2, [pc, #296]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80035be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035c2:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80035c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035d0:	d108      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80035d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035d6:	3308      	adds	r3, #8
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f887 	bl	80036ec <RCCEx_PLL2_Config>
 80035de:	4603      	mov	r3, r0
 80035e0:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    }
    if (ret == HAL_OK)
 80035e4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10d      	bne.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80035ec:	4b3e      	ldr	r3, [pc, #248]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80035ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80035f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035fe:	493a      	ldr	r1, [pc, #232]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8003606:	e003      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003608:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800360c:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8003610:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	2300      	movs	r3, #0
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003626:	460b      	mov	r3, r1
 8003628:	4313      	orrs	r3, r2
 800362a:	d03a      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800362c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003634:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003638:	d00e      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800363a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800363e:	d815      	bhi.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d017      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0xad0>
 8003644:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003648:	d110      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800364a:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	4a26      	ldr	r2, [pc, #152]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003654:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8003656:	e00e      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8003658:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800365c:	3308      	adds	r3, #8
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f844 	bl	80036ec <RCCEx_PLL2_Config>
 8003664:	4603      	mov	r3, r0
 8003666:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800366a:	e004      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
        break;
 8003672:	e000      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 8003674:	bf00      	nop
    }
    if (ret == HAL_OK)
 8003676:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10d      	bne.n	800369a <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800367e:	4b1a      	ldr	r3, [pc, #104]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003684:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003688:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800368c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003690:	4915      	ldr	r1, [pc, #84]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8003698:	e003      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 800369e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80036a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036aa:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	2300      	movs	r3, #0
 80036b2:	607b      	str	r3, [r7, #4]
 80036b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80036b8:	460b      	mov	r3, r1
 80036ba:	4313      	orrs	r3, r2
 80036bc:	d00c      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80036be:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80036c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036c4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80036c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036d0:	4905      	ldr	r1, [pc, #20]	; (80036e8 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80036d8:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
}
 80036dc:	4618      	mov	r0, r3
 80036de:	37e0      	adds	r7, #224	; 0xe0
 80036e0:	46bd      	mov	sp, r7
 80036e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036e6:	bf00      	nop
 80036e8:	46020c00 	.word	0x46020c00

080036ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80036f4:	4b47      	ldr	r3, [pc, #284]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a46      	ldr	r2, [pc, #280]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 80036fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003700:	f7fd fb00 	bl	8000d04 <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003706:	e008      	b.n	800371a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003708:	f7fd fafc 	bl	8000d04 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e077      	b.n	800380a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800371a:	4b3e      	ldr	r3, [pc, #248]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d1f0      	bne.n	8003708 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8003726:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800372e:	f023 0303 	bic.w	r3, r3, #3
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6811      	ldr	r1, [r2, #0]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6852      	ldr	r2, [r2, #4]
 800373a:	3a01      	subs	r2, #1
 800373c:	0212      	lsls	r2, r2, #8
 800373e:	430a      	orrs	r2, r1
 8003740:	4934      	ldr	r1, [pc, #208]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 8003742:	4313      	orrs	r3, r2
 8003744:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003746:	4b33      	ldr	r3, [pc, #204]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 8003748:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800374a:	4b33      	ldr	r3, [pc, #204]	; (8003818 <RCCEx_PLL2_Config+0x12c>)
 800374c:	4013      	ands	r3, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6892      	ldr	r2, [r2, #8]
 8003752:	3a01      	subs	r2, #1
 8003754:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	68d2      	ldr	r2, [r2, #12]
 800375c:	3a01      	subs	r2, #1
 800375e:	0252      	lsls	r2, r2, #9
 8003760:	b292      	uxth	r2, r2
 8003762:	4311      	orrs	r1, r2
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6912      	ldr	r2, [r2, #16]
 8003768:	3a01      	subs	r2, #1
 800376a:	0412      	lsls	r2, r2, #16
 800376c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6952      	ldr	r2, [r2, #20]
 8003776:	3a01      	subs	r2, #1
 8003778:	0612      	lsls	r2, r2, #24
 800377a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800377e:	430a      	orrs	r2, r1
 8003780:	4924      	ldr	r1, [pc, #144]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 8003782:	4313      	orrs	r3, r2
 8003784:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8003786:	4b23      	ldr	r3, [pc, #140]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 8003788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378a:	f023 020c 	bic.w	r2, r3, #12
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	4920      	ldr	r1, [pc, #128]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 8003794:	4313      	orrs	r3, r2
 8003796:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8003798:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 800379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	491c      	ldr	r1, [pc, #112]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80037a6:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	4a1a      	ldr	r2, [pc, #104]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 80037ac:	f023 0310 	bic.w	r3, r3, #16
 80037b0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80037b2:	4b18      	ldr	r3, [pc, #96]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	69d2      	ldr	r2, [r2, #28]
 80037c2:	00d2      	lsls	r2, r2, #3
 80037c4:	4913      	ldr	r1, [pc, #76]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80037ca:	4b12      	ldr	r3, [pc, #72]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 80037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ce:	4a11      	ldr	r2, [pc, #68]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 80037d0:	f043 0310 	orr.w	r3, r3, #16
 80037d4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80037d6:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 80037dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037e0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80037e2:	f7fd fa8f 	bl	8000d04 <HAL_GetTick>
 80037e6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037e8:	e008      	b.n	80037fc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80037ea:	f7fd fa8b 	bl	8000d04 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d901      	bls.n	80037fc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e006      	b.n	800380a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <RCCEx_PLL2_Config+0x128>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0f0      	beq.n	80037ea <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0

}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	46020c00 	.word	0x46020c00
 8003818:	80800000 	.word	0x80800000

0800381c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8003824:	4b47      	ldr	r3, [pc, #284]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a46      	ldr	r2, [pc, #280]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 800382a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003830:	f7fd fa68 	bl	8000d04 <HAL_GetTick>
 8003834:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003836:	e008      	b.n	800384a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003838:	f7fd fa64 	bl	8000d04 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e077      	b.n	800393a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800384a:	4b3e      	ldr	r3, [pc, #248]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8003856:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6811      	ldr	r1, [r2, #0]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6852      	ldr	r2, [r2, #4]
 800386a:	3a01      	subs	r2, #1
 800386c:	0212      	lsls	r2, r2, #8
 800386e:	430a      	orrs	r2, r1
 8003870:	4934      	ldr	r1, [pc, #208]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 8003872:	4313      	orrs	r3, r2
 8003874:	630b      	str	r3, [r1, #48]	; 0x30
 8003876:	4b33      	ldr	r3, [pc, #204]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 8003878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800387a:	4b33      	ldr	r3, [pc, #204]	; (8003948 <RCCEx_PLL3_Config+0x12c>)
 800387c:	4013      	ands	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6892      	ldr	r2, [r2, #8]
 8003882:	3a01      	subs	r2, #1
 8003884:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	68d2      	ldr	r2, [r2, #12]
 800388c:	3a01      	subs	r2, #1
 800388e:	0252      	lsls	r2, r2, #9
 8003890:	b292      	uxth	r2, r2
 8003892:	4311      	orrs	r1, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6912      	ldr	r2, [r2, #16]
 8003898:	3a01      	subs	r2, #1
 800389a:	0412      	lsls	r2, r2, #16
 800389c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80038a0:	4311      	orrs	r1, r2
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	6952      	ldr	r2, [r2, #20]
 80038a6:	3a01      	subs	r2, #1
 80038a8:	0612      	lsls	r2, r2, #24
 80038aa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80038ae:	430a      	orrs	r2, r1
 80038b0:	4924      	ldr	r1, [pc, #144]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80038b6:	4b23      	ldr	r3, [pc, #140]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 80038b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ba:	f023 020c 	bic.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	4920      	ldr	r1, [pc, #128]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80038c8:	4b1e      	ldr	r3, [pc, #120]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 80038ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	491c      	ldr	r1, [pc, #112]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80038d6:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	4a1a      	ldr	r2, [pc, #104]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 80038dc:	f023 0310 	bic.w	r3, r3, #16
 80038e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80038e2:	4b18      	ldr	r3, [pc, #96]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 80038e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	69d2      	ldr	r2, [r2, #28]
 80038f2:	00d2      	lsls	r2, r2, #3
 80038f4:	4913      	ldr	r1, [pc, #76]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4a11      	ldr	r2, [pc, #68]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 8003900:	f043 0310 	orr.w	r3, r3, #16
 8003904:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 800390c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003910:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003912:	f7fd f9f7 	bl	8000d04 <HAL_GetTick>
 8003916:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003918:	e008      	b.n	800392c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800391a:	f7fd f9f3 	bl	8000d04 <HAL_GetTick>
 800391e:	4602      	mov	r2, r0
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1ad3      	subs	r3, r2, r3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d901      	bls.n	800392c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e006      	b.n	800393a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800392c:	4b05      	ldr	r3, [pc, #20]	; (8003944 <RCCEx_PLL3_Config+0x128>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0f0      	beq.n	800391a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	46020c00 	.word	0x46020c00
 8003948:	80800000 	.word	0x80800000

0800394c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d071      	beq.n	8003a42 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd f83e 	bl	80009f4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003980:	4b32      	ldr	r3, [pc, #200]	; (8003a4c <HAL_RTC_Init+0x100>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	f003 0310 	and.w	r3, r3, #16
 8003988:	2b10      	cmp	r3, #16
 800398a:	d051      	beq.n	8003a30 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800398c:	4b2f      	ldr	r3, [pc, #188]	; (8003a4c <HAL_RTC_Init+0x100>)
 800398e:	22ca      	movs	r2, #202	; 0xca
 8003990:	625a      	str	r2, [r3, #36]	; 0x24
 8003992:	4b2e      	ldr	r3, [pc, #184]	; (8003a4c <HAL_RTC_Init+0x100>)
 8003994:	2253      	movs	r2, #83	; 0x53
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f88b 	bl	8003ab4 <RTC_EnterInitMode>
 800399e:	4603      	mov	r3, r0
 80039a0:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d13f      	bne.n	8003a28 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80039a8:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <HAL_RTC_Init+0x100>)
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	4a27      	ldr	r2, [pc, #156]	; (8003a4c <HAL_RTC_Init+0x100>)
 80039ae:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80039b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039b6:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80039b8:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <HAL_RTC_Init+0x100>)
 80039ba:	699a      	ldr	r2, [r3, #24]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	4319      	orrs	r1, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	430b      	orrs	r3, r1
 80039cc:	491f      	ldr	r1, [pc, #124]	; (8003a4c <HAL_RTC_Init+0x100>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	041b      	lsls	r3, r3, #16
 80039dc:	491b      	ldr	r1, [pc, #108]	; (8003a4c <HAL_RTC_Init+0x100>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80039e2:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <HAL_RTC_Init+0x100>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f2:	430b      	orrs	r3, r1
 80039f4:	4915      	ldr	r1, [pc, #84]	; (8003a4c <HAL_RTC_Init+0x100>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f896 	bl	8003b2c <RTC_ExitInitMode>
 8003a00:	4603      	mov	r3, r0
 8003a02:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8003a04:	7bfb      	ldrb	r3, [r7, #15]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10e      	bne.n	8003a28 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8003a0a:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <HAL_RTC_Init+0x100>)
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a19      	ldr	r1, [r3, #32]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	69db      	ldr	r3, [r3, #28]
 8003a1a:	4319      	orrs	r1, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	430b      	orrs	r3, r1
 8003a22:	490a      	ldr	r1, [pc, #40]	; (8003a4c <HAL_RTC_Init+0x100>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <HAL_RTC_Init+0x100>)
 8003a2a:	22ff      	movs	r2, #255	; 0xff
 8003a2c:	625a      	str	r2, [r3, #36]	; 0x24
 8003a2e:	e001      	b.n	8003a34 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003a30:	2300      	movs	r3, #0
 8003a32:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d103      	bne.n	8003a42 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	46007800 	.word	0x46007800

08003a50 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003a58:	4b15      	ldr	r3, [pc, #84]	; (8003ab0 <HAL_RTC_WaitForSynchro+0x60>)
 8003a5a:	68db      	ldr	r3, [r3, #12]
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <HAL_RTC_WaitForSynchro+0x60>)
 8003a5e:	f023 0320 	bic.w	r3, r3, #32
 8003a62:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003a64:	f7fd f94e 	bl	8000d04 <HAL_GetTick>
 8003a68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003a6a:	e013      	b.n	8003a94 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a6c:	f7fd f94a 	bl	8000d04 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a7a:	d90b      	bls.n	8003a94 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003a7c:	4b0c      	ldr	r3, [pc, #48]	; (8003ab0 <HAL_RTC_WaitForSynchro+0x60>)
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d10c      	bne.n	8003aa2 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2203      	movs	r2, #3
 8003a8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e008      	b.n	8003aa6 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003a94:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <HAL_RTC_WaitForSynchro+0x60>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	f003 0320 	and.w	r3, r3, #32
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0e5      	beq.n	8003a6c <HAL_RTC_WaitForSynchro+0x1c>
 8003aa0:	e000      	b.n	8003aa4 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8003aa2:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	46007800 	.word	0x46007800

08003ab4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003ac0:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <RTC_EnterInitMode+0x74>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d128      	bne.n	8003b1e <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003acc:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <RTC_EnterInitMode+0x74>)
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <RTC_EnterInitMode+0x74>)
 8003ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ad6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003ad8:	f7fd f914 	bl	8000d04 <HAL_GetTick>
 8003adc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003ade:	e013      	b.n	8003b08 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003ae0:	f7fd f910 	bl	8000d04 <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aee:	d90b      	bls.n	8003b08 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003af0:	4b0d      	ldr	r3, [pc, #52]	; (8003b28 <RTC_EnterInitMode+0x74>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10f      	bne.n	8003b1c <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2203      	movs	r2, #3
 8003b04:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003b08:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <RTC_EnterInitMode+0x74>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d104      	bne.n	8003b1e <RTC_EnterInitMode+0x6a>
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b03      	cmp	r3, #3
 8003b18:	d1e2      	bne.n	8003ae0 <RTC_EnterInitMode+0x2c>
 8003b1a:	e000      	b.n	8003b1e <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 8003b1c:	bf00      	nop
        }
      }
    }
  }

  return status;
 8003b1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	46007800 	.word	0x46007800

08003b2c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003b38:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <RTC_ExitInitMode+0x78>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a19      	ldr	r2, [pc, #100]	; (8003ba4 <RTC_ExitInitMode+0x78>)
 8003b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b42:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003b44:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <RTC_ExitInitMode+0x78>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f003 0320 	and.w	r3, r3, #32
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10c      	bne.n	8003b6a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff7d 	bl	8003a50 <HAL_RTC_WaitForSynchro>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01e      	beq.n	8003b9a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2203      	movs	r2, #3
 8003b60:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	73fb      	strb	r3, [r7, #15]
 8003b68:	e017      	b.n	8003b9a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003b6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <RTC_ExitInitMode+0x78>)
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	4a0d      	ldr	r2, [pc, #52]	; (8003ba4 <RTC_ExitInitMode+0x78>)
 8003b70:	f023 0320 	bic.w	r3, r3, #32
 8003b74:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ff6a 	bl	8003a50 <HAL_RTC_WaitForSynchro>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d005      	beq.n	8003b8e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2203      	movs	r2, #3
 8003b86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003b8e:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <RTC_ExitInitMode+0x78>)
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	4a04      	ldr	r2, [pc, #16]	; (8003ba4 <RTC_ExitInitMode+0x78>)
 8003b94:	f043 0320 	orr.w	r3, r3, #32
 8003b98:	6193      	str	r3, [r2, #24]
  }
  return status;
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	46007800 	.word	0x46007800

08003ba8 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RTCEx_SetWakeUpTimer+0x1a>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e051      	b.n	8003c66 <HAL_RTCEx_SetWakeUpTimer+0xbe>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2202      	movs	r2, #2
 8003bce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d


  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 8003bd2:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	4a26      	ldr	r2, [pc, #152]	; (8003c70 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bdc:	6193      	str	r3, [r2, #24]

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003bde:	4b24      	ldr	r3, [pc, #144]	; (8003c70 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d123      	bne.n	8003c32 <HAL_RTCEx_SetWakeUpTimer+0x8a>
  {
    tickstart = HAL_GetTick();
 8003bea:	f7fd f88b 	bl	8000d04 <HAL_GetTick>
 8003bee:	6178      	str	r0, [r7, #20]

    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8003bf0:	e017      	b.n	8003c22 <HAL_RTCEx_SetWakeUpTimer+0x7a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003bf2:	f7fd f887 	bl	8000d04 <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c00:	d90f      	bls.n	8003c22 <HAL_RTCEx_SetWakeUpTimer+0x7a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8003c02:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0304 	and.w	r3, r3, #4
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d110      	bne.n	8003c30 <HAL_RTCEx_SetWakeUpTimer+0x88>
        {

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2203      	movs	r2, #3
 8003c12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e021      	b.n	8003c66 <HAL_RTCEx_SetWakeUpTimer+0xbe>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 8003c22:	4b13      	ldr	r3, [pc, #76]	; (8003c70 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0e1      	beq.n	8003bf2 <HAL_RTCEx_SetWakeUpTimer+0x4a>
 8003c2e:	e000      	b.n	8003c32 <HAL_RTCEx_SetWakeUpTimer+0x8a>
        }
        else
        {
          break;
 8003c30:	bf00      	nop
      }
    }
  }

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8003c32:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f023 0207 	bic.w	r2, r3, #7
 8003c3a:	490d      	ldr	r1, [pc, #52]	; (8003c70 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	618b      	str	r3, [r1, #24]

  /* Configure the Wakeup Timer counter */
  WRITE_REG(RTC->WUTR, (uint32_t)WakeUpCounter);
 8003c42:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	6153      	str	r3, [r2, #20]

  /* Enable the Wakeup Timer */
  SET_BIT(RTC->CR, RTC_CR_WUTE);
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	4a08      	ldr	r2, [pc, #32]	; (8003c70 <HAL_RTCEx_SetWakeUpTimer+0xc8>)
 8003c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c52:	6193      	str	r3, [r2, #24]


  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	46007800 	.word	0x46007800

08003c74 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4910      	ldr	r1, [pc, #64]	; (8003cc8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	431a      	orrs	r2, r3
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	490c      	ldr	r1, [pc, #48]	; (8003ccc <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8003ca0:	4b0a      	ldr	r3, [pc, #40]	; (8003ccc <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	6919      	ldr	r1, [r3, #16]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	041b      	lsls	r3, r3, #16
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	4905      	ldr	r1, [pc, #20]	; (8003ccc <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	46007800 	.word	0x46007800
 8003ccc:	46007c00 	.word	0x46007c00

08003cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e049      	b.n	8003d76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f841 	bl	8003d7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4610      	mov	r0, r2
 8003d10:	f000 fa58 	bl	80041c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d86:	bf00      	nop
 8003d88:	370c      	adds	r7, #12
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
	...

08003d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d001      	beq.n	8003dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e072      	b.n	8003e92 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	68da      	ldr	r2, [r3, #12]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a35      	ldr	r2, [pc, #212]	; (8003ea0 <HAL_TIM_Base_Start_IT+0x10c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d040      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xbc>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a34      	ldr	r2, [pc, #208]	; (8003ea4 <HAL_TIM_Base_Start_IT+0x110>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d03b      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xbc>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de0:	d036      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xbc>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dea:	d031      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xbc>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a2d      	ldr	r2, [pc, #180]	; (8003ea8 <HAL_TIM_Base_Start_IT+0x114>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d02c      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xbc>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a2c      	ldr	r2, [pc, #176]	; (8003eac <HAL_TIM_Base_Start_IT+0x118>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d027      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xbc>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a2a      	ldr	r2, [pc, #168]	; (8003eb0 <HAL_TIM_Base_Start_IT+0x11c>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d022      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xbc>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a29      	ldr	r2, [pc, #164]	; (8003eb4 <HAL_TIM_Base_Start_IT+0x120>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d01d      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xbc>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a27      	ldr	r2, [pc, #156]	; (8003eb8 <HAL_TIM_Base_Start_IT+0x124>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d018      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xbc>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a26      	ldr	r2, [pc, #152]	; (8003ebc <HAL_TIM_Base_Start_IT+0x128>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d013      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xbc>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a24      	ldr	r2, [pc, #144]	; (8003ec0 <HAL_TIM_Base_Start_IT+0x12c>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d00e      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xbc>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a23      	ldr	r2, [pc, #140]	; (8003ec4 <HAL_TIM_Base_Start_IT+0x130>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d009      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xbc>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a21      	ldr	r2, [pc, #132]	; (8003ec8 <HAL_TIM_Base_Start_IT+0x134>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d004      	beq.n	8003e50 <HAL_TIM_Base_Start_IT+0xbc>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a20      	ldr	r2, [pc, #128]	; (8003ecc <HAL_TIM_Base_Start_IT+0x138>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d115      	bne.n	8003e7c <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	4b1e      	ldr	r3, [pc, #120]	; (8003ed0 <HAL_TIM_Base_Start_IT+0x13c>)
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b06      	cmp	r3, #6
 8003e60:	d015      	beq.n	8003e8e <HAL_TIM_Base_Start_IT+0xfa>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e68:	d011      	beq.n	8003e8e <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7a:	e008      	b.n	8003e8e <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e000      	b.n	8003e90 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	50012c00 	.word	0x50012c00
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	50000400 	.word	0x50000400
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	50000800 	.word	0x50000800
 8003eb8:	40000c00 	.word	0x40000c00
 8003ebc:	50000c00 	.word	0x50000c00
 8003ec0:	40013400 	.word	0x40013400
 8003ec4:	50013400 	.word	0x50013400
 8003ec8:	40014000 	.word	0x40014000
 8003ecc:	50014000 	.word	0x50014000
 8003ed0:	00010007 	.word	0x00010007

08003ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d020      	beq.n	8003f38 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d01b      	beq.n	8003f38 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0202 	mvn.w	r2, #2
 8003f08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f931 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003f24:	e005      	b.n	8003f32 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f923 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f934 	bl	800419a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d020      	beq.n	8003f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d01b      	beq.n	8003f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0204 	mvn.w	r2, #4
 8003f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f90b 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003f70:	e005      	b.n	8003f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8fd 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f90e 	bl	800419a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d020      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01b      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0208 	mvn.w	r2, #8
 8003fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8e5 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8003fbc:	e005      	b.n	8003fca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f8d7 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f8e8 	bl	800419a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d020      	beq.n	800401c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01b      	beq.n	800401c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0210 	mvn.w	r2, #16
 8003fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2208      	movs	r2, #8
 8003ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f8bf 	bl	8004186 <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8b1 	bl	8004172 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f8c2 	bl	800419a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00c      	beq.n	8004040 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0201 	mvn.w	r2, #1
 8004038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fc fc98 	bl	8000970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b00      	cmp	r3, #0
 8004048:	d104      	bne.n	8004054 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00c      	beq.n	800406e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 f9af 	bl	80043cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00c      	beq.n	8004092 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800408a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f9a7 	bl	80043e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00c      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d007      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f87c 	bl	80041ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00c      	beq.n	80040da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0320 	and.w	r3, r3, #32
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f06f 0220 	mvn.w	r2, #32
 80040d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f96f 	bl	80043b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00c      	beq.n	80040fe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d007      	beq.n	80040fe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80040f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f97b 	bl	80043f4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00c      	beq.n	8004122 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d007      	beq.n	8004122 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800411a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f973 	bl	8004408 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00c      	beq.n	8004146 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800413e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f96b 	bl	800441c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00c      	beq.n	800416a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004162:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 f963 	bl	8004430 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800416a:	bf00      	nop
 800416c:	3710      	adds	r7, #16
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004172:	b480      	push	{r7}
 8004174:	b083      	sub	sp, #12
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004186:	b480      	push	{r7}
 8004188:	b083      	sub	sp, #12
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800418e:	bf00      	nop
 8004190:	370c      	adds	r7, #12
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a68      	ldr	r2, [pc, #416]	; (8004378 <TIM_Base_SetConfig+0x1b4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d02b      	beq.n	8004234 <TIM_Base_SetConfig+0x70>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a67      	ldr	r2, [pc, #412]	; (800437c <TIM_Base_SetConfig+0x1b8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d027      	beq.n	8004234 <TIM_Base_SetConfig+0x70>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ea:	d023      	beq.n	8004234 <TIM_Base_SetConfig+0x70>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041f2:	d01f      	beq.n	8004234 <TIM_Base_SetConfig+0x70>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a62      	ldr	r2, [pc, #392]	; (8004380 <TIM_Base_SetConfig+0x1bc>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d01b      	beq.n	8004234 <TIM_Base_SetConfig+0x70>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a61      	ldr	r2, [pc, #388]	; (8004384 <TIM_Base_SetConfig+0x1c0>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d017      	beq.n	8004234 <TIM_Base_SetConfig+0x70>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a60      	ldr	r2, [pc, #384]	; (8004388 <TIM_Base_SetConfig+0x1c4>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d013      	beq.n	8004234 <TIM_Base_SetConfig+0x70>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a5f      	ldr	r2, [pc, #380]	; (800438c <TIM_Base_SetConfig+0x1c8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00f      	beq.n	8004234 <TIM_Base_SetConfig+0x70>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a5e      	ldr	r2, [pc, #376]	; (8004390 <TIM_Base_SetConfig+0x1cc>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d00b      	beq.n	8004234 <TIM_Base_SetConfig+0x70>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a5d      	ldr	r2, [pc, #372]	; (8004394 <TIM_Base_SetConfig+0x1d0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d007      	beq.n	8004234 <TIM_Base_SetConfig+0x70>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a5c      	ldr	r2, [pc, #368]	; (8004398 <TIM_Base_SetConfig+0x1d4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d003      	beq.n	8004234 <TIM_Base_SetConfig+0x70>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	4a5b      	ldr	r2, [pc, #364]	; (800439c <TIM_Base_SetConfig+0x1d8>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d108      	bne.n	8004246 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	68fa      	ldr	r2, [r7, #12]
 8004242:	4313      	orrs	r3, r2
 8004244:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a4b      	ldr	r2, [pc, #300]	; (8004378 <TIM_Base_SetConfig+0x1b4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d043      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a4a      	ldr	r2, [pc, #296]	; (800437c <TIM_Base_SetConfig+0x1b8>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d03f      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800425c:	d03b      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004264:	d037      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a45      	ldr	r2, [pc, #276]	; (8004380 <TIM_Base_SetConfig+0x1bc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d033      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a44      	ldr	r2, [pc, #272]	; (8004384 <TIM_Base_SetConfig+0x1c0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d02f      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a43      	ldr	r2, [pc, #268]	; (8004388 <TIM_Base_SetConfig+0x1c4>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d02b      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a42      	ldr	r2, [pc, #264]	; (800438c <TIM_Base_SetConfig+0x1c8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d027      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a41      	ldr	r2, [pc, #260]	; (8004390 <TIM_Base_SetConfig+0x1cc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d023      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a40      	ldr	r2, [pc, #256]	; (8004394 <TIM_Base_SetConfig+0x1d0>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d01f      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a3f      	ldr	r2, [pc, #252]	; (8004398 <TIM_Base_SetConfig+0x1d4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d01b      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a3e      	ldr	r2, [pc, #248]	; (800439c <TIM_Base_SetConfig+0x1d8>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d017      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a3d      	ldr	r2, [pc, #244]	; (80043a0 <TIM_Base_SetConfig+0x1dc>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a3c      	ldr	r2, [pc, #240]	; (80043a4 <TIM_Base_SetConfig+0x1e0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d00f      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a3b      	ldr	r2, [pc, #236]	; (80043a8 <TIM_Base_SetConfig+0x1e4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d00b      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a3a      	ldr	r2, [pc, #232]	; (80043ac <TIM_Base_SetConfig+0x1e8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d007      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a39      	ldr	r2, [pc, #228]	; (80043b0 <TIM_Base_SetConfig+0x1ec>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d003      	beq.n	80042d6 <TIM_Base_SetConfig+0x112>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a38      	ldr	r2, [pc, #224]	; (80043b4 <TIM_Base_SetConfig+0x1f0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d108      	bne.n	80042e8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <TIM_Base_SetConfig+0x1b4>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d023      	beq.n	800435c <TIM_Base_SetConfig+0x198>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a19      	ldr	r2, [pc, #100]	; (800437c <TIM_Base_SetConfig+0x1b8>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d01f      	beq.n	800435c <TIM_Base_SetConfig+0x198>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a1e      	ldr	r2, [pc, #120]	; (8004398 <TIM_Base_SetConfig+0x1d4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d01b      	beq.n	800435c <TIM_Base_SetConfig+0x198>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a1d      	ldr	r2, [pc, #116]	; (800439c <TIM_Base_SetConfig+0x1d8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d017      	beq.n	800435c <TIM_Base_SetConfig+0x198>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	4a1c      	ldr	r2, [pc, #112]	; (80043a0 <TIM_Base_SetConfig+0x1dc>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d013      	beq.n	800435c <TIM_Base_SetConfig+0x198>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a1b      	ldr	r2, [pc, #108]	; (80043a4 <TIM_Base_SetConfig+0x1e0>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d00f      	beq.n	800435c <TIM_Base_SetConfig+0x198>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a1a      	ldr	r2, [pc, #104]	; (80043a8 <TIM_Base_SetConfig+0x1e4>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00b      	beq.n	800435c <TIM_Base_SetConfig+0x198>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a19      	ldr	r2, [pc, #100]	; (80043ac <TIM_Base_SetConfig+0x1e8>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d007      	beq.n	800435c <TIM_Base_SetConfig+0x198>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a18      	ldr	r2, [pc, #96]	; (80043b0 <TIM_Base_SetConfig+0x1ec>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d003      	beq.n	800435c <TIM_Base_SetConfig+0x198>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a17      	ldr	r2, [pc, #92]	; (80043b4 <TIM_Base_SetConfig+0x1f0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d103      	bne.n	8004364 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	615a      	str	r2, [r3, #20]
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	40012c00 	.word	0x40012c00
 800437c:	50012c00 	.word	0x50012c00
 8004380:	40000400 	.word	0x40000400
 8004384:	50000400 	.word	0x50000400
 8004388:	40000800 	.word	0x40000800
 800438c:	50000800 	.word	0x50000800
 8004390:	40000c00 	.word	0x40000c00
 8004394:	50000c00 	.word	0x50000c00
 8004398:	40013400 	.word	0x40013400
 800439c:	50013400 	.word	0x50013400
 80043a0:	40014000 	.word	0x40014000
 80043a4:	50014000 	.word	0x50014000
 80043a8:	40014400 	.word	0x40014400
 80043ac:	50014400 	.word	0x50014400
 80043b0:	40014800 	.word	0x40014800
 80043b4:	50014800 	.word	0x50014800

080043b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80043fc:	bf00      	nop
 80043fe:	370c      	adds	r7, #12
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr

08004408 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b096      	sub	sp, #88	; 0x58
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
 8004450:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	3303      	adds	r3, #3
 8004456:	f023 0303 	bic.w	r3, r3, #3
 800445a:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800445c:	f3ef 8310 	mrs	r3, PRIMASK
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 8004462:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 8004464:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8004466:	b672      	cpsid	i
#endif
    return(int_posture);
 8004468:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800446a:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800446c:	4b55      	ldr	r3, [pc, #340]	; (80045c4 <_tx_byte_allocate+0x180>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8004472:	2300      	movs	r3, #0
 8004474:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800447a:	621a      	str	r2, [r3, #32]
 800447c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800447e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	f383 8810 	msr	PRIMASK, r3
}
 8004486:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f9b2 	bl	80047f4 <_tx_byte_pool_search>
 8004490:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004492:	f3ef 8310 	mrs	r3, PRIMASK
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800449a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800449c:	b672      	cpsid	i
    return(int_posture);
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80044a0:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80044a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d002      	beq.n	80044ae <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80044a8:	2301      	movs	r3, #1
 80044aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044ac:	e006      	b.n	80044bc <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d101      	bne.n	80044bc <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80044b8:	2301      	movs	r3, #1
 80044ba:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 80044bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d0d9      	beq.n	8004476 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044c6:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 80044c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d008      	beq.n	80044e0 <_tx_byte_allocate+0x9c>
 80044ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	f383 8810 	msr	PRIMASK, r3
}
 80044d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 80044da:	2300      	movs	r3, #0
 80044dc:	653b      	str	r3, [r7, #80]	; 0x50
 80044de:	e06c      	b.n	80045ba <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d061      	beq.n	80045aa <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80044e6:	4b38      	ldr	r3, [pc, #224]	; (80045c8 <_tx_byte_allocate+0x184>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 80044ee:	2310      	movs	r3, #16
 80044f0:	653b      	str	r3, [r7, #80]	; 0x50
 80044f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f383 8810 	msr	PRIMASK, r3
}
 80044fc:	e05d      	b.n	80045ba <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 80044fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004500:	4a32      	ldr	r2, [pc, #200]	; (80045cc <_tx_byte_allocate+0x188>)
 8004502:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8004504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800450a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8004510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8004516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004518:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800451c:	1c5a      	adds	r2, r3, #1
 800451e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004520:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8004534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800453e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8004540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004544:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8004546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800454a:	675a      	str	r2, [r3, #116]	; 0x74
 800454c:	e011      	b.n	8004572 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8004554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004556:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004558:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800455a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455e:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8004560:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004562:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004564:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8004566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800456a:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800456c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800456e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004570:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8004572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004574:	2209      	movs	r2, #9
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004578:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800457a:	2201      	movs	r2, #1
 800457c:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800457e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8004584:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <_tx_byte_allocate+0x184>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	3301      	adds	r3, #1
 800458a:	4a0f      	ldr	r2, [pc, #60]	; (80045c8 <_tx_byte_allocate+0x184>)
 800458c:	6013      	str	r3, [r2, #0]
 800458e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004590:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	f383 8810 	msr	PRIMASK, r3
}
 8004598:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800459a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800459c:	f000 ff56 	bl	800544c <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80045a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a6:	653b      	str	r3, [r7, #80]	; 0x50
 80045a8:	e007      	b.n	80045ba <_tx_byte_allocate+0x176>
 80045aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f383 8810 	msr	PRIMASK, r3
}
 80045b4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 80045b6:	2310      	movs	r3, #16
 80045b8:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 80045ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3758      	adds	r7, #88	; 0x58
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20000de4 	.word	0x20000de4
 80045c8:	20000e7c 	.word	0x20000e7c
 80045cc:	080045d1 	.word	0x080045d1

080045d0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08e      	sub	sp, #56	; 0x38
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80045da:	f3ef 8310 	mrs	r3, PRIMASK
 80045de:	623b      	str	r3, [r7, #32]
    return(posture);
 80045e0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80045e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80045e4:	b672      	cpsid	i
    return(int_posture);
 80045e6:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 80045e8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ee:	4a33      	ldr	r2, [pc, #204]	; (80046bc <_tx_byte_pool_cleanup+0xec>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d158      	bne.n	80046a6 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d152      	bne.n	80046a6 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004604:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8004606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004608:	2b00      	cmp	r3, #0
 800460a:	d04c      	beq.n	80046a6 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a2b      	ldr	r2, [pc, #172]	; (80046c0 <_tx_byte_pool_cleanup+0xf0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d147      	bne.n	80046a6 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461a:	2b00      	cmp	r3, #0
 800461c:	d043      	beq.n	80046a6 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	1e5a      	subs	r2, r3, #1
 800462a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800462c:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8004634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	2200      	movs	r2, #0
 800463e:	625a      	str	r2, [r3, #36]	; 0x24
 8004640:	e013      	b.n	800466a <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800464e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004652:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8004654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004656:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004658:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800465a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800465c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d102      	bne.n	800466a <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8004664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004668:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466e:	2b09      	cmp	r3, #9
 8004670:	d119      	bne.n	80046a6 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2210      	movs	r2, #16
 8004676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800467a:	4b12      	ldr	r3, [pc, #72]	; (80046c4 <_tx_byte_pool_cleanup+0xf4>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	3301      	adds	r3, #1
 8004680:	4a10      	ldr	r2, [pc, #64]	; (80046c4 <_tx_byte_pool_cleanup+0xf4>)
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004686:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f383 8810 	msr	PRIMASK, r3
}
 800468e:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fddb 	bl	800524c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004696:	f3ef 8310 	mrs	r3, PRIMASK
 800469a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800469c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800469e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80046a0:	b672      	cpsid	i
    return(int_posture);
 80046a2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80046a4:	637b      	str	r3, [r7, #52]	; 0x34
 80046a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f383 8810 	msr	PRIMASK, r3
}
 80046b0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80046b2:	bf00      	nop
 80046b4:	3738      	adds	r7, #56	; 0x38
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	080045d1 	.word	0x080045d1
 80046c0:	42595445 	.word	0x42595445
 80046c4:	20000e7c 	.word	0x20000e7c

080046c8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08e      	sub	sp, #56	; 0x38
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80046d6:	2234      	movs	r2, #52	; 0x34
 80046d8:	2100      	movs	r1, #0
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f001 ff32 	bl	8006544 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	f023 0303 	bic.w	r3, r3, #3
 80046e6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f1a3 0208 	sub.w	r2, r3, #8
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2202      	movs	r2, #2
 8004714:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800471a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	4413      	add	r3, r2
 8004720:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8004722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004724:	3b04      	subs	r3, #4
 8004726:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800472c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800472e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004734:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8004736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004738:	3b04      	subs	r3, #4
 800473a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800473c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800474e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004752:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8004758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800475a:	3304      	adds	r3, #4
 800475c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800475e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	4a1f      	ldr	r2, [pc, #124]	; (80047e4 <_tx_byte_pool_create+0x11c>)
 8004766:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800476e:	f3ef 8310 	mrs	r3, PRIMASK
 8004772:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004774:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004776:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004778:	b672      	cpsid	i
    return(int_posture);
 800477a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800477c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a19      	ldr	r2, [pc, #100]	; (80047e8 <_tx_byte_pool_create+0x120>)
 8004782:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8004784:	4b19      	ldr	r3, [pc, #100]	; (80047ec <_tx_byte_pool_create+0x124>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d109      	bne.n	80047a0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800478c:	4a18      	ldr	r2, [pc, #96]	; (80047f0 <_tx_byte_pool_create+0x128>)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	631a      	str	r2, [r3, #48]	; 0x30
 800479e:	e011      	b.n	80047c4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80047a0:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <_tx_byte_pool_create+0x128>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	68fa      	ldr	r2, [r7, #12]
 80047b6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	69fa      	ldr	r2, [r7, #28]
 80047bc:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a3a      	ldr	r2, [r7, #32]
 80047c2:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80047c4:	4b09      	ldr	r3, [pc, #36]	; (80047ec <_tx_byte_pool_create+0x124>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3301      	adds	r3, #1
 80047ca:	4a08      	ldr	r2, [pc, #32]	; (80047ec <_tx_byte_pool_create+0x124>)
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	f383 8810 	msr	PRIMASK, r3
}
 80047d8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3738      	adds	r7, #56	; 0x38
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	ffffeeee 	.word	0xffffeeee
 80047e8:	42595445 	.word	0x42595445
 80047ec:	20000dd8 	.word	0x20000dd8
 80047f0:	20000dd4 	.word	0x20000dd4

080047f4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b097      	sub	sp, #92	; 0x5c
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80047fe:	2300      	movs	r3, #0
 8004800:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004802:	f3ef 8310 	mrs	r3, PRIMASK
 8004806:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8004808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800480a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800480c:	b672      	cpsid	i
    return(int_posture);
 800480e:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8004810:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	3b02      	subs	r3, #2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	4413      	add	r3, r2
 8004820:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004826:	429a      	cmp	r2, r3
 8004828:	d308      	bcc.n	800483c <_tx_byte_pool_search+0x48>
 800482a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800482c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f383 8810 	msr	PRIMASK, r3
}
 8004834:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8004836:	2300      	movs	r3, #0
 8004838:	653b      	str	r3, [r7, #80]	; 0x50
 800483a:	e0dd      	b.n	80049f8 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800483c:	4b72      	ldr	r3, [pc, #456]	; (8004a08 <_tx_byte_pool_search+0x214>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004846:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	3301      	adds	r3, #1
 8004854:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8004856:	2300      	movs	r3, #0
 8004858:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485c:	3304      	adds	r3, #4
 800485e:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8004860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004862:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8004864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a68      	ldr	r2, [pc, #416]	; (8004a0c <_tx_byte_pool_search+0x218>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d143      	bne.n	80048f6 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800486e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004878:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800487a:	2301      	movs	r3, #1
 800487c:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800487e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004880:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8004888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800488a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8004890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004892:	3b08      	subs	r3, #8
 8004894:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8004896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d257      	bcs.n	800494e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800489e:	2300      	movs	r3, #0
 80048a0:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80048a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a4:	3304      	adds	r3, #4
 80048a6:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80048a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048aa:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80048ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a56      	ldr	r2, [pc, #344]	; (8004a0c <_tx_byte_pool_search+0x218>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d113      	bne.n	80048de <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	1e5a      	subs	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d114      	bne.n	8004900 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048da:	615a      	str	r2, [r3, #20]
 80048dc:	e010      	b.n	8004900 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80048de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e0:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80048e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 80048ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f0:	3b01      	subs	r3, #1
 80048f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048f4:	e004      	b.n	8004900 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80048f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048f8:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8004900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8004906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004908:	3b01      	subs	r3, #1
 800490a:	64bb      	str	r3, [r7, #72]	; 0x48
 800490c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800490e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	f383 8810 	msr	PRIMASK, r3
}
 8004916:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004918:	f3ef 8310 	mrs	r3, PRIMASK
 800491c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800491e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004920:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004922:	b672      	cpsid	i
    return(int_posture);
 8004924:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8004926:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800492e:	429a      	cmp	r2, r3
 8004930:	d009      	beq.n	8004946 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	3301      	adds	r3, #1
 800493e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004944:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8004946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004948:	2b00      	cmp	r3, #0
 800494a:	d186      	bne.n	800485a <_tx_byte_pool_search+0x66>
 800494c:	e000      	b.n	8004950 <_tx_byte_pool_search+0x15c>
                    break;
 800494e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8004950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d048      	beq.n	80049e8 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8004956:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	1ad3      	subs	r3, r2, r3
 800495c:	2b13      	cmp	r3, #19
 800495e:	d91e      	bls.n	800499e <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	3308      	adds	r3, #8
 8004964:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004966:	4413      	add	r3, r2
 8004968:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800496e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004978:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	3304      	adds	r3, #4
 800497e:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8004980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004982:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 8004984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004986:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <_tx_byte_pool_search+0x218>)
 8004988:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	1c5a      	adds	r2, r3, #1
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 8004994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004996:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004998:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800499e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a0:	3304      	adds	r3, #4
 80049a2:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f1a3 0208 	sub.w	r2, r3, #8
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d105      	bne.n	80049d4 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80049c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049ca:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 80049cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	615a      	str	r2, [r3, #20]
 80049d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f383 8810 	msr	PRIMASK, r3
}
 80049de:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80049e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049e2:	3308      	adds	r3, #8
 80049e4:	653b      	str	r3, [r7, #80]	; 0x50
 80049e6:	e007      	b.n	80049f8 <_tx_byte_pool_search+0x204>
 80049e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ea:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	f383 8810 	msr	PRIMASK, r3
}
 80049f2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80049f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	375c      	adds	r7, #92	; 0x5c
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20000de4 	.word	0x20000de4
 8004a0c:	ffffeeee 	.word	0xffffeeee

08004a10 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8004a14:	f000 fb58 	bl	80050c8 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8004a18:	f000 fefe 	bl	8005818 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8004a1c:	4b12      	ldr	r3, [pc, #72]	; (8004a68 <_tx_initialize_high_level+0x58>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <_tx_initialize_high_level+0x5c>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8004a28:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <_tx_initialize_high_level+0x60>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	4b11      	ldr	r3, [pc, #68]	; (8004a74 <_tx_initialize_high_level+0x64>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8004a34:	4b10      	ldr	r3, [pc, #64]	; (8004a78 <_tx_initialize_high_level+0x68>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	4b10      	ldr	r3, [pc, #64]	; (8004a7c <_tx_initialize_high_level+0x6c>)
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8004a40:	4b0f      	ldr	r3, [pc, #60]	; (8004a80 <_tx_initialize_high_level+0x70>)
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <_tx_initialize_high_level+0x74>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8004a4c:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <_tx_initialize_high_level+0x78>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <_tx_initialize_high_level+0x7c>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <_tx_initialize_high_level+0x80>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <_tx_initialize_high_level+0x84>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
#endif
}
 8004a64:	bf00      	nop
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	20000dac 	.word	0x20000dac
 8004a6c:	20000db0 	.word	0x20000db0
 8004a70:	20000db4 	.word	0x20000db4
 8004a74:	20000db8 	.word	0x20000db8
 8004a78:	20000dbc 	.word	0x20000dbc
 8004a7c:	20000dc0 	.word	0x20000dc0
 8004a80:	20000dcc 	.word	0x20000dcc
 8004a84:	20000dd0 	.word	0x20000dd0
 8004a88:	20000dd4 	.word	0x20000dd4
 8004a8c:	20000dd8 	.word	0x20000dd8
 8004a90:	20000dc4 	.word	0x20000dc4
 8004a94:	20000dc8 	.word	0x20000dc8

08004a98 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8004a9c:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <_tx_initialize_kernel_enter+0x48>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8004aa4:	d00c      	beq.n	8004ac0 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <_tx_initialize_kernel_enter+0x48>)
 8004aa8:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004aac:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8004aae:	f7fb fbe3 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8004ab2:	f7ff ffad 	bl	8004a10 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <_tx_initialize_kernel_enter+0x4c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	3301      	adds	r3, #1
 8004abc:	4a09      	ldr	r2, [pc, #36]	; (8004ae4 <_tx_initialize_kernel_enter+0x4c>)
 8004abe:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8004ac0:	4b07      	ldr	r3, [pc, #28]	; (8004ae0 <_tx_initialize_kernel_enter+0x48>)
 8004ac2:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8004ac6:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8004ac8:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <_tx_initialize_kernel_enter+0x50>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fb fcf9 	bl	80004c4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8004ad2:	4b03      	ldr	r3, [pc, #12]	; (8004ae0 <_tx_initialize_kernel_enter+0x48>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8004ad8:	f7fb fc0a 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8004adc:	bf00      	nop
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	2000000c 	.word	0x2000000c
 8004ae4:	20000e7c 	.word	0x20000e7c
 8004ae8:	20000ddc 	.word	0x20000ddc

08004aec <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b08e      	sub	sp, #56	; 0x38
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004af6:	f3ef 8310 	mrs	r3, PRIMASK
 8004afa:	623b      	str	r3, [r7, #32]
    return(posture);
 8004afc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8004afe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004b00:	b672      	cpsid	i
    return(int_posture);
 8004b02:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8004b04:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b0a:	4a33      	ldr	r2, [pc, #204]	; (8004bd8 <_tx_semaphore_cleanup+0xec>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d158      	bne.n	8004bc2 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d152      	bne.n	8004bc2 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b20:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d04c      	beq.n	8004bc2 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a2b      	ldr	r2, [pc, #172]	; (8004bdc <_tx_semaphore_cleanup+0xf0>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d147      	bne.n	8004bc2 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8004b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d043      	beq.n	8004bc2 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	1e5a      	subs	r2, r3, #1
 8004b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b48:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8004b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d103      	bne.n	8004b5e <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	2200      	movs	r2, #0
 8004b5a:	60da      	str	r2, [r3, #12]
 8004b5c:	e013      	b.n	8004b86 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b68:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8004b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b74:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8004b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d102      	bne.n	8004b86 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8004b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b84:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	2b06      	cmp	r3, #6
 8004b8c:	d119      	bne.n	8004bc2 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	220d      	movs	r2, #13
 8004b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8004b96:	4b12      	ldr	r3, [pc, #72]	; (8004be0 <_tx_semaphore_cleanup+0xf4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	4a10      	ldr	r2, [pc, #64]	; (8004be0 <_tx_semaphore_cleanup+0xf4>)
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f383 8810 	msr	PRIMASK, r3
}
 8004baa:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fb4d 	bl	800524c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb6:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004bb8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004bba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004bbc:	b672      	cpsid	i
    return(int_posture);
 8004bbe:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f383 8810 	msr	PRIMASK, r3
}
 8004bcc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8004bce:	bf00      	nop
 8004bd0:	3738      	adds	r7, #56	; 0x38
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	08004aed 	.word	0x08004aed
 8004bdc:	53454d41 	.word	0x53454d41
 8004be0:	20000e7c 	.word	0x20000e7c

08004be4 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b08a      	sub	sp, #40	; 0x28
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8004bf0:	221c      	movs	r2, #28
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f001 fca5 	bl	8006544 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004c06:	f3ef 8310 	mrs	r3, PRIMASK
 8004c0a:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004c0c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004c0e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004c10:	b672      	cpsid	i
    return(int_posture);
 8004c12:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8004c14:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	4a18      	ldr	r2, [pc, #96]	; (8004c7c <_tx_semaphore_create+0x98>)
 8004c1a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8004c1c:	4b18      	ldr	r3, [pc, #96]	; (8004c80 <_tx_semaphore_create+0x9c>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d109      	bne.n	8004c38 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8004c24:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <_tx_semaphore_create+0xa0>)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	619a      	str	r2, [r3, #24]
 8004c36:	e011      	b.n	8004c5c <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8004c38:	4b12      	ldr	r3, [pc, #72]	; (8004c84 <_tx_semaphore_create+0xa0>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8004c44:	6a3b      	ldr	r3, [r7, #32]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a3a      	ldr	r2, [r7, #32]
 8004c5a:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8004c5c:	4b08      	ldr	r3, [pc, #32]	; (8004c80 <_tx_semaphore_create+0x9c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	3301      	adds	r3, #1
 8004c62:	4a07      	ldr	r2, [pc, #28]	; (8004c80 <_tx_semaphore_create+0x9c>)
 8004c64:	6013      	str	r3, [r2, #0]
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f383 8810 	msr	PRIMASK, r3
}
 8004c70:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3728      	adds	r7, #40	; 0x28
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	53454d41 	.word	0x53454d41
 8004c80:	20000db0 	.word	0x20000db0
 8004c84:	20000dac 	.word	0x20000dac

08004c88 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08e      	sub	sp, #56	; 0x38
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8004c92:	2300      	movs	r3, #0
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004c96:	f3ef 8310 	mrs	r3, PRIMASK
 8004c9a:	623b      	str	r3, [r7, #32]
    return(posture);
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8004c9e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004ca0:	b672      	cpsid	i
    return(int_posture);
 8004ca2:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 8004ca4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00a      	beq.n	8004cc4 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	1e5a      	subs	r2, r3, #1
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	f383 8810 	msr	PRIMASK, r3
}
 8004cc2:	e068      	b.n	8004d96 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d05d      	beq.n	8004d86 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8004cca:	4b35      	ldr	r3, [pc, #212]	; (8004da0 <_tx_semaphore_get+0x118>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d008      	beq.n	8004ce4 <_tx_semaphore_get+0x5c>
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8004cde:	230d      	movs	r3, #13
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ce2:	e058      	b.n	8004d96 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8004ce4:	4b2f      	ldr	r3, [pc, #188]	; (8004da4 <_tx_semaphore_get+0x11c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8004cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cec:	4a2e      	ldr	r2, [pc, #184]	; (8004da8 <_tx_semaphore_get+0x120>)
 8004cee:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8004cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d109      	bne.n	8004d20 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d10:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8004d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d16:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8004d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d1c:	675a      	str	r2, [r3, #116]	; 0x74
 8004d1e:	e011      	b.n	8004d44 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d2a:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8004d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d36:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3c:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d42:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	1c5a      	adds	r2, r3, #1
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	2206      	movs	r2, #6
 8004d52:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	2201      	movs	r2, #1
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8004d60:	4b0f      	ldr	r3, [pc, #60]	; (8004da0 <_tx_semaphore_get+0x118>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	3301      	adds	r3, #1
 8004d66:	4a0e      	ldr	r2, [pc, #56]	; (8004da0 <_tx_semaphore_get+0x118>)
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	f383 8810 	msr	PRIMASK, r3
}
 8004d74:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8004d76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d78:	f000 fb68 	bl	800544c <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8004d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d82:	637b      	str	r3, [r7, #52]	; 0x34
 8004d84:	e007      	b.n	8004d96 <_tx_semaphore_get+0x10e>
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f383 8810 	msr	PRIMASK, r3
}
 8004d90:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 8004d92:	230d      	movs	r3, #13
 8004d94:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8004d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3738      	adds	r7, #56	; 0x38
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000e7c 	.word	0x20000e7c
 8004da4:	20000de4 	.word	0x20000de4
 8004da8:	08004aed 	.word	0x08004aed

08004dac <_tx_semaphore_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value,
                    TX_THREAD **first_suspended, ULONG *suspended_count,
                    TX_SEMAPHORE **next_semaphore)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b089      	sub	sp, #36	; 0x24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004dba:	f3ef 8310 	mrs	r3, PRIMASK
 8004dbe:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004dc0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004dc2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004dc4:	b672      	cpsid	i
    return(int_posture);
 8004dc6:	697b      	ldr	r3, [r7, #20]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 8004dc8:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the semaphore.  */
    if (name != TX_NULL)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d003      	beq.n	8004dd8 <_tx_semaphore_info_get+0x2c>
    {

        *name =  semaphore_ptr -> tx_semaphore_name;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the current value of the semaphore.  */
    if (current_value != TX_NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d003      	beq.n	8004de6 <_tx_semaphore_info_get+0x3a>
    {

        *current_value =  semaphore_ptr -> tx_semaphore_count;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689a      	ldr	r2, [r3, #8]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the first thread suspended on this semaphore.  */
    if (first_suspended != TX_NULL)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <_tx_semaphore_info_get+0x48>
    {

        *first_suspended =  semaphore_ptr -> tx_semaphore_suspension_list;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the number of threads suspended on this semaphore.  */
    if (suspended_count != TX_NULL)
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <_tx_semaphore_info_get+0x56>
    {

        *suspended_count =  (ULONG) semaphore_ptr -> tx_semaphore_suspended_count;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e00:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve the pointer to the next semaphore created.  */
    if (next_semaphore != TX_NULL)
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d003      	beq.n	8004e10 <_tx_semaphore_info_get+0x64>
    {

        *next_semaphore =  semaphore_ptr -> tx_semaphore_created_next;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	f383 8810 	msr	PRIMASK, r3
}
 8004e1a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3724      	adds	r7, #36	; 0x24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
	...

08004e2c <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08c      	sub	sp, #48	; 0x30
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004e34:	f3ef 8310 	mrs	r3, PRIMASK
 8004e38:	61bb      	str	r3, [r7, #24]
    return(posture);
 8004e3a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8004e3c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8004e3e:	b672      	cpsid	i
    return(int_posture);
 8004e40:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	609a      	str	r2, [r3, #8]
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f383 8810 	msr	PRIMASK, r3
}
 8004e64:	e033      	b.n	8004ece <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d103      	bne.n	8004e80 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	60da      	str	r2, [r3, #12]
 8004e7e:	e00e      	b.n	8004e9e <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e84:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a3a      	ldr	r2, [r7, #32]
 8004e8a:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8004e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e90:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	69fa      	ldr	r2, [r7, #28]
 8004e96:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	6a3a      	ldr	r2, [r7, #32]
 8004e9c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea2:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	2200      	movs	r2, #0
 8004eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8004eb2:	4b09      	ldr	r3, [pc, #36]	; (8004ed8 <_tx_semaphore_put+0xac>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	4a07      	ldr	r2, [pc, #28]	; (8004ed8 <_tx_semaphore_put+0xac>)
 8004eba:	6013      	str	r3, [r2, #0]
 8004ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ebe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f383 8810 	msr	PRIMASK, r3
}
 8004ec6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8004ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eca:	f000 f9bf 	bl	800524c <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3730      	adds	r7, #48	; 0x30
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20000e7c 	.word	0x20000e7c

08004edc <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b092      	sub	sp, #72	; 0x48
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
 8004ee8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8004eea:	2300      	movs	r3, #0
 8004eec:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8004eee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ef0:	21ef      	movs	r1, #239	; 0xef
 8004ef2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004ef4:	f001 fb26 	bl	8006544 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8004ef8:	22b0      	movs	r2, #176	; 0xb0
 8004efa:	2100      	movs	r1, #0
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f001 fb21 	bl	8006544 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004f18:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004f1e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f24:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f2a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f32:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f38:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8004f42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f44:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8004f46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f4c:	4413      	add	r3, r2
 8004f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f54:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8004f56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d007      	beq.n	8004f6e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004f6c:	e006      	b.n	8004f7c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f72:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f78:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2203      	movs	r2, #3
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4a48      	ldr	r2, [pc, #288]	; (80050a8 <_tx_thread_create+0x1cc>)
 8004f86:	655a      	str	r2, [r3, #84]	; 0x54
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8004f8e:	4947      	ldr	r1, [pc, #284]	; (80050ac <_tx_thread_create+0x1d0>)
 8004f90:	68f8      	ldr	r0, [r7, #12]
 8004f92:	f7fb fa1b 	bl	80003cc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8004f96:	f3ef 8310 	mrs	r3, PRIMASK
 8004f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8004fa0:	b672      	cpsid	i
    return(int_posture);
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8004fa4:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	4a41      	ldr	r2, [pc, #260]	; (80050b0 <_tx_thread_create+0x1d4>)
 8004faa:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8004fac:	4b41      	ldr	r3, [pc, #260]	; (80050b4 <_tx_thread_create+0x1d8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10b      	bne.n	8004fcc <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8004fb4:	4a40      	ldr	r2, [pc, #256]	; (80050b8 <_tx_thread_create+0x1dc>)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004fca:	e016      	b.n	8004ffa <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8004fcc:	4b3a      	ldr	r3, [pc, #232]	; (80050b8 <_tx_thread_create+0x1dc>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8004fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8004fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ff6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8004ffa:	4b2e      	ldr	r3, [pc, #184]	; (80050b4 <_tx_thread_create+0x1d8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3301      	adds	r3, #1
 8005000:	4a2c      	ldr	r2, [pc, #176]	; (80050b4 <_tx_thread_create+0x1d8>)
 8005002:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8005004:	4b2d      	ldr	r3, [pc, #180]	; (80050bc <_tx_thread_create+0x1e0>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3301      	adds	r3, #1
 800500a:	4a2c      	ldr	r2, [pc, #176]	; (80050bc <_tx_thread_create+0x1e0>)
 800500c:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800500e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005010:	2b01      	cmp	r3, #1
 8005012:	d129      	bne.n	8005068 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005014:	f3ef 8305 	mrs	r3, IPSR
 8005018:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800501a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800501c:	4b28      	ldr	r3, [pc, #160]	; (80050c0 <_tx_thread_create+0x1e4>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4313      	orrs	r3, r2
 8005022:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005026:	d30d      	bcc.n	8005044 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8005028:	4b26      	ldr	r3, [pc, #152]	; (80050c4 <_tx_thread_create+0x1e8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800502e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005030:	2b00      	cmp	r3, #0
 8005032:	d009      	beq.n	8005048 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8005034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005038:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800503a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800503c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005040:	63da      	str	r2, [r3, #60]	; 0x3c
 8005042:	e001      	b.n	8005048 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8005044:	2300      	movs	r3, #0
 8005046:	647b      	str	r3, [r7, #68]	; 0x44
 8005048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800504a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800504c:	6a3b      	ldr	r3, [r7, #32]
 800504e:	f383 8810 	msr	PRIMASK, r3
}
 8005052:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f8f9 	bl	800524c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800505a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01e      	beq.n	800509e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8005060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005064:	63da      	str	r2, [r3, #60]	; 0x3c
 8005066:	e01a      	b.n	800509e <_tx_thread_create+0x1c2>
 8005068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f383 8810 	msr	PRIMASK, r3
}
 8005072:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005074:	f3ef 8310 	mrs	r3, PRIMASK
 8005078:	61bb      	str	r3, [r7, #24]
    return(posture);
 800507a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800507c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800507e:	b672      	cpsid	i
    return(int_posture);
 8005080:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8005082:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8005084:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <_tx_thread_create+0x1e0>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	3b01      	subs	r3, #1
 800508a:	4a0c      	ldr	r2, [pc, #48]	; (80050bc <_tx_thread_create+0x1e0>)
 800508c:	6013      	str	r3, [r2, #0]
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	f383 8810 	msr	PRIMASK, r3
}
 8005098:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800509a:	f000 f89d 	bl	80051d8 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800509e:	2300      	movs	r3, #0
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3748      	adds	r7, #72	; 0x48
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	08005721 	.word	0x08005721
 80050ac:	08005141 	.word	0x08005141
 80050b0:	54485244 	.word	0x54485244
 80050b4:	20000df0 	.word	0x20000df0
 80050b8:	20000dec 	.word	0x20000dec
 80050bc:	20000e7c 	.word	0x20000e7c
 80050c0:	2000000c 	.word	0x2000000c
 80050c4:	20000de8 	.word	0x20000de8

080050c8 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80050cc:	4b12      	ldr	r3, [pc, #72]	; (8005118 <_tx_thread_initialize+0x50>)
 80050ce:	2200      	movs	r2, #0
 80050d0:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80050d2:	4b12      	ldr	r3, [pc, #72]	; (800511c <_tx_thread_initialize+0x54>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	4b11      	ldr	r3, [pc, #68]	; (8005120 <_tx_thread_initialize+0x58>)
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80050de:	4b11      	ldr	r3, [pc, #68]	; (8005124 <_tx_thread_initialize+0x5c>)
 80050e0:	2220      	movs	r2, #32
 80050e2:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80050e4:	2280      	movs	r2, #128	; 0x80
 80050e6:	2100      	movs	r1, #0
 80050e8:	480f      	ldr	r0, [pc, #60]	; (8005128 <_tx_thread_initialize+0x60>)
 80050ea:	f001 fa2b 	bl	8006544 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80050ee:	4b0f      	ldr	r3, [pc, #60]	; (800512c <_tx_thread_initialize+0x64>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80050f4:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <_tx_thread_initialize+0x68>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80050fa:	4b0e      	ldr	r3, [pc, #56]	; (8005134 <_tx_thread_initialize+0x6c>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8005100:	4b0d      	ldr	r3, [pc, #52]	; (8005138 <_tx_thread_initialize+0x70>)
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8005106:	4b0d      	ldr	r3, [pc, #52]	; (800513c <_tx_thread_initialize+0x74>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800510e:	4a0b      	ldr	r2, [pc, #44]	; (800513c <_tx_thread_initialize+0x74>)
 8005110:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000de4 	.word	0x20000de4
 800511c:	20000de8 	.word	0x20000de8
 8005120:	20000df4 	.word	0x20000df4
 8005124:	20000df8 	.word	0x20000df8
 8005128:	20000dfc 	.word	0x20000dfc
 800512c:	20000dec 	.word	0x20000dec
 8005130:	20000df0 	.word	0x20000df0
 8005134:	20000e7c 	.word	0x20000e7c
 8005138:	20000e80 	.word	0x20000e80
 800513c:	20000e84 	.word	0x20000e84

08005140 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b088      	sub	sp, #32
 8005144:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8005146:	4b21      	ldr	r3, [pc, #132]	; (80051cc <_tx_thread_shell_entry+0x8c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005150:	69fa      	ldr	r2, [r7, #28]
 8005152:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005154:	4610      	mov	r0, r2
 8005156:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8005158:	4b1d      	ldr	r3, [pc, #116]	; (80051d0 <_tx_thread_shell_entry+0x90>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8005160:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <_tx_thread_shell_entry+0x90>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69f8      	ldr	r0, [r7, #28]
 8005166:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005168:	f3ef 8310 	mrs	r3, PRIMASK
 800516c:	607b      	str	r3, [r7, #4]
    return(posture);
 800516e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8005170:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005172:	b672      	cpsid	i
    return(int_posture);
 8005174:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8005176:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	2201      	movs	r2, #1
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	2201      	movs	r2, #1
 8005182:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	2200      	movs	r2, #0
 8005188:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800518a:	4b12      	ldr	r3, [pc, #72]	; (80051d4 <_tx_thread_shell_entry+0x94>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	3301      	adds	r3, #1
 8005190:	4a10      	ldr	r2, [pc, #64]	; (80051d4 <_tx_thread_shell_entry+0x94>)
 8005192:	6013      	str	r3, [r2, #0]
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f383 8810 	msr	PRIMASK, r3
}
 800519e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80051a0:	f3ef 8314 	mrs	r3, CONTROL
 80051a4:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80051a6:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f023 0304 	bic.w	r3, r3, #4
 80051b0:	617b      	str	r3, [r7, #20]
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f383 8814 	msr	CONTROL, r3
}
 80051bc:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80051be:	69f8      	ldr	r0, [r7, #28]
 80051c0:	f000 f944 	bl	800544c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80051c4:	bf00      	nop
 80051c6:	3720      	adds	r7, #32
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20000de4 	.word	0x20000de4
 80051d0:	20000e80 	.word	0x20000e80
 80051d4:	20000e7c 	.word	0x20000e7c

080051d8 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80051d8:	b480      	push	{r7}
 80051da:	b089      	sub	sp, #36	; 0x24
 80051dc:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80051de:	4b17      	ldr	r3, [pc, #92]	; (800523c <_tx_thread_system_preempt_check+0x64>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d121      	bne.n	800522e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80051ea:	4b15      	ldr	r3, [pc, #84]	; (8005240 <_tx_thread_system_preempt_check+0x68>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80051f0:	4b14      	ldr	r3, [pc, #80]	; (8005244 <_tx_thread_system_preempt_check+0x6c>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80051f6:	69ba      	ldr	r2, [r7, #24]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d017      	beq.n	800522e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80051fe:	4b12      	ldr	r3, [pc, #72]	; (8005248 <_tx_thread_system_preempt_check+0x70>)
 8005200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005204:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005206:	f3ef 8305 	mrs	r3, IPSR
 800520a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800520c:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10c      	bne.n	800522c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005212:	f3ef 8310 	mrs	r3, PRIMASK
 8005216:	60fb      	str	r3, [r7, #12]
    return(posture);
 8005218:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800521a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800521c:	b662      	cpsie	i
}
 800521e:	bf00      	nop
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f383 8810 	msr	PRIMASK, r3
}
 800522a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800522c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800522e:	bf00      	nop
 8005230:	3724      	adds	r7, #36	; 0x24
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	20000e7c 	.word	0x20000e7c
 8005240:	20000de4 	.word	0x20000de4
 8005244:	20000de8 	.word	0x20000de8
 8005248:	e000ed04 	.word	0xe000ed04

0800524c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b096      	sub	sp, #88	; 0x58
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005254:	f3ef 8310 	mrs	r3, PRIMASK
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800525a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800525c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800525e:	b672      	cpsid	i
    return(int_posture);
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8005262:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	334c      	adds	r3, #76	; 0x4c
 8005270:	4618      	mov	r0, r3
 8005272:	f000 fbaf 	bl	80059d4 <_tx_timer_system_deactivate>
 8005276:	e002      	b.n	800527e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800527e:	4b6c      	ldr	r3, [pc, #432]	; (8005430 <_tx_thread_system_resume+0x1e4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3b01      	subs	r3, #1
 8005284:	4a6a      	ldr	r2, [pc, #424]	; (8005430 <_tx_thread_system_resume+0x1e4>)
 8005286:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	2b00      	cmp	r3, #0
 800528e:	f040 8083 	bne.w	8005398 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 8097 	beq.w	80053ca <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d172      	bne.n	800538a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 80052b0:	4a60      	ldr	r2, [pc, #384]	; (8005434 <_tx_thread_system_resume+0x1e8>)
 80052b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052b8:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 80052ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d154      	bne.n	800536a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80052c0:	495c      	ldr	r1, [pc, #368]	; (8005434 <_tx_thread_system_resume+0x1e8>)
 80052c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	687a      	ldr	r2, [r7, #4]
 80052d4:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80052d6:	2201      	movs	r2, #1
 80052d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052da:	fa02 f303 	lsl.w	r3, r2, r3
 80052de:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80052e0:	4b55      	ldr	r3, [pc, #340]	; (8005438 <_tx_thread_system_resume+0x1ec>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052e6:	4313      	orrs	r3, r2
 80052e8:	4a53      	ldr	r2, [pc, #332]	; (8005438 <_tx_thread_system_resume+0x1ec>)
 80052ea:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80052ec:	4b53      	ldr	r3, [pc, #332]	; (800543c <_tx_thread_system_resume+0x1f0>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80052f2:	429a      	cmp	r2, r3
 80052f4:	d269      	bcs.n	80053ca <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80052f6:	4a51      	ldr	r2, [pc, #324]	; (800543c <_tx_thread_system_resume+0x1f0>)
 80052f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052fa:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80052fc:	4b50      	ldr	r3, [pc, #320]	; (8005440 <_tx_thread_system_resume+0x1f4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8005302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005304:	2b00      	cmp	r3, #0
 8005306:	d103      	bne.n	8005310 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8005308:	4a4d      	ldr	r2, [pc, #308]	; (8005440 <_tx_thread_system_resume+0x1f4>)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	e05c      	b.n	80053ca <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8005310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005314:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005316:	429a      	cmp	r2, r3
 8005318:	d257      	bcs.n	80053ca <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800531a:	4a49      	ldr	r2, [pc, #292]	; (8005440 <_tx_thread_system_resume+0x1f4>)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005326:	f383 8810 	msr	PRIMASK, r3
}
 800532a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800532c:	4b40      	ldr	r3, [pc, #256]	; (8005430 <_tx_thread_system_resume+0x1e4>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8005332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005334:	2b00      	cmp	r3, #0
 8005336:	d174      	bne.n	8005422 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005338:	4b42      	ldr	r3, [pc, #264]	; (8005444 <_tx_thread_system_resume+0x1f8>)
 800533a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800533e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005340:	f3ef 8305 	mrs	r3, IPSR
 8005344:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8005346:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 8005348:	2b00      	cmp	r3, #0
 800534a:	d10c      	bne.n	8005366 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800534c:	f3ef 8310 	mrs	r3, PRIMASK
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8005352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8005354:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005356:	b662      	cpsie	i
}
 8005358:	bf00      	nop
 800535a:	6a3b      	ldr	r3, [r7, #32]
 800535c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f383 8810 	msr	PRIMASK, r3
}
 8005364:	bf00      	nop
}
 8005366:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8005368:	e05b      	b.n	8005422 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800536a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8005370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8005376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005380:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005386:	621a      	str	r2, [r3, #32]
 8005388:	e01f      	b.n	80053ca <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2203      	movs	r2, #3
 8005394:	631a      	str	r2, [r3, #48]	; 0x30
 8005396:	e018      	b.n	80053ca <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	2b01      	cmp	r3, #1
 800539e:	d014      	beq.n	80053ca <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d010      	beq.n	80053ca <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d106      	bne.n	80053be <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
 80053bc:	e005      	b.n	80053ca <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2203      	movs	r2, #3
 80053c8:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80053ca:	4b1f      	ldr	r3, [pc, #124]	; (8005448 <_tx_thread_system_resume+0x1fc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80053d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053d2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f383 8810 	msr	PRIMASK, r3
}
 80053da:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80053dc:	4b18      	ldr	r3, [pc, #96]	; (8005440 <_tx_thread_system_resume+0x1f4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d020      	beq.n	8005428 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80053e6:	4b12      	ldr	r3, [pc, #72]	; (8005430 <_tx_thread_system_resume+0x1e4>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 80053ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d11a      	bne.n	8005428 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80053f2:	4b14      	ldr	r3, [pc, #80]	; (8005444 <_tx_thread_system_resume+0x1f8>)
 80053f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80053fa:	f3ef 8305 	mrs	r3, IPSR
 80053fe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005400:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10f      	bne.n	8005426 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005406:	f3ef 8310 	mrs	r3, PRIMASK
 800540a:	613b      	str	r3, [r7, #16]
    return(posture);
 800540c:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800540e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005410:	b662      	cpsie	i
}
 8005412:	bf00      	nop
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	f383 8810 	msr	PRIMASK, r3
}
 800541e:	bf00      	nop
}
 8005420:	e001      	b.n	8005426 <_tx_thread_system_resume+0x1da>
                                return;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <_tx_thread_system_resume+0x1dc>
 8005426:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8005428:	3758      	adds	r7, #88	; 0x58
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000e7c 	.word	0x20000e7c
 8005434:	20000dfc 	.word	0x20000dfc
 8005438:	20000df4 	.word	0x20000df4
 800543c:	20000df8 	.word	0x20000df8
 8005440:	20000de8 	.word	0x20000de8
 8005444:	e000ed04 	.word	0xe000ed04
 8005448:	20000de4 	.word	0x20000de4

0800544c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b09e      	sub	sp, #120	; 0x78
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8005454:	4b81      	ldr	r3, [pc, #516]	; (800565c <_tx_thread_system_suspend+0x210>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800545a:	f3ef 8310 	mrs	r3, PRIMASK
 800545e:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8005460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8005462:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8005464:	b672      	cpsid	i
    return(int_posture);
 8005466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8005468:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800546e:	429a      	cmp	r2, r3
 8005470:	d112      	bne.n	8005498 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005476:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8005478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800547e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005484:	d004      	beq.n	8005490 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	334c      	adds	r3, #76	; 0x4c
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fa40 	bl	8005910 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	4a72      	ldr	r2, [pc, #456]	; (8005660 <_tx_thread_system_suspend+0x214>)
 8005496:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8005498:	4b72      	ldr	r3, [pc, #456]	; (8005664 <_tx_thread_system_suspend+0x218>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3b01      	subs	r3, #1
 800549e:	4a71      	ldr	r2, [pc, #452]	; (8005664 <_tx_thread_system_suspend+0x218>)
 80054a0:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	f040 80a6 	bne.w	80055f8 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b6:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80054be:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d015      	beq.n	80054f2 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80054cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80054d0:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80054d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054d6:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80054d8:	4a63      	ldr	r2, [pc, #396]	; (8005668 <_tx_thread_system_suspend+0x21c>)
 80054da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d157      	bne.n	8005596 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80054e6:	4960      	ldr	r1, [pc, #384]	; (8005668 <_tx_thread_system_suspend+0x21c>)
 80054e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80054ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80054f0:	e051      	b.n	8005596 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80054f2:	4a5d      	ldr	r2, [pc, #372]	; (8005668 <_tx_thread_system_suspend+0x21c>)
 80054f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054f6:	2100      	movs	r1, #0
 80054f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80054fc:	2201      	movs	r2, #1
 80054fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005500:	fa02 f303 	lsl.w	r3, r2, r3
 8005504:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8005506:	4b59      	ldr	r3, [pc, #356]	; (800566c <_tx_thread_system_suspend+0x220>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800550c:	43db      	mvns	r3, r3
 800550e:	4013      	ands	r3, r2
 8005510:	4a56      	ldr	r2, [pc, #344]	; (800566c <_tx_thread_system_suspend+0x220>)
 8005512:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8005514:	2300      	movs	r3, #0
 8005516:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8005518:	4b54      	ldr	r3, [pc, #336]	; (800566c <_tx_thread_system_suspend+0x220>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800551e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005520:	2b00      	cmp	r3, #0
 8005522:	d12b      	bne.n	800557c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8005524:	4b52      	ldr	r3, [pc, #328]	; (8005670 <_tx_thread_system_suspend+0x224>)
 8005526:	2220      	movs	r2, #32
 8005528:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800552a:	4b52      	ldr	r3, [pc, #328]	; (8005674 <_tx_thread_system_suspend+0x228>)
 800552c:	2200      	movs	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
 8005530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005532:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005536:	f383 8810 	msr	PRIMASK, r3
}
 800553a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800553c:	4b49      	ldr	r3, [pc, #292]	; (8005664 <_tx_thread_system_suspend+0x218>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8005542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005544:	2b00      	cmp	r3, #0
 8005546:	f040 8081 	bne.w	800564c <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800554a:	4b4b      	ldr	r3, [pc, #300]	; (8005678 <_tx_thread_system_suspend+0x22c>)
 800554c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005550:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005552:	f3ef 8305 	mrs	r3, IPSR
 8005556:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8005558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10c      	bne.n	8005578 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800555e:	f3ef 8310 	mrs	r3, PRIMASK
 8005562:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8005564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8005566:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005568:	b662      	cpsie	i
}
 800556a:	bf00      	nop
 800556c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800556e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005572:	f383 8810 	msr	PRIMASK, r3
}
 8005576:	bf00      	nop
}
 8005578:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800557a:	e067      	b.n	800564c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800557c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800557e:	fa93 f3a3 	rbit	r3, r3
 8005582:	65bb      	str	r3, [r7, #88]	; 0x58
 8005584:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005586:	fab3 f383 	clz	r3, r3
 800558a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800558c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800558e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005590:	4413      	add	r3, r2
 8005592:	4a37      	ldr	r2, [pc, #220]	; (8005670 <_tx_thread_system_suspend+0x224>)
 8005594:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8005596:	4b37      	ldr	r3, [pc, #220]	; (8005674 <_tx_thread_system_suspend+0x228>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d12b      	bne.n	80055f8 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80055a0:	4b33      	ldr	r3, [pc, #204]	; (8005670 <_tx_thread_system_suspend+0x224>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a30      	ldr	r2, [pc, #192]	; (8005668 <_tx_thread_system_suspend+0x21c>)
 80055a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055aa:	4a32      	ldr	r2, [pc, #200]	; (8005674 <_tx_thread_system_suspend+0x228>)
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055b0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	f383 8810 	msr	PRIMASK, r3
}
 80055b8:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80055ba:	4b2a      	ldr	r3, [pc, #168]	; (8005664 <_tx_thread_system_suspend+0x218>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 80055c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d144      	bne.n	8005650 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80055c6:	4b2c      	ldr	r3, [pc, #176]	; (8005678 <_tx_thread_system_suspend+0x22c>)
 80055c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055cc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80055ce:	f3ef 8305 	mrs	r3, IPSR
 80055d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10c      	bne.n	80055f4 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80055da:	f3ef 8310 	mrs	r3, PRIMASK
 80055de:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80055e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 80055e4:	b662      	cpsie	i
}
 80055e6:	bf00      	nop
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	f383 8810 	msr	PRIMASK, r3
}
 80055f2:	bf00      	nop
}
 80055f4:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80055f6:	e02b      	b.n	8005650 <_tx_thread_system_suspend+0x204>
 80055f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055fa:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80055fc:	69fb      	ldr	r3, [r7, #28]
 80055fe:	f383 8810 	msr	PRIMASK, r3
}
 8005602:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8005604:	4b1b      	ldr	r3, [pc, #108]	; (8005674 <_tx_thread_system_suspend+0x228>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800560a:	429a      	cmp	r2, r3
 800560c:	d022      	beq.n	8005654 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800560e:	4b15      	ldr	r3, [pc, #84]	; (8005664 <_tx_thread_system_suspend+0x218>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8005614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005616:	2b00      	cmp	r3, #0
 8005618:	d11c      	bne.n	8005654 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800561a:	4b17      	ldr	r3, [pc, #92]	; (8005678 <_tx_thread_system_suspend+0x22c>)
 800561c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005620:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005622:	f3ef 8305 	mrs	r3, IPSR
 8005626:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005628:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10c      	bne.n	8005648 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800562e:	f3ef 8310 	mrs	r3, PRIMASK
 8005632:	617b      	str	r3, [r7, #20]
    return(posture);
 8005634:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8005636:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005638:	b662      	cpsie	i
}
 800563a:	bf00      	nop
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f383 8810 	msr	PRIMASK, r3
}
 8005646:	bf00      	nop
}
 8005648:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800564a:	e003      	b.n	8005654 <_tx_thread_system_suspend+0x208>
                return;
 800564c:	bf00      	nop
 800564e:	e002      	b.n	8005656 <_tx_thread_system_suspend+0x20a>
            return;
 8005650:	bf00      	nop
 8005652:	e000      	b.n	8005656 <_tx_thread_system_suspend+0x20a>
    return;
 8005654:	bf00      	nop
}
 8005656:	3778      	adds	r7, #120	; 0x78
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}
 800565c:	20000de4 	.word	0x20000de4
 8005660:	200013e8 	.word	0x200013e8
 8005664:	20000e7c 	.word	0x20000e7c
 8005668:	20000dfc 	.word	0x20000dfc
 800566c:	20000df4 	.word	0x20000df4
 8005670:	20000df8 	.word	0x20000df8
 8005674:	20000de8 	.word	0x20000de8
 8005678:	e000ed04 	.word	0xe000ed04

0800567c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8005682:	4b21      	ldr	r3, [pc, #132]	; (8005708 <_tx_thread_time_slice+0x8c>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005688:	f3ef 8310 	mrs	r3, PRIMASK
 800568c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800568e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8005690:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005692:	b672      	cpsid	i
    return(int_posture);
 8005694:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8005696:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005698:	4b1c      	ldr	r3, [pc, #112]	; (800570c <_tx_thread_time_slice+0x90>)
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d024      	beq.n	80056ee <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d120      	bne.n	80056ee <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	69da      	ldr	r2, [r3, #28]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	4a15      	ldr	r2, [pc, #84]	; (8005710 <_tx_thread_time_slice+0x94>)
 80056ba:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d013      	beq.n	80056ee <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d10d      	bne.n	80056ee <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	6a12      	ldr	r2, [r2, #32]
 80056da:	490e      	ldr	r1, [pc, #56]	; (8005714 <_tx_thread_time_slice+0x98>)
 80056dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80056e0:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <_tx_thread_time_slice+0x9c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a0b      	ldr	r2, [pc, #44]	; (8005714 <_tx_thread_time_slice+0x98>)
 80056e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ea:	4a0c      	ldr	r2, [pc, #48]	; (800571c <_tx_thread_time_slice+0xa0>)
 80056ec:	6013      	str	r3, [r2, #0]
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f383 8810 	msr	PRIMASK, r3
}
 80056f8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 80056fa:	bf00      	nop
 80056fc:	371c      	adds	r7, #28
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr
 8005706:	bf00      	nop
 8005708:	20000de4 	.word	0x20000de4
 800570c:	20000e8c 	.word	0x20000e8c
 8005710:	200013e8 	.word	0x200013e8
 8005714:	20000dfc 	.word	0x20000dfc
 8005718:	20000df8 	.word	0x20000df8
 800571c:	20000de8 	.word	0x20000de8

08005720 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	; 0x28
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800572c:	f3ef 8310 	mrs	r3, PRIMASK
 8005730:	617b      	str	r3, [r7, #20]
    return(posture);
 8005732:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8005734:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005736:	b672      	cpsid	i
    return(int_posture);
 8005738:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800573a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005740:	2b04      	cmp	r3, #4
 8005742:	d10e      	bne.n	8005762 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8005744:	4b13      	ldr	r3, [pc, #76]	; (8005794 <_tx_thread_timeout+0x74>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3301      	adds	r3, #1
 800574a:	4a12      	ldr	r2, [pc, #72]	; (8005794 <_tx_thread_timeout+0x74>)
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	6a3b      	ldr	r3, [r7, #32]
 8005750:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f383 8810 	msr	PRIMASK, r3
}
 8005758:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800575a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800575c:	f7ff fd76 	bl	800524c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8005760:	e013      	b.n	800578a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8005762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005766:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8005768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	6a3b      	ldr	r3, [r7, #32]
 8005772:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f383 8810 	msr	PRIMASK, r3
}
 800577a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	69b9      	ldr	r1, [r7, #24]
 8005786:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005788:	4798      	blx	r3
}
 800578a:	bf00      	nop
 800578c:	3728      	adds	r7, #40	; 0x28
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000e7c 	.word	0x20000e7c

08005798 <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800579e:	f3ef 8310 	mrs	r3, PRIMASK
 80057a2:	60bb      	str	r3, [r7, #8]
    return(posture);
 80057a4:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 80057a6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 80057a8:	b672      	cpsid	i
    return(int_posture);
 80057aa:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 80057ac:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 80057ae:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <_tx_time_get+0x38>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f383 8810 	msr	PRIMASK, r3
}
 80057be:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 80057c0:	693b      	ldr	r3, [r7, #16]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000e88 	.word	0x20000e88

080057d4 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80057da:	f3ef 8310 	mrs	r3, PRIMASK
 80057de:	607b      	str	r3, [r7, #4]
    return(posture);
 80057e0:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80057e2:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80057e4:	b672      	cpsid	i
    return(int_posture);
 80057e6:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 80057e8:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <_tx_timer_expiration_process+0x3c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3301      	adds	r3, #1
 80057f0:	4a07      	ldr	r2, [pc, #28]	; (8005810 <_tx_timer_expiration_process+0x3c>)
 80057f2:	6013      	str	r3, [r2, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f383 8810 	msr	PRIMASK, r3
}
 80057fe:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8005800:	4804      	ldr	r0, [pc, #16]	; (8005814 <_tx_timer_expiration_process+0x40>)
 8005802:	f7ff fd23 	bl	800524c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8005806:	bf00      	nop
 8005808:	3710      	adds	r7, #16
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	20000e7c 	.word	0x20000e7c
 8005814:	20000f2c 	.word	0x20000f2c

08005818 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8005818:	b590      	push	{r4, r7, lr}
 800581a:	b089      	sub	sp, #36	; 0x24
 800581c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800581e:	4b28      	ldr	r3, [pc, #160]	; (80058c0 <_tx_timer_initialize+0xa8>)
 8005820:	2200      	movs	r2, #0
 8005822:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8005824:	4b27      	ldr	r3, [pc, #156]	; (80058c4 <_tx_timer_initialize+0xac>)
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800582a:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <_tx_timer_initialize+0xb0>)
 800582c:	2200      	movs	r2, #0
 800582e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8005830:	4b26      	ldr	r3, [pc, #152]	; (80058cc <_tx_timer_initialize+0xb4>)
 8005832:	2200      	movs	r2, #0
 8005834:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8005836:	4b26      	ldr	r3, [pc, #152]	; (80058d0 <_tx_timer_initialize+0xb8>)
 8005838:	2200      	movs	r2, #0
 800583a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800583c:	2280      	movs	r2, #128	; 0x80
 800583e:	2100      	movs	r1, #0
 8005840:	4824      	ldr	r0, [pc, #144]	; (80058d4 <_tx_timer_initialize+0xbc>)
 8005842:	f000 fe7f 	bl	8006544 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8005846:	4b24      	ldr	r3, [pc, #144]	; (80058d8 <_tx_timer_initialize+0xc0>)
 8005848:	4a22      	ldr	r2, [pc, #136]	; (80058d4 <_tx_timer_initialize+0xbc>)
 800584a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800584c:	4b23      	ldr	r3, [pc, #140]	; (80058dc <_tx_timer_initialize+0xc4>)
 800584e:	4a21      	ldr	r2, [pc, #132]	; (80058d4 <_tx_timer_initialize+0xbc>)
 8005850:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8005852:	4b23      	ldr	r3, [pc, #140]	; (80058e0 <_tx_timer_initialize+0xc8>)
 8005854:	4a23      	ldr	r2, [pc, #140]	; (80058e4 <_tx_timer_initialize+0xcc>)
 8005856:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8005858:	4b21      	ldr	r3, [pc, #132]	; (80058e0 <_tx_timer_initialize+0xc8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3304      	adds	r3, #4
 800585e:	4a20      	ldr	r2, [pc, #128]	; (80058e0 <_tx_timer_initialize+0xc8>)
 8005860:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8005862:	4b21      	ldr	r3, [pc, #132]	; (80058e8 <_tx_timer_initialize+0xd0>)
 8005864:	4a21      	ldr	r2, [pc, #132]	; (80058ec <_tx_timer_initialize+0xd4>)
 8005866:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8005868:	4b21      	ldr	r3, [pc, #132]	; (80058f0 <_tx_timer_initialize+0xd8>)
 800586a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800586e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8005870:	4b20      	ldr	r3, [pc, #128]	; (80058f4 <_tx_timer_initialize+0xdc>)
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8005876:	4b1c      	ldr	r3, [pc, #112]	; (80058e8 <_tx_timer_initialize+0xd0>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a1d      	ldr	r2, [pc, #116]	; (80058f0 <_tx_timer_initialize+0xd8>)
 800587c:	6812      	ldr	r2, [r2, #0]
 800587e:	491d      	ldr	r1, [pc, #116]	; (80058f4 <_tx_timer_initialize+0xdc>)
 8005880:	6809      	ldr	r1, [r1, #0]
 8005882:	481c      	ldr	r0, [pc, #112]	; (80058f4 <_tx_timer_initialize+0xdc>)
 8005884:	6800      	ldr	r0, [r0, #0]
 8005886:	2400      	movs	r4, #0
 8005888:	9405      	str	r4, [sp, #20]
 800588a:	2400      	movs	r4, #0
 800588c:	9404      	str	r4, [sp, #16]
 800588e:	9003      	str	r0, [sp, #12]
 8005890:	9102      	str	r1, [sp, #8]
 8005892:	9201      	str	r2, [sp, #4]
 8005894:	9300      	str	r3, [sp, #0]
 8005896:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <_tx_timer_initialize+0xe0>)
 8005898:	4a18      	ldr	r2, [pc, #96]	; (80058fc <_tx_timer_initialize+0xe4>)
 800589a:	4919      	ldr	r1, [pc, #100]	; (8005900 <_tx_timer_initialize+0xe8>)
 800589c:	4819      	ldr	r0, [pc, #100]	; (8005904 <_tx_timer_initialize+0xec>)
 800589e:	f7ff fb1d 	bl	8004edc <_tx_thread_create>
 80058a2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e5      	bne.n	8005876 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 80058aa:	4b17      	ldr	r3, [pc, #92]	; (8005908 <_tx_timer_initialize+0xf0>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 80058b0:	4b16      	ldr	r3, [pc, #88]	; (800590c <_tx_timer_initialize+0xf4>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 80058b6:	bf00      	nop
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd90      	pop	{r4, r7, pc}
 80058be:	bf00      	nop
 80058c0:	20000e88 	.word	0x20000e88
 80058c4:	200013e8 	.word	0x200013e8
 80058c8:	20000e8c 	.word	0x20000e8c
 80058cc:	20000f1c 	.word	0x20000f1c
 80058d0:	20000f28 	.word	0x20000f28
 80058d4:	20000e90 	.word	0x20000e90
 80058d8:	20000f10 	.word	0x20000f10
 80058dc:	20000f18 	.word	0x20000f18
 80058e0:	20000f14 	.word	0x20000f14
 80058e4:	20000f0c 	.word	0x20000f0c
 80058e8:	20000fdc 	.word	0x20000fdc
 80058ec:	20000fe8 	.word	0x20000fe8
 80058f0:	20000fe0 	.word	0x20000fe0
 80058f4:	20000fe4 	.word	0x20000fe4
 80058f8:	4154494d 	.word	0x4154494d
 80058fc:	08005a45 	.word	0x08005a45
 8005900:	080065ec 	.word	0x080065ec
 8005904:	20000f2c 	.word	0x20000f2c
 8005908:	20000f20 	.word	0x20000f20
 800590c:	20000f24 	.word	0x20000f24

08005910 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8005910:	b480      	push	{r7}
 8005912:	b089      	sub	sp, #36	; 0x24
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d04a      	beq.n	80059ba <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800592a:	d046      	beq.n	80059ba <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d142      	bne.n	80059ba <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	2b20      	cmp	r3, #32
 8005938:	d902      	bls.n	8005940 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800593a:	231f      	movs	r3, #31
 800593c:	61bb      	str	r3, [r7, #24]
 800593e:	e002      	b.n	8005946 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	3b01      	subs	r3, #1
 8005944:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8005946:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <_tx_timer_system_activate+0xb8>)
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4413      	add	r3, r2
 8005950:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8005952:	4b1e      	ldr	r3, [pc, #120]	; (80059cc <_tx_timer_system_activate+0xbc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	69fa      	ldr	r2, [r7, #28]
 8005958:	429a      	cmp	r2, r3
 800595a:	d30b      	bcc.n	8005974 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800595c:	4b1b      	ldr	r3, [pc, #108]	; (80059cc <_tx_timer_system_activate+0xbc>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69fa      	ldr	r2, [r7, #28]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	109b      	asrs	r3, r3, #2
 8005966:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8005968:	4b19      	ldr	r3, [pc, #100]	; (80059d0 <_tx_timer_system_activate+0xc0>)
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	601a      	str	r2, [r3, #0]
 800598e:	e011      	b.n	80059b4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 80059ba:	bf00      	nop
 80059bc:	3724      	adds	r7, #36	; 0x24
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	20000f18 	.word	0x20000f18
 80059cc:	20000f14 	.word	0x20000f14
 80059d0:	20000f10 	.word	0x20000f10

080059d4 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d026      	beq.n	8005a36 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d108      	bne.n	8005a08 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d117      	bne.n	8005a30 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
 8005a06:	e013      	b.n	8005a30 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d105      	bne.n	8005a30 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	697a      	ldr	r2, [r7, #20]
 8005a28:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	619a      	str	r2, [r3, #24]
    }
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
	...

08005a44 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b098      	sub	sp, #96	; 0x60
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a73      	ldr	r2, [pc, #460]	; (8005c20 <_tx_timer_thread_entry+0x1dc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	f040 80de 	bne.w	8005c16 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005a5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a5e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8005a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8005a64:	b672      	cpsid	i
    return(int_posture);
 8005a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8005a68:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8005a6a:	4b6e      	ldr	r3, [pc, #440]	; (8005c24 <_tx_timer_thread_entry+0x1e0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d003      	beq.n	8005a80 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f107 020c 	add.w	r2, r7, #12
 8005a7e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8005a80:	4b68      	ldr	r3, [pc, #416]	; (8005c24 <_tx_timer_thread_entry+0x1e0>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8005a88:	4b66      	ldr	r3, [pc, #408]	; (8005c24 <_tx_timer_thread_entry+0x1e0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3304      	adds	r3, #4
 8005a8e:	4a65      	ldr	r2, [pc, #404]	; (8005c24 <_tx_timer_thread_entry+0x1e0>)
 8005a90:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8005a92:	4b64      	ldr	r3, [pc, #400]	; (8005c24 <_tx_timer_thread_entry+0x1e0>)
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	4b64      	ldr	r3, [pc, #400]	; (8005c28 <_tx_timer_thread_entry+0x1e4>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d103      	bne.n	8005aa6 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8005a9e:	4b63      	ldr	r3, [pc, #396]	; (8005c2c <_tx_timer_thread_entry+0x1e8>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a60      	ldr	r2, [pc, #384]	; (8005c24 <_tx_timer_thread_entry+0x1e0>)
 8005aa4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8005aa6:	4b62      	ldr	r3, [pc, #392]	; (8005c30 <_tx_timer_thread_entry+0x1ec>)
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aae:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	f383 8810 	msr	PRIMASK, r3
}
 8005ab6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8005abc:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8005abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8005ac2:	b672      	cpsid	i
    return(int_posture);
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8005ac6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8005ac8:	e07f      	b.n	8005bca <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8005ad8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d102      	bne.n	8005ae6 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	e00e      	b.n	8005b04 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8005ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8005aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005af0:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8005af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005af6:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8005af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005afa:	f107 020c 	add.w	r2, r7, #12
 8005afe:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8005b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b02:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8005b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d911      	bls.n	8005b30 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8005b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8005b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b16:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005b1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1e:	f107 0208 	add.w	r2, r7, #8
 8005b22:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8005b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b28:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8005b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	e01a      	b.n	8005b66 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8005b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8005b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8005b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b42:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8005b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d009      	beq.n	8005b60 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8005b4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b4e:	f107 0208 	add.w	r2, r7, #8
 8005b52:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8005b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b58:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8005b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5c:	60bb      	str	r3, [r7, #8]
 8005b5e:	e002      	b.n	8005b66 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8005b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b62:	2200      	movs	r2, #0
 8005b64:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8005b66:	4a33      	ldr	r2, [pc, #204]	; (8005c34 <_tx_timer_thread_entry+0x1f0>)
 8005b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b6a:	6013      	str	r3, [r2, #0]
 8005b6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b72:	f383 8810 	msr	PRIMASK, r3
}
 8005b76:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8005b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8005b7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b80:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005b82:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005b84:	f3ef 8310 	mrs	r3, PRIMASK
 8005b88:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8005b8c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8005b8e:	b672      	cpsid	i
    return(int_posture);
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8005b92:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8005b94:	4b27      	ldr	r3, [pc, #156]	; (8005c34 <_tx_timer_thread_entry+0x1f0>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d105      	bne.n	8005bae <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8005ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8005ba8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005baa:	f7ff feb1 	bl	8005910 <_tx_timer_system_activate>
 8005bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bb0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005bb2:	69bb      	ldr	r3, [r7, #24]
 8005bb4:	f383 8810 	msr	PRIMASK, r3
}
 8005bb8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005bba:	f3ef 8310 	mrs	r3, PRIMASK
 8005bbe:	623b      	str	r3, [r7, #32]
    return(posture);
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005bc2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005bc4:	b672      	cpsid	i
    return(int_posture);
 8005bc6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8005bc8:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f47f af7c 	bne.w	8005aca <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8005bd2:	4b17      	ldr	r3, [pc, #92]	; (8005c30 <_tx_timer_thread_entry+0x1ec>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d116      	bne.n	8005c08 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8005bda:	4b17      	ldr	r3, [pc, #92]	; (8005c38 <_tx_timer_thread_entry+0x1f4>)
 8005bdc:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be0:	2203      	movs	r2, #3
 8005be2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be6:	2201      	movs	r2, #1
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8005bea:	4b14      	ldr	r3, [pc, #80]	; (8005c3c <_tx_timer_thread_entry+0x1f8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	4a12      	ldr	r2, [pc, #72]	; (8005c3c <_tx_timer_thread_entry+0x1f8>)
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bf6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f383 8810 	msr	PRIMASK, r3
}
 8005bfe:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8005c00:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005c02:	f7ff fc23 	bl	800544c <_tx_thread_system_suspend>
 8005c06:	e728      	b.n	8005a5a <_tx_timer_thread_entry+0x16>
 8005c08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c0a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f383 8810 	msr	PRIMASK, r3
}
 8005c12:	bf00      	nop
            TX_DISABLE
 8005c14:	e721      	b.n	8005a5a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8005c16:	bf00      	nop
 8005c18:	3760      	adds	r7, #96	; 0x60
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	4154494d 	.word	0x4154494d
 8005c24:	20000f18 	.word	0x20000f18
 8005c28:	20000f14 	.word	0x20000f14
 8005c2c:	20000f10 	.word	0x20000f10
 8005c30:	20000f1c 	.word	0x20000f1c
 8005c34:	20000f28 	.word	0x20000f28
 8005c38:	20000f2c 	.word	0x20000f2c
 8005c3c:	20000e7c 	.word	0x20000e7c

08005c40 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b08a      	sub	sp, #40	; 0x28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c5c:	e029      	b.n	8005cb2 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a2d      	ldr	r2, [pc, #180]	; (8005d18 <_txe_byte_allocate+0xd8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d002      	beq.n	8005c6e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005c68:	2302      	movs	r3, #2
 8005c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c6c:	e021      	b.n	8005cb2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d102      	bne.n	8005c7a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8005c74:	2303      	movs	r3, #3
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
 8005c78:	e01b      	b.n	8005cb2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d102      	bne.n	8005c86 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8005c80:	2305      	movs	r3, #5
 8005c82:	627b      	str	r3, [r7, #36]	; 0x24
 8005c84:	e015      	b.n	8005cb2 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d902      	bls.n	8005c96 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8005c90:	2305      	movs	r3, #5
 8005c92:	627b      	str	r3, [r7, #36]	; 0x24
 8005c94:	e00d      	b.n	8005cb2 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00a      	beq.n	8005cb2 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005c9c:	f3ef 8305 	mrs	r3, IPSR
 8005ca0:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8005ca2:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005ca4:	4b1d      	ldr	r3, [pc, #116]	; (8005d1c <_txe_byte_allocate+0xdc>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8005cae:	2304      	movs	r3, #4
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d108      	bne.n	8005cca <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8005cb8:	4b19      	ldr	r3, [pc, #100]	; (8005d20 <_txe_byte_allocate+0xe0>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <_txe_byte_allocate+0xe4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d101      	bne.n	8005cca <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8005cc6:	2313      	movs	r3, #19
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d114      	bne.n	8005cfa <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005cd0:	f3ef 8305 	mrs	r3, IPSR
 8005cd4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005cd6:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005cd8:	4b10      	ldr	r3, [pc, #64]	; (8005d1c <_txe_byte_allocate+0xdc>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005ce2:	f3ef 8305 	mrs	r3, IPSR
 8005ce6:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005ce8:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005cea:	4b0c      	ldr	r3, [pc, #48]	; (8005d1c <_txe_byte_allocate+0xdc>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005cf4:	d201      	bcs.n	8005cfa <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005cf6:	2313      	movs	r3, #19
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	68b9      	ldr	r1, [r7, #8]
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f7fe fb9c 	bl	8004444 <_tx_byte_allocate>
 8005d0c:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3728      	adds	r7, #40	; 0x28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	42595445 	.word	0x42595445
 8005d1c:	2000000c 	.word	0x2000000c
 8005d20:	20000de4 	.word	0x20000de4
 8005d24:	20000f2c 	.word	0x20000f2c

08005d28 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b092      	sub	sp, #72	; 0x48
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005d36:	2300      	movs	r3, #0
 8005d38:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d102      	bne.n	8005d46 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005d40:	2302      	movs	r3, #2
 8005d42:	647b      	str	r3, [r7, #68]	; 0x44
 8005d44:	e075      	b.n	8005e32 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8005d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d48:	2b34      	cmp	r3, #52	; 0x34
 8005d4a:	d002      	beq.n	8005d52 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d50:	e06f      	b.n	8005e32 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005d52:	f3ef 8310 	mrs	r3, PRIMASK
 8005d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005d5c:	b672      	cpsid	i
    return(int_posture);
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005d60:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005d62:	4b3b      	ldr	r3, [pc, #236]	; (8005e50 <_txe_byte_pool_create+0x128>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3301      	adds	r3, #1
 8005d68:	4a39      	ldr	r2, [pc, #228]	; (8005e50 <_txe_byte_pool_create+0x128>)
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	f383 8810 	msr	PRIMASK, r3
}
 8005d76:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8005d78:	4b36      	ldr	r3, [pc, #216]	; (8005e54 <_txe_byte_pool_create+0x12c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005d7e:	2300      	movs	r3, #0
 8005d80:	643b      	str	r3, [r7, #64]	; 0x40
 8005d82:	e009      	b.n	8005d98 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d00b      	beq.n	8005da4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8005d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8005d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d94:	3301      	adds	r3, #1
 8005d96:	643b      	str	r3, [r7, #64]	; 0x40
 8005d98:	4b2f      	ldr	r3, [pc, #188]	; (8005e58 <_txe_byte_pool_create+0x130>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d3f0      	bcc.n	8005d84 <_txe_byte_pool_create+0x5c>
 8005da2:	e000      	b.n	8005da6 <_txe_byte_pool_create+0x7e>
                break;
 8005da4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005da6:	f3ef 8310 	mrs	r3, PRIMASK
 8005daa:	623b      	str	r3, [r7, #32]
    return(posture);
 8005dac:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005dae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005db0:	b672      	cpsid	i
    return(int_posture);
 8005db2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005db4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005db6:	4b26      	ldr	r3, [pc, #152]	; (8005e50 <_txe_byte_pool_create+0x128>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	4a24      	ldr	r2, [pc, #144]	; (8005e50 <_txe_byte_pool_create+0x128>)
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc6:	f383 8810 	msr	PRIMASK, r3
}
 8005dca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005dcc:	f7ff fa04 	bl	80051d8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d102      	bne.n	8005dde <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8005dd8:	2302      	movs	r3, #2
 8005dda:	647b      	str	r3, [r7, #68]	; 0x44
 8005ddc:	e029      	b.n	8005e32 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8005de4:	2303      	movs	r3, #3
 8005de6:	647b      	str	r3, [r7, #68]	; 0x44
 8005de8:	e023      	b.n	8005e32 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	2b63      	cmp	r3, #99	; 0x63
 8005dee:	d802      	bhi.n	8005df6 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8005df0:	2305      	movs	r3, #5
 8005df2:	647b      	str	r3, [r7, #68]	; 0x44
 8005df4:	e01d      	b.n	8005e32 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005df6:	4b19      	ldr	r3, [pc, #100]	; (8005e5c <_txe_byte_pool_create+0x134>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8005dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dfe:	4a18      	ldr	r2, [pc, #96]	; (8005e60 <_txe_byte_pool_create+0x138>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d101      	bne.n	8005e08 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005e04:	2313      	movs	r3, #19
 8005e06:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005e08:	f3ef 8305 	mrs	r3, IPSR
 8005e0c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005e0e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005e10:	4b14      	ldr	r3, [pc, #80]	; (8005e64 <_txe_byte_pool_create+0x13c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00b      	beq.n	8005e32 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005e1a:	f3ef 8305 	mrs	r3, IPSR
 8005e1e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005e20:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005e22:	4b10      	ldr	r3, [pc, #64]	; (8005e64 <_txe_byte_pool_create+0x13c>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005e2c:	d201      	bcs.n	8005e32 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8005e2e:	2313      	movs	r3, #19
 8005e30:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d106      	bne.n	8005e46 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	68b9      	ldr	r1, [r7, #8]
 8005e3e:	68f8      	ldr	r0, [r7, #12]
 8005e40:	f7fe fc42 	bl	80046c8 <_tx_byte_pool_create>
 8005e44:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8005e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3748      	adds	r7, #72	; 0x48
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	20000e7c 	.word	0x20000e7c
 8005e54:	20000dd4 	.word	0x20000dd4
 8005e58:	20000dd8 	.word	0x20000dd8
 8005e5c:	20000de4 	.word	0x20000de4
 8005e60:	20000f2c 	.word	0x20000f2c
 8005e64:	2000000c 	.word	0x2000000c

08005e68 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b092      	sub	sp, #72	; 0x48
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	60f8      	str	r0, [r7, #12]
 8005e70:	60b9      	str	r1, [r7, #8]
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005e76:	2300      	movs	r3, #0
 8005e78:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d102      	bne.n	8005e86 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8005e80:	230c      	movs	r3, #12
 8005e82:	647b      	str	r3, [r7, #68]	; 0x44
 8005e84:	e054      	b.n	8005f30 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b1c      	cmp	r3, #28
 8005e8a:	d002      	beq.n	8005e92 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8005e8c:	230c      	movs	r3, #12
 8005e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e90:	e04e      	b.n	8005f30 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005e92:	f3ef 8310 	mrs	r3, PRIMASK
 8005e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8005e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8005e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8005e9c:	b672      	cpsid	i
    return(int_posture);
 8005e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8005ea0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8005ea2:	4b36      	ldr	r3, [pc, #216]	; (8005f7c <_txe_semaphore_create+0x114>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	4a34      	ldr	r2, [pc, #208]	; (8005f7c <_txe_semaphore_create+0x114>)
 8005eaa:	6013      	str	r3, [r2, #0]
 8005eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eae:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb2:	f383 8810 	msr	PRIMASK, r3
}
 8005eb6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8005eb8:	4b31      	ldr	r3, [pc, #196]	; (8005f80 <_txe_semaphore_create+0x118>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec2:	e009      	b.n	8005ed8 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d00b      	beq.n	8005ee4 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8005ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 8005ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8005ed8:	4b2a      	ldr	r3, [pc, #168]	; (8005f84 <_txe_semaphore_create+0x11c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d3f0      	bcc.n	8005ec4 <_txe_semaphore_create+0x5c>
 8005ee2:	e000      	b.n	8005ee6 <_txe_semaphore_create+0x7e>
                break;
 8005ee4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8005eea:	623b      	str	r3, [r7, #32]
    return(posture);
 8005eec:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8005eee:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005ef0:	b672      	cpsid	i
    return(int_posture);
 8005ef2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8005ef4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8005ef6:	4b21      	ldr	r3, [pc, #132]	; (8005f7c <_txe_semaphore_create+0x114>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	4a1f      	ldr	r2, [pc, #124]	; (8005f7c <_txe_semaphore_create+0x114>)
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f02:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	f383 8810 	msr	PRIMASK, r3
}
 8005f0a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8005f0c:	f7ff f964 	bl	80051d8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d102      	bne.n	8005f1e <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8005f18:	230c      	movs	r3, #12
 8005f1a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f1c:	e008      	b.n	8005f30 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8005f1e:	4b1a      	ldr	r3, [pc, #104]	; (8005f88 <_txe_semaphore_create+0x120>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8005f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f26:	4a19      	ldr	r2, [pc, #100]	; (8005f8c <_txe_semaphore_create+0x124>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d101      	bne.n	8005f30 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005f2c:	2313      	movs	r3, #19
 8005f2e:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d114      	bne.n	8005f60 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005f36:	f3ef 8305 	mrs	r3, IPSR
 8005f3a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005f3c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005f3e:	4b14      	ldr	r3, [pc, #80]	; (8005f90 <_txe_semaphore_create+0x128>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00b      	beq.n	8005f60 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005f48:	f3ef 8305 	mrs	r3, IPSR
 8005f4c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005f4e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8005f50:	4b0f      	ldr	r3, [pc, #60]	; (8005f90 <_txe_semaphore_create+0x128>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8005f5a:	d201      	bcs.n	8005f60 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8005f5c:	2313      	movs	r3, #19
 8005f5e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d105      	bne.n	8005f72 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7fe fe3a 	bl	8004be4 <_tx_semaphore_create>
 8005f70:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8005f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3748      	adds	r7, #72	; 0x48
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	20000e7c 	.word	0x20000e7c
 8005f80:	20000dac 	.word	0x20000dac
 8005f84:	20000db0 	.word	0x20000db0
 8005f88:	20000de4 	.word	0x20000de4
 8005f8c:	20000f2c 	.word	0x20000f2c
 8005f90:	2000000c 	.word	0x2000000c

08005f94 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d102      	bne.n	8005fae <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8005fa8:	230c      	movs	r3, #12
 8005faa:	617b      	str	r3, [r7, #20]
 8005fac:	e01f      	b.n	8005fee <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a15      	ldr	r2, [pc, #84]	; (8006008 <_txe_semaphore_get+0x74>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d002      	beq.n	8005fbe <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8005fb8:	230c      	movs	r3, #12
 8005fba:	617b      	str	r3, [r7, #20]
 8005fbc:	e017      	b.n	8005fee <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d014      	beq.n	8005fee <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005fc4:	f3ef 8305 	mrs	r3, IPSR
 8005fc8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8005fca:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8005fcc:	4b0f      	ldr	r3, [pc, #60]	; (800600c <_txe_semaphore_get+0x78>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8005fd6:	2304      	movs	r3, #4
 8005fd8:	617b      	str	r3, [r7, #20]
 8005fda:	e008      	b.n	8005fee <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <_txe_semaphore_get+0x7c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	4a0b      	ldr	r2, [pc, #44]	; (8006014 <_txe_semaphore_get+0x80>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d101      	bne.n	8005fee <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8005fea:	2304      	movs	r3, #4
 8005fec:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d104      	bne.n	8005ffe <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fe fe46 	bl	8004c88 <_tx_semaphore_get>
 8005ffc:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8005ffe:	697b      	ldr	r3, [r7, #20]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	53454d41 	.word	0x53454d41
 800600c:	2000000c 	.word	0x2000000c
 8006010:	20000de4 	.word	0x20000de4
 8006014:	20000f2c 	.word	0x20000f2c

08006018 <_txe_semaphore_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_info_get(TX_SEMAPHORE *semaphore_ptr, CHAR **name, ULONG *current_value,
                    TX_THREAD **first_suspended, ULONG *suspended_count,
                    TX_SEMAPHORE **next_semaphore)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af02      	add	r7, sp, #8
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d102      	bne.n	8006032 <_txe_semaphore_info_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800602c:	230c      	movs	r3, #12
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	e012      	b.n	8006058 <_txe_semaphore_info_get+0x40>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a0b      	ldr	r2, [pc, #44]	; (8006064 <_txe_semaphore_info_get+0x4c>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d002      	beq.n	8006042 <_txe_semaphore_info_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800603c:	230c      	movs	r3, #12
 800603e:	617b      	str	r3, [r7, #20]
 8006040:	e00a      	b.n	8006058 <_txe_semaphore_info_get+0x40>
    }
    else
    {

        /* Otherwise, call the actual semaphore information get service.  */
        status =  _tx_semaphore_info_get(semaphore_ptr, name, current_value, first_suspended,
 8006042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	68b9      	ldr	r1, [r7, #8]
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f7fe feab 	bl	8004dac <_tx_semaphore_info_get>
 8006056:	6178      	str	r0, [r7, #20]
                                                                suspended_count, next_semaphore);
    }

    /* Return completion status.  */
    return(status);
 8006058:	697b      	ldr	r3, [r7, #20]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3718      	adds	r7, #24
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	53454d41 	.word	0x53454d41

08006068 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d102      	bne.n	800607c <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8006076:	230c      	movs	r3, #12
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	e00b      	b.n	8006094 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a07      	ldr	r2, [pc, #28]	; (80060a0 <_txe_semaphore_put+0x38>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d002      	beq.n	800608c <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8006086:	230c      	movs	r3, #12
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	e003      	b.n	8006094 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7fe fecd 	bl	8004e2c <_tx_semaphore_put>
 8006092:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8006094:	68fb      	ldr	r3, [r7, #12]
}
 8006096:	4618      	mov	r0, r3
 8006098:	3710      	adds	r7, #16
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	53454d41 	.word	0x53454d41

080060a4 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b09a      	sub	sp, #104	; 0x68
 80060a8:	af06      	add	r7, sp, #24
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80060b2:	2300      	movs	r3, #0
 80060b4:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d102      	bne.n	80060c2 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80060bc:	230e      	movs	r3, #14
 80060be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060c0:	e0bb      	b.n	800623a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 80060c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060c4:	2bb0      	cmp	r3, #176	; 0xb0
 80060c6:	d002      	beq.n	80060ce <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80060c8:	230e      	movs	r3, #14
 80060ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060cc:	e0b5      	b.n	800623a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80060ce:	f3ef 8310 	mrs	r3, PRIMASK
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80060d8:	b672      	cpsid	i
    return(int_posture);
 80060da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80060dc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80060de:	4b64      	ldr	r3, [pc, #400]	; (8006270 <_txe_thread_create+0x1cc>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	3301      	adds	r3, #1
 80060e4:	4a62      	ldr	r2, [pc, #392]	; (8006270 <_txe_thread_create+0x1cc>)
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	f383 8810 	msr	PRIMASK, r3
}
 80060f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80060f4:	2300      	movs	r3, #0
 80060f6:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80060f8:	4b5e      	ldr	r3, [pc, #376]	; (8006274 <_txe_thread_create+0x1d0>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80060fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006100:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8006102:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006104:	3b01      	subs	r3, #1
 8006106:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006108:	4413      	add	r3, r2
 800610a:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800610c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610e:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8006110:	2300      	movs	r3, #0
 8006112:	647b      	str	r3, [r7, #68]	; 0x44
 8006114:	e02b      	b.n	800616e <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800611a:	429a      	cmp	r2, r3
 800611c:	d101      	bne.n	8006122 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800611e:	2301      	movs	r3, #1
 8006120:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8006122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006124:	2b01      	cmp	r3, #1
 8006126:	d028      	beq.n	800617a <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8006128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800612e:	429a      	cmp	r2, r3
 8006130:	d308      	bcc.n	8006144 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8006132:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006138:	429a      	cmp	r2, r3
 800613a:	d203      	bcs.n	8006144 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800613c:	2300      	movs	r3, #0
 800613e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8006140:	2301      	movs	r3, #1
 8006142:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8006144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800614a:	429a      	cmp	r2, r3
 800614c:	d308      	bcc.n	8006160 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800614e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006154:	429a      	cmp	r2, r3
 8006156:	d203      	bcs.n	8006160 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8006158:	2300      	movs	r3, #0
 800615a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800615c:	2301      	movs	r3, #1
 800615e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8006160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006166:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8006168:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800616a:	3301      	adds	r3, #1
 800616c:	647b      	str	r3, [r7, #68]	; 0x44
 800616e:	4b42      	ldr	r3, [pc, #264]	; (8006278 <_txe_thread_create+0x1d4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006174:	429a      	cmp	r2, r3
 8006176:	d3ce      	bcc.n	8006116 <_txe_thread_create+0x72>
 8006178:	e000      	b.n	800617c <_txe_thread_create+0xd8>
                break;
 800617a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800617c:	f3ef 8310 	mrs	r3, PRIMASK
 8006180:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006182:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006184:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006186:	b672      	cpsid	i
    return(int_posture);
 8006188:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800618a:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800618c:	4b38      	ldr	r3, [pc, #224]	; (8006270 <_txe_thread_create+0x1cc>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3b01      	subs	r3, #1
 8006192:	4a37      	ldr	r2, [pc, #220]	; (8006270 <_txe_thread_create+0x1cc>)
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006198:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	f383 8810 	msr	PRIMASK, r3
}
 80061a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80061a2:	f7ff f819 	bl	80051d8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d102      	bne.n	80061b4 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80061ae:	230e      	movs	r3, #14
 80061b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061b2:	e042      	b.n	800623a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80061b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d102      	bne.n	80061c0 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80061ba:	2303      	movs	r3, #3
 80061bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061be:	e03c      	b.n	800623a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d102      	bne.n	80061cc <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80061c6:	2303      	movs	r3, #3
 80061c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061ca:	e036      	b.n	800623a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80061cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061ce:	2bc7      	cmp	r3, #199	; 0xc7
 80061d0:	d802      	bhi.n	80061d8 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80061d2:	2305      	movs	r3, #5
 80061d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d6:	e030      	b.n	800623a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80061d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061da:	2b1f      	cmp	r3, #31
 80061dc:	d902      	bls.n	80061e4 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80061de:	230f      	movs	r3, #15
 80061e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061e2:	e02a      	b.n	800623a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80061e4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80061e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d902      	bls.n	80061f2 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80061ec:	2318      	movs	r3, #24
 80061ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061f0:	e023      	b.n	800623a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80061f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d902      	bls.n	80061fe <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80061f8:	2310      	movs	r3, #16
 80061fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061fc:	e01d      	b.n	800623a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80061fe:	4b1f      	ldr	r3, [pc, #124]	; (800627c <_txe_thread_create+0x1d8>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	4a1e      	ldr	r2, [pc, #120]	; (8006280 <_txe_thread_create+0x1dc>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d101      	bne.n	8006210 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800620c:	2313      	movs	r3, #19
 800620e:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006210:	f3ef 8305 	mrs	r3, IPSR
 8006214:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006216:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8006218:	4b1a      	ldr	r3, [pc, #104]	; (8006284 <_txe_thread_create+0x1e0>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4313      	orrs	r3, r2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00b      	beq.n	800623a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8006222:	f3ef 8305 	mrs	r3, IPSR
 8006226:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8006228:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800622a:	4b16      	ldr	r3, [pc, #88]	; (8006284 <_txe_thread_create+0x1e0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4313      	orrs	r3, r2
 8006230:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8006234:	d201      	bcs.n	800623a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8006236:	2313      	movs	r3, #19
 8006238:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800623a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d112      	bne.n	8006266 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8006240:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006242:	9305      	str	r3, [sp, #20]
 8006244:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006246:	9304      	str	r3, [sp, #16]
 8006248:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800624a:	9303      	str	r3, [sp, #12]
 800624c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800624e:	9302      	str	r3, [sp, #8]
 8006250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006252:	9301      	str	r3, [sp, #4]
 8006254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	68f8      	ldr	r0, [r7, #12]
 8006260:	f7fe fe3c 	bl	8004edc <_tx_thread_create>
 8006264:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8006266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8006268:	4618      	mov	r0, r3
 800626a:	3750      	adds	r7, #80	; 0x50
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	20000e7c 	.word	0x20000e7c
 8006274:	20000dec 	.word	0x20000dec
 8006278:	20000df0 	.word	0x20000df0
 800627c:	20000de4 	.word	0x20000de4
 8006280:	20000f2c 	.word	0x20000f2c
 8006284:	2000000c 	.word	0x2000000c

08006288 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800628e:	f3ef 8310 	mrs	r3, PRIMASK
 8006292:	60fb      	str	r3, [r7, #12]
    return(posture);
 8006294:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8006296:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006298:	b672      	cpsid	i
    return(int_posture);
 800629a:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 800629c:	617b      	str	r3, [r7, #20]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800629e:	463b      	mov	r3, r7
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 f835 	bl	8006310 <tx_timer_get_next>
 80062a6:	6138      	str	r0, [r7, #16]
        tx_low_power_next_expiration = 0xFFFFFFFF;
        timers_active = TX_TRUE;
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d103      	bne.n	80062b6 <tx_low_power_enter+0x2e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7fa f9a1 	bl	80005f8 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 80062b6:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <tx_low_power_enter+0x4c>)
 80062b8:	2201      	movs	r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f383 8810 	msr	PRIMASK, r3
}
 80062c6:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 80062c8:	f7fa f9a0 	bl	800060c <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 80062cc:	bf00      	nop
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	200013ec 	.word	0x200013ec

080062d8 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b082      	sub	sp, #8
 80062dc:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 80062de:	4b0b      	ldr	r3, [pc, #44]	; (800630c <tx_low_power_exit+0x34>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d00d      	beq.n	8006302 <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 80062e6:	4b09      	ldr	r3, [pc, #36]	; (800630c <tx_low_power_exit+0x34>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 80062ec:	f7fa f99c 	bl	8000628 <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 80062f0:	f7fa f9a6 	bl	8000640 <App_ThreadX_LowPower_Timer_Adjust>
 80062f4:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f86f 	bl	80063e0 <tx_time_increment>
        }
    }
}
 8006302:	bf00      	nop
 8006304:	3708      	adds	r7, #8
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	200013ec 	.word	0x200013ec

08006310 <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 8006310:	b480      	push	{r7}
 8006312:	b08d      	sub	sp, #52	; 0x34
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 8006318:	f04f 33ff 	mov.w	r3, #4294967295
 800631c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800631e:	f3ef 8310 	mrs	r3, PRIMASK
 8006322:	617b      	str	r3, [r7, #20]
    return(posture);
 8006324:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8006326:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006328:	b672      	cpsid	i
    return(int_posture);
 800632a:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 800632c:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 800632e:	4b29      	ldr	r3, [pc, #164]	; (80063d4 <tx_timer_get_next+0xc4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 8006334:	2300      	movs	r3, #0
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
 8006338:	e02f      	b.n	800639a <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01d      	beq.n	800637e <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 8006342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b20      	cmp	r3, #32
 800634e:	d906      	bls.n	800635e <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	4413      	add	r3, r2
 8006358:	3b20      	subs	r3, #32
 800635a:	623b      	str	r3, [r7, #32]
 800635c:	e001      	b.n	8006362 <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 8006362:	69fa      	ldr	r2, [r7, #28]
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	429a      	cmp	r2, r3
 8006368:	d901      	bls.n	800636e <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800636e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 8006374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800637a:	429a      	cmp	r2, r3
 800637c:	d1e4      	bne.n	8006348 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 800637e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006380:	3304      	adds	r3, #4
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 8006384:	4b14      	ldr	r3, [pc, #80]	; (80063d8 <tx_timer_get_next+0xc8>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800638a:	429a      	cmp	r2, r3
 800638c:	d302      	bcc.n	8006394 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800638e:	4b13      	ldr	r3, [pc, #76]	; (80063dc <tx_timer_get_next+0xcc>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	3301      	adds	r3, #1
 8006398:	627b      	str	r3, [r7, #36]	; 0x24
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	2b1f      	cmp	r3, #31
 800639e:	d9cc      	bls.n	800633a <tx_timer_get_next+0x2a>
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f383 8810 	msr	PRIMASK, r3
}
 80063aa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d004      	beq.n	80063be <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 80063ba:	2301      	movs	r3, #1
 80063bc:	e003      	b.n	80063c6 <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 80063c4:	2300      	movs	r3, #0
    }
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3734      	adds	r7, #52	; 0x34
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	20000f18 	.word	0x20000f18
 80063d8:	20000f14 	.word	0x20000f14
 80063dc:	20000f10 	.word	0x20000f10

080063e0 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	; 0x28
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f000 809b 	beq.w	8006526 <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80063f0:	f3ef 8310 	mrs	r3, PRIMASK
 80063f4:	613b      	str	r3, [r7, #16]
    return(posture);
 80063f6:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 80063f8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 80063fa:	b672      	cpsid	i
    return(int_posture);
 80063fc:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 80063fe:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 8006400:	4b4b      	ldr	r3, [pc, #300]	; (8006530 <tx_time_increment+0x150>)
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4413      	add	r3, r2
 8006408:	4a49      	ldr	r2, [pc, #292]	; (8006530 <tx_time_increment+0x150>)
 800640a:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 800640c:	4b49      	ldr	r3, [pc, #292]	; (8006534 <tx_time_increment+0x154>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00e      	beq.n	8006432 <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 8006414:	4b47      	ldr	r3, [pc, #284]	; (8006534 <tx_time_increment+0x154>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	429a      	cmp	r2, r3
 800641c:	d206      	bcs.n	800642c <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800641e:	4b45      	ldr	r3, [pc, #276]	; (8006534 <tx_time_increment+0x154>)
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	4a43      	ldr	r2, [pc, #268]	; (8006534 <tx_time_increment+0x154>)
 8006428:	6013      	str	r3, [r2, #0]
 800642a:	e002      	b.n	8006432 <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 800642c:	4b41      	ldr	r3, [pc, #260]	; (8006534 <tx_time_increment+0x154>)
 800642e:	2201      	movs	r2, #1
 8006430:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 8006432:	4b41      	ldr	r3, [pc, #260]	; (8006538 <tx_time_increment+0x158>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 8006438:	2300      	movs	r3, #0
 800643a:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800643c:	2300      	movs	r3, #0
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
 8006440:	e046      	b.n	80064d0 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 8006442:	6a3b      	ldr	r3, [r7, #32]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d034      	beq.n	80064b4 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800644a:	6a3b      	ldr	r3, [r7, #32]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2b20      	cmp	r3, #32
 8006456:	d908      	bls.n	800646a <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	4413      	add	r3, r2
 8006460:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	e003      	b.n	8006472 <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	1c5a      	adds	r2, r3, #1
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	429a      	cmp	r2, r3
 8006480:	d1e6      	bne.n	8006450 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	695b      	ldr	r3, [r3, #20]
 8006488:	2200      	movs	r2, #0
 800648a:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d103      	bne.n	800649a <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	61bb      	str	r3, [r7, #24]
 8006498:	e009      	b.n	80064ae <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	6a3a      	ldr	r2, [r7, #32]
 80064a0:	6812      	ldr	r2, [r2, #0]
 80064a2:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	695a      	ldr	r2, [r3, #20]
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 80064ae:	6a3b      	ldr	r3, [r7, #32]
 80064b0:	2200      	movs	r2, #0
 80064b2:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	3304      	adds	r3, #4
 80064b8:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 80064ba:	4b20      	ldr	r3, [pc, #128]	; (800653c <tx_time_increment+0x15c>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6a3a      	ldr	r2, [r7, #32]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d302      	bcc.n	80064ca <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 80064c4:	4b1e      	ldr	r3, [pc, #120]	; (8006540 <tx_time_increment+0x160>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	3301      	adds	r3, #1
 80064ce:	627b      	str	r3, [r7, #36]	; 0x24
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	2b1f      	cmp	r3, #31
 80064d4:	d9b5      	bls.n	8006442 <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 80064d6:	4b1a      	ldr	r3, [pc, #104]	; (8006540 <tx_time_increment+0x160>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a17      	ldr	r2, [pc, #92]	; (8006538 <tx_time_increment+0x158>)
 80064dc:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 80064de:	e019      	b.n	8006514 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d206      	bcs.n	8006502 <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	1ad2      	subs	r2, r2, r3
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	e002      	b.n	8006508 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	2201      	movs	r2, #1
 8006506:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	2200      	movs	r2, #0
 800650c:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800650e:	69f8      	ldr	r0, [r7, #28]
 8006510:	f7ff f9fe 	bl	8005910 <_tx_timer_system_activate>
    while (temp_list_head)
 8006514:	69bb      	ldr	r3, [r7, #24]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e2      	bne.n	80064e0 <tx_time_increment+0x100>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	f383 8810 	msr	PRIMASK, r3
}
 8006524:	e000      	b.n	8006528 <tx_time_increment+0x148>
        return;
 8006526:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 8006528:	3728      	adds	r7, #40	; 0x28
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	20000e88 	.word	0x20000e88
 8006534:	200013e8 	.word	0x200013e8
 8006538:	20000f18 	.word	0x20000f18
 800653c:	20000f14 	.word	0x20000f14
 8006540:	20000f10 	.word	0x20000f10

08006544 <memset>:
 8006544:	4402      	add	r2, r0
 8006546:	4603      	mov	r3, r0
 8006548:	4293      	cmp	r3, r2
 800654a:	d100      	bne.n	800654e <memset+0xa>
 800654c:	4770      	bx	lr
 800654e:	f803 1b01 	strb.w	r1, [r3], #1
 8006552:	e7f9      	b.n	8006548 <memset+0x4>

08006554 <__libc_init_array>:
 8006554:	b570      	push	{r4, r5, r6, lr}
 8006556:	4d0d      	ldr	r5, [pc, #52]	; (800658c <__libc_init_array+0x38>)
 8006558:	2600      	movs	r6, #0
 800655a:	4c0d      	ldr	r4, [pc, #52]	; (8006590 <__libc_init_array+0x3c>)
 800655c:	1b64      	subs	r4, r4, r5
 800655e:	10a4      	asrs	r4, r4, #2
 8006560:	42a6      	cmp	r6, r4
 8006562:	d109      	bne.n	8006578 <__libc_init_array+0x24>
 8006564:	4d0b      	ldr	r5, [pc, #44]	; (8006594 <__libc_init_array+0x40>)
 8006566:	2600      	movs	r6, #0
 8006568:	4c0b      	ldr	r4, [pc, #44]	; (8006598 <__libc_init_array+0x44>)
 800656a:	f000 f817 	bl	800659c <_init>
 800656e:	1b64      	subs	r4, r4, r5
 8006570:	10a4      	asrs	r4, r4, #2
 8006572:	42a6      	cmp	r6, r4
 8006574:	d105      	bne.n	8006582 <__libc_init_array+0x2e>
 8006576:	bd70      	pop	{r4, r5, r6, pc}
 8006578:	f855 3b04 	ldr.w	r3, [r5], #4
 800657c:	3601      	adds	r6, #1
 800657e:	4798      	blx	r3
 8006580:	e7ee      	b.n	8006560 <__libc_init_array+0xc>
 8006582:	f855 3b04 	ldr.w	r3, [r5], #4
 8006586:	3601      	adds	r6, #1
 8006588:	4798      	blx	r3
 800658a:	e7f2      	b.n	8006572 <__libc_init_array+0x1e>
 800658c:	080066d8 	.word	0x080066d8
 8006590:	080066d8 	.word	0x080066d8
 8006594:	080066d8 	.word	0x080066d8
 8006598:	080066dc 	.word	0x080066dc

0800659c <_init>:
 800659c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659e:	bf00      	nop
 80065a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065a2:	bc08      	pop	{r3}
 80065a4:	469e      	mov	lr, r3
 80065a6:	4770      	bx	lr

080065a8 <_fini>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	bf00      	nop
 80065ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ae:	bc08      	pop	{r3}
 80065b0:	469e      	mov	lr, r3
 80065b2:	4770      	bx	lr
