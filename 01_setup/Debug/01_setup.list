
01_setup.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ab4  08000238  08000238  00010238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015f  08009cec  08009cec  00019cec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009e4c  08009e4c  00019e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009e54  08009e54  00019e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009e58  08009e58  00019e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000005c  20000000  08009e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000004d4  2000005c  08009eb8  0002005c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000530  08009eb8  00020530  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c5a9  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000318b  00000000  00000000  0003c67e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000016f8  00000000  00000000  0003f810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 000011b6  00000000  00000000  00040f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003621b  00000000  00000000  000420be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001b3f1  00000000  00000000  000782d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0015bcb5  00000000  00000000  000936ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006854  00000000  00000000  001ef380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006c  00000000  00000000  001f5bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000005c 	.word	0x2000005c
 8000254:	00000000 	.word	0x00000000
 8000258:	08009cd4 	.word	0x08009cd4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000060 	.word	0x20000060
 8000274:	08009cd4 	.word	0x08009cd4

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295
 8000288:	f04f 30ff 	movne.w	r0, #4294967295
 800028c:	f000 b982 	b.w	8000594 <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80002ae:	460d      	mov	r5, r1
 80002b0:	4604      	mov	r4, r0
 80002b2:	460f      	mov	r7, r1
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d146      	bne.n	8000346 <__udivmoddi4+0x9e>
 80002b8:	428a      	cmp	r2, r1
 80002ba:	4694      	mov	ip, r2
 80002bc:	d95e      	bls.n	800037c <__udivmoddi4+0xd4>
 80002be:	fab2 f382 	clz	r3, r2
 80002c2:	b143      	cbz	r3, 80002d6 <__udivmoddi4+0x2e>
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	409c      	lsls	r4, r3
 80002d0:	fa20 f202 	lsr.w	r2, r0, r2
 80002d4:	4317      	orrs	r7, r2
 80002d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002da:	fa1f f58c 	uxth.w	r5, ip
 80002de:	0c22      	lsrs	r2, r4, #16
 80002e0:	fbb7 f1fe 	udiv	r1, r7, lr
 80002e4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e8:	fb01 f005 	mul.w	r0, r1, r5
 80002ec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f0:	4290      	cmp	r0, r2
 80002f2:	d908      	bls.n	8000306 <__udivmoddi4+0x5e>
 80002f4:	eb1c 0202 	adds.w	r2, ip, r2
 80002f8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002fc:	d202      	bcs.n	8000304 <__udivmoddi4+0x5c>
 80002fe:	4290      	cmp	r0, r2
 8000300:	f200 8134 	bhi.w	800056c <__udivmoddi4+0x2c4>
 8000304:	4639      	mov	r1, r7
 8000306:	1a12      	subs	r2, r2, r0
 8000308:	b2a4      	uxth	r4, r4
 800030a:	fbb2 f0fe 	udiv	r0, r2, lr
 800030e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800031a:	42a5      	cmp	r5, r4
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x88>
 800031e:	eb1c 0404 	adds.w	r4, ip, r4
 8000322:	f100 32ff 	add.w	r2, r0, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x86>
 8000328:	42a5      	cmp	r5, r4
 800032a:	f200 8119 	bhi.w	8000560 <__udivmoddi4+0x2b8>
 800032e:	4610      	mov	r0, r2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0x9a>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xb4>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80fc 	beq.w	8000548 <__udivmoddi4+0x2a0>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d14c      	bne.n	80003fe <__udivmoddi4+0x156>
 8000364:	42ab      	cmp	r3, r5
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2a6>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2a6>
 8000370:	4608      	mov	r0, r1
 8000372:	2e00      	cmp	r6, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0x9a>
 8000376:	e9c6 4700 	strd	r4, r7, [r6]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xd8>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809f 	bne.w	80004c8 <__udivmoddi4+0x220>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f5fe 	udiv	r5, r2, lr
 800039a:	fb0e 2015 	mls	r0, lr, r5, r2
 800039e:	0c22      	lsrs	r2, r4, #16
 80003a0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a4:	fb07 f005 	mul.w	r0, r7, r5
 80003a8:	4290      	cmp	r0, r2
 80003aa:	d90f      	bls.n	80003cc <__udivmoddi4+0x124>
 80003ac:	eb1c 0202 	adds.w	r2, ip, r2
 80003b0:	f105 38ff 	add.w	r8, r5, #4294967295
 80003b4:	bf2c      	ite	cs
 80003b6:	f04f 0901 	movcs.w	r9, #1
 80003ba:	f04f 0900 	movcc.w	r9, #0
 80003be:	4290      	cmp	r0, r2
 80003c0:	d903      	bls.n	80003ca <__udivmoddi4+0x122>
 80003c2:	f1b9 0f00 	cmp.w	r9, #0
 80003c6:	f000 80ce 	beq.w	8000566 <__udivmoddi4+0x2be>
 80003ca:	4645      	mov	r5, r8
 80003cc:	1a12      	subs	r2, r2, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb2 f0fe 	udiv	r0, r2, lr
 80003d4:	fb0e 2210 	mls	r2, lr, r0, r2
 80003d8:	fb00 f707 	mul.w	r7, r0, r7
 80003dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e0:	42a7      	cmp	r7, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x14e>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x14c>
 80003ee:	42a7      	cmp	r7, r4
 80003f0:	f200 80b3 	bhi.w	800055a <__udivmoddi4+0x2b2>
 80003f4:	4610      	mov	r0, r2
 80003f6:	1be4      	subs	r4, r4, r7
 80003f8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003fc:	e79c      	b.n	8000338 <__udivmoddi4+0x90>
 80003fe:	f1c1 0420 	rsb	r4, r1, #32
 8000402:	408b      	lsls	r3, r1
 8000404:	fa05 fc01 	lsl.w	ip, r5, r1
 8000408:	fa22 f704 	lsr.w	r7, r2, r4
 800040c:	40e5      	lsrs	r5, r4
 800040e:	408a      	lsls	r2, r1
 8000410:	431f      	orrs	r7, r3
 8000412:	fa20 f304 	lsr.w	r3, r0, r4
 8000416:	4088      	lsls	r0, r1
 8000418:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800041c:	ea43 030c 	orr.w	r3, r3, ip
 8000420:	fa1f fc87 	uxth.w	ip, r7
 8000424:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000428:	fbb5 fef8 	udiv	lr, r5, r8
 800042c:	fb08 551e 	mls	r5, r8, lr, r5
 8000430:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a9      	cmp	r9, r5
 800043a:	d90e      	bls.n	800045a <__udivmoddi4+0x1b2>
 800043c:	197d      	adds	r5, r7, r5
 800043e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	45a9      	cmp	r9, r5
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b0>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ca>
 8000458:	46d6      	mov	lr, sl
 800045a:	eba5 0509 	sub.w	r5, r5, r9
 800045e:	fa1f f983 	uxth.w	r9, r3
 8000462:	fbb5 f3f8 	udiv	r3, r5, r8
 8000466:	fb08 5513 	mls	r5, r8, r3, r5
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 8000472:	45ac      	cmp	ip, r5
 8000474:	d906      	bls.n	8000484 <__udivmoddi4+0x1dc>
 8000476:	197d      	adds	r5, r7, r5
 8000478:	f103 38ff 	add.w	r8, r3, #4294967295
 800047c:	d201      	bcs.n	8000482 <__udivmoddi4+0x1da>
 800047e:	45ac      	cmp	ip, r5
 8000480:	d87e      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 8000482:	4643      	mov	r3, r8
 8000484:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000488:	eba5 050c 	sub.w	r5, r5, ip
 800048c:	fba3 9802 	umull	r9, r8, r3, r2
 8000490:	4545      	cmp	r5, r8
 8000492:	46ce      	mov	lr, r9
 8000494:	46c4      	mov	ip, r8
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0x1f6>
 8000498:	d106      	bne.n	80004a8 <__udivmoddi4+0x200>
 800049a:	4548      	cmp	r0, r9
 800049c:	d204      	bcs.n	80004a8 <__udivmoddi4+0x200>
 800049e:	3b01      	subs	r3, #1
 80004a0:	ebb9 0e02 	subs.w	lr, r9, r2
 80004a4:	eb68 0c07 	sbc.w	ip, r8, r7
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d06f      	beq.n	800058c <__udivmoddi4+0x2e4>
 80004ac:	ebb0 020e 	subs.w	r2, r0, lr
 80004b0:	eb65 050c 	sbc.w	r5, r5, ip
 80004b4:	40ca      	lsrs	r2, r1
 80004b6:	fa05 f404 	lsl.w	r4, r5, r4
 80004ba:	40cd      	lsrs	r5, r1
 80004bc:	4618      	mov	r0, r3
 80004be:	4314      	orrs	r4, r2
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 4500 	strd	r4, r5, [r6]
 80004c6:	e73c      	b.n	8000342 <__udivmoddi4+0x9a>
 80004c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004cc:	f1c3 0220 	rsb	r2, r3, #32
 80004d0:	4099      	lsls	r1, r3
 80004d2:	409c      	lsls	r4, r3
 80004d4:	40d5      	lsrs	r5, r2
 80004d6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004da:	fa20 f202 	lsr.w	r2, r0, r2
 80004de:	fa1f f78c 	uxth.w	r7, ip
 80004e2:	fbb5 f0fe 	udiv	r0, r5, lr
 80004e6:	430a      	orrs	r2, r1
 80004e8:	fb0e 5510 	mls	r5, lr, r0, r5
 80004ec:	0c11      	lsrs	r1, r2, #16
 80004ee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004f2:	fb00 f507 	mul.w	r5, r0, r7
 80004f6:	428d      	cmp	r5, r1
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x270>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	428d      	cmp	r5, r1
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x26e>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000516:	4640      	mov	r0, r8
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5fe 	udiv	r5, r1, lr
 8000520:	fb0e 1115 	mls	r1, lr, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f107 	mul.w	r1, r5, r7
 800052c:	4291      	cmp	r1, r2
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x298>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x296>
 800053a:	4291      	cmp	r1, r2
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2de>
 800053e:	4645      	mov	r5, r8
 8000540:	1a52      	subs	r2, r2, r1
 8000542:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000546:	e726      	b.n	8000396 <__udivmoddi4+0xee>
 8000548:	4631      	mov	r1, r6
 800054a:	4630      	mov	r0, r6
 800054c:	e6f9      	b.n	8000342 <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb65 0203 	sbc.w	r2, r5, r3
 8000554:	2001      	movs	r0, #1
 8000556:	4617      	mov	r7, r2
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xca>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e74a      	b.n	80003f6 <__udivmoddi4+0x14e>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e4      	b.n	8000330 <__udivmoddi4+0x88>
 8000566:	3d02      	subs	r5, #2
 8000568:	4462      	add	r2, ip
 800056a:	e72f      	b.n	80003cc <__udivmoddi4+0x124>
 800056c:	3902      	subs	r1, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c9      	b.n	8000306 <__udivmoddi4+0x5e>
 8000572:	f1ae 0e02 	sub.w	lr, lr, #2
 8000576:	443d      	add	r5, r7
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b2>
 800057a:	3802      	subs	r0, #2
 800057c:	4461      	add	r1, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x270>
 8000580:	3b02      	subs	r3, #2
 8000582:	443d      	add	r5, r7
 8000584:	e77e      	b.n	8000484 <__udivmoddi4+0x1dc>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x298>
 800058c:	4618      	mov	r0, r3
 800058e:	4631      	mov	r1, r6
 8000590:	e6d7      	b.n	8000342 <__udivmoddi4+0x9a>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <fm_debug_msg_uart>:
 * @retval None
 *
 *
 */
void fm_debug_msg_uart(const char *p_msg, uint8_t len)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
    HAL_StatusTypeDef ret = HAL_BUSY;
 80005a4:	2302      	movs	r3, #2
 80005a6:	73fb      	strb	r3, [r7, #15]
    /*
     * La funcion HAL_UART_Transmit retorna HAL_BUSY, si el UART esta en uso,
     * no se logro tramismitir.
     *
     */
    ret = HAL_UART_Transmit(&huart1, (const uint8_t *)p_msg, len - 1, WAIT_FOR_UART_10MS);
 80005a8:	78fb      	ldrb	r3, [r7, #3]
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	3b01      	subs	r3, #1
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	230a      	movs	r3, #10
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <fm_debug_msg_uart+0x50>)
 80005b6:	f008 f96b 	bl	8008890 <HAL_UART_Transmit>
 80005ba:	4603      	mov	r3, r0
 80005bc:	73fb      	strb	r3, [r7, #15]

    if(ret == HAL_BUSY)
 80005be:	7bfb      	ldrb	r3, [r7, #15]
 80005c0:	2b02      	cmp	r3, #2
 80005c2:	d105      	bne.n	80005d0 <fm_debug_msg_uart+0x38>
	{
		HAL_GPIO_WritePin(LED_1_ERROR_GPIO_Port, LED_1_ERROR_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2120      	movs	r1, #32
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <fm_debug_msg_uart+0x54>)
 80005ca:	f003 f825 	bl	8003618 <HAL_GPIO_WritePin>
    }




}
 80005ce:	e007      	b.n	80005e0 <fm_debug_msg_uart+0x48>
    	ret = HAL_UART_Transmit(&huart1, '\n', 1, WAIT_FOR_UART_10MS);
 80005d0:	230a      	movs	r3, #10
 80005d2:	2201      	movs	r2, #1
 80005d4:	210a      	movs	r1, #10
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <fm_debug_msg_uart+0x50>)
 80005d8:	f008 f95a 	bl	8008890 <HAL_UART_Transmit>
 80005dc:	4603      	mov	r3, r0
 80005de:	73fb      	strb	r3, [r7, #15]
}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	200002b4 	.word	0x200002b4
 80005ec:	42020400 	.word	0x42020400

080005f0 <fm_debug_int32_uart>:
    snprintf(str, sizeof(str), "%lu\n", num);
    fm_debug_msg_uart(str, SIZE_OF_UINT32);
}

void fm_debug_int32_uart(int32_t num)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    char str[SIZE_OF_INT32];
    snprintf(str, sizeof(str), "%ld\n", num);
 80005f8:	f107 000c 	add.w	r0, r7, #12
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a07      	ldr	r2, [pc, #28]	; (800061c <fm_debug_int32_uart+0x2c>)
 8000600:	210c      	movs	r1, #12
 8000602:	f008 fea1 	bl	8009348 <sniprintf>
    fm_debug_msg_uart(str, SIZE_OF_INT32);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	210c      	movs	r1, #12
 800060c:	4618      	mov	r0, r3
 800060e:	f7ff ffc3 	bl	8000598 <fm_debug_msg_uart>
}
 8000612:	bf00      	nop
 8000614:	3718      	adds	r7, #24
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	08009cf8 	.word	0x08009cf8

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b087      	sub	sp, #28
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	// El main tiene puede ejecutar diferentes rutinas, main_optio elige una.
	uint8_t main_option = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	75fb      	strb	r3, [r7, #23]
	char buffer_msg[] = "flowmeet s.r.l.";
 800062a:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <main+0x84>)
 800062c:	463c      	mov	r4, r7
 800062e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	int32_t counter = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 ffd4 	bl	80015e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f836 	bl	80006ac <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000640:	f000 f894 	bl	800076c <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000644:	f000 fb52 	bl	8000cec <MX_GPIO_Init>
  MX_SPI1_Init();
 8000648:	f000 fa48 	bl	8000adc <MX_SPI1_Init>
  MX_ADC1_Init();
 800064c:	f000 f89c 	bl	8000788 <MX_ADC1_Init>
  MX_ICACHE_Init();
 8000650:	f000 f908 	bl	8000864 <MX_ICACHE_Init>
  MX_LPTIM1_Init();
 8000654:	f000 f91a 	bl	800088c <MX_LPTIM1_Init>
  MX_LPTIM3_Init();
 8000658:	f000 f94a 	bl	80008f0 <MX_LPTIM3_Init>
  MX_LPTIM4_Init();
 800065c:	f000 f978 	bl	8000950 <MX_LPTIM4_Init>
  MX_RTC_Init();
 8000660:	f000 f9ae 	bl	80009c0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000664:	f000 faaa 	bl	8000bbc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000668:	f000 faf4 	bl	8000c54 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(main_option)
 800066c:	7dfb      	ldrb	r3, [r7, #23]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d002      	beq.n	8000678 <main+0x58>
 8000672:	2b02      	cmp	r3, #2
 8000674:	d005      	beq.n	8000682 <main+0x62>
		  fm_debug_int32_uart(key_counter);


		  break;
	  default:
		  break;
 8000676:	e013      	b.n	80006a0 <main+0x80>
		  HAL_Delay(1000);
 8000678:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800067c:	f001 f836 	bl	80016ec <HAL_Delay>
		  break;
 8000680:	e00e      	b.n	80006a0 <main+0x80>
		  counter = key_counter;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <main+0x88>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	613b      	str	r3, [r7, #16]
		  while(counter == key_counter);
 8000688:	bf00      	nop
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <main+0x88>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	693a      	ldr	r2, [r7, #16]
 8000690:	429a      	cmp	r2, r3
 8000692:	d0fa      	beq.n	800068a <main+0x6a>
		  fm_debug_int32_uart(key_counter);
 8000694:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <main+0x88>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	f7ff ffa9 	bl	80005f0 <fm_debug_int32_uart>
		  break;
 800069e:	bf00      	nop
	  switch(main_option)
 80006a0:	e7e4      	b.n	800066c <main+0x4c>
 80006a2:	bf00      	nop
 80006a4:	08009d08 	.word	0x08009d08
 80006a8:	200003dc 	.word	0x200003dc

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09e      	sub	sp, #120	; 0x78
 80006b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b2:	f107 0318 	add.w	r3, r7, #24
 80006b6:	2260      	movs	r2, #96	; 0x60
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f008 fe78 	bl	80093b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c0:	463b      	mov	r3, r7
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
 80006ce:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 80006d0:	2000      	movs	r0, #0
 80006d2:	f003 fb29 	bl	8003d28 <HAL_PWREx_ControlVoltageScaling>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006dc:	f000 fbce 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80006e0:	235a      	movs	r3, #90	; 0x5a
 80006e2:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI|RCC_OSCILLATORTYPE_MSIK;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ea:	2310      	movs	r3, #16
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f4:	2301      	movs	r3, #1
 80006f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006f8:	2310      	movs	r3, #16
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_1;
 80006fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000700:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIKClockRange = RCC_MSIKRANGE_1;
 8000706:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800070a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSIKState = RCC_MSIK_ON;
 800070c:	2310      	movs	r3, #16
 800070e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000710:	2300      	movs	r3, #0
 8000712:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0318 	add.w	r3, r7, #24
 8000718:	4618      	mov	r0, r3
 800071a:	f003 fc01 	bl	8003f20 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000724:	f000 fbaa 	bl	8000e7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	231f      	movs	r3, #31
 800072a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	2101      	movs	r1, #1
 8000744:	4618      	mov	r0, r3
 8000746:	f004 fac7 	bl	8004cd8 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000750:	f000 fb94 	bl	8000e7c <Error_Handler>
  }

  /** Enable the force of MSIK in stop mode
  */
  __HAL_RCC_MSIKSTOP_ENABLE();
 8000754:	4b04      	ldr	r3, [pc, #16]	; (8000768 <SystemClock_Config+0xbc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a03      	ldr	r2, [pc, #12]	; (8000768 <SystemClock_Config+0xbc>)
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	3778      	adds	r7, #120	; 0x78
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	46020c00 	.word	0x46020c00

0800076c <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000770:	f003 fbc6 	bl	8003f00 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000774:	2002      	movs	r0, #2
 8000776:	f003 fb63 	bl	8003e40 <HAL_PWREx_ConfigSupply>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000780:	f000 fb7c 	bl	8000e7c <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800078e:	463b      	mov	r3, r7
 8000790:	2220      	movs	r2, #32
 8000792:	2100      	movs	r1, #0
 8000794:	4618      	mov	r0, r3
 8000796:	f008 fe0b 	bl	80093b0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800079a:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <MX_ADC1_Init+0xd0>)
 800079c:	4a2f      	ldr	r2, [pc, #188]	; (800085c <MX_ADC1_Init+0xd4>)
 800079e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007a0:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007a2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a8:	4b2b      	ldr	r3, [pc, #172]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007aa:	2204      	movs	r2, #4
 80007ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80007ae:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ba:	4b27      	ldr	r3, [pc, #156]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007bc:	2204      	movs	r2, #4
 80007be:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c6:	4b24      	ldr	r3, [pc, #144]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.NbrOfConversion = 1;
 80007ce:	4b22      	ldr	r3, [pc, #136]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007d0:	2201      	movs	r2, #1
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007d4:	4b20      	ldr	r3, [pc, #128]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007dc:	4b1e      	ldr	r3, [pc, #120]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007de:	2200      	movs	r2, #0
 80007e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007e2:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007f0:	4b19      	ldr	r3, [pc, #100]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	669a      	str	r2, [r3, #104]	; 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007fc:	4b16      	ldr	r3, [pc, #88]	; (8000858 <MX_ADC1_Init+0xd0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	651a      	str	r2, [r3, #80]	; 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <MX_ADC1_Init+0xd0>)
 8000804:	2200      	movs	r2, #0
 8000806:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000808:	4b13      	ldr	r3, [pc, #76]	; (8000858 <MX_ADC1_Init+0xd0>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000810:	4811      	ldr	r0, [pc, #68]	; (8000858 <MX_ADC1_Init+0xd0>)
 8000812:	f001 fa77 	bl	8001d04 <HAL_ADC_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800081c:	f000 fb2e 	bl	8000e7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_ADC1_Init+0xd8>)
 8000822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000824:	2306      	movs	r3, #6
 8000826:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_391CYCLES_5;
 8000828:	2306      	movs	r3, #6
 800082a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800082c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000830:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000832:	2304      	movs	r3, #4
 8000834:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800083a:	463b      	mov	r3, r7
 800083c:	4619      	mov	r1, r3
 800083e:	4806      	ldr	r0, [pc, #24]	; (8000858 <MX_ADC1_Init+0xd0>)
 8000840:	f001 fd2a 	bl	8002298 <HAL_ADC_ConfigChannel>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800084a:	f000 fb17 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000078 	.word	0x20000078
 800085c:	42028000 	.word	0x42028000
 8000860:	ce080000 	.word	0xce080000

08000864 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000868:	2000      	movs	r0, #0
 800086a:	f002 ff29 	bl	80036c0 <HAL_ICACHE_ConfigAssociativityMode>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000874:	f000 fb02 	bl	8000e7c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000878:	f002 ff42 	bl	8003700 <HAL_ICACHE_Enable>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000882:	f000 fafb 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000890:	4b15      	ldr	r3, [pc, #84]	; (80008e8 <MX_LPTIM1_Init+0x5c>)
 8000892:	4a16      	ldr	r2, [pc, #88]	; (80008ec <MX_LPTIM1_Init+0x60>)
 8000894:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_LPTIM1_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV16;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_LPTIM1_Init+0x5c>)
 800089e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008a2:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <MX_LPTIM1_Init+0x5c>)
 80008a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008aa:	615a      	str	r2, [r3, #20]
  hlptim1.Init.Period = 65535;
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_LPTIM1_Init+0x5c>)
 80008ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80008b4:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_LPTIM1_Init+0x5c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80008ba:	4b0b      	ldr	r3, [pc, #44]	; (80008e8 <MX_LPTIM1_Init+0x5c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80008c0:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_LPTIM1_Init+0x5c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80008c6:	4b08      	ldr	r3, [pc, #32]	; (80008e8 <MX_LPTIM1_Init+0x5c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim1.Init.RepetitionCounter = 0;
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_LPTIM1_Init+0x5c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <MX_LPTIM1_Init+0x5c>)
 80008d4:	f002 ff24 	bl	8003720 <HAL_LPTIM_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_LPTIM1_Init+0x56>
  {
    Error_Handler();
 80008de:	f000 facd 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000104 	.word	0x20000104
 80008ec:	46004400 	.word	0x46004400

080008f0 <MX_LPTIM3_Init>:
  * @brief LPTIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM3_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM3_Init 0 */

  /* USER CODE BEGIN LPTIM3_Init 1 */

  /* USER CODE END LPTIM3_Init 1 */
  hlptim3.Instance = LPTIM3;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <MX_LPTIM3_Init+0x58>)
 80008f6:	4a15      	ldr	r2, [pc, #84]	; (800094c <MX_LPTIM3_Init+0x5c>)
 80008f8:	601a      	str	r2, [r3, #0]
  hlptim3.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_LPTIM3_Init+0x58>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  hlptim3.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <MX_LPTIM3_Init+0x58>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hlptim3.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_LPTIM3_Init+0x58>)
 8000908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800090c:	615a      	str	r2, [r3, #20]
  hlptim3.Init.Period = 65535;
 800090e:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <MX_LPTIM3_Init+0x58>)
 8000910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000914:	621a      	str	r2, [r3, #32]
  hlptim3.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_LPTIM3_Init+0x58>)
 8000918:	2200      	movs	r2, #0
 800091a:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim3.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_LPTIM3_Init+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim3.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_LPTIM3_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim3.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_LPTIM3_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim3.Init.RepetitionCounter = 0;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_LPTIM3_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim3) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_LPTIM3_Init+0x58>)
 8000936:	f002 fef3 	bl	8003720 <HAL_LPTIM_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_LPTIM3_Init+0x54>
  {
    Error_Handler();
 8000940:	f000 fa9c 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM3_Init 2 */

  /* USER CODE END LPTIM3_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20000154 	.word	0x20000154
 800094c:	46004800 	.word	0x46004800

08000950 <MX_LPTIM4_Init>:
  * @brief LPTIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM4_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM4_Init 0 */

  /* USER CODE BEGIN LPTIM4_Init 1 */

  /* USER CODE END LPTIM4_Init 1 */
  hlptim4.Instance = LPTIM4;
 8000954:	4b18      	ldr	r3, [pc, #96]	; (80009b8 <MX_LPTIM4_Init+0x68>)
 8000956:	4a19      	ldr	r2, [pc, #100]	; (80009bc <MX_LPTIM4_Init+0x6c>)
 8000958:	601a      	str	r2, [r3, #0]
  hlptim4.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <MX_LPTIM4_Init+0x68>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  hlptim4.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000960:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <MX_LPTIM4_Init+0x68>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hlptim4.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <MX_LPTIM4_Init+0x68>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hlptim4.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 800096c:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <MX_LPTIM4_Init+0x68>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
  hlptim4.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <MX_LPTIM4_Init+0x68>)
 8000974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000978:	615a      	str	r2, [r3, #20]
  hlptim4.Init.Period = 65535;
 800097a:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <MX_LPTIM4_Init+0x68>)
 800097c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000980:	621a      	str	r2, [r3, #32]
  hlptim4.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000982:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <MX_LPTIM4_Init+0x68>)
 8000984:	2200      	movs	r2, #0
 8000986:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim4.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <MX_LPTIM4_Init+0x68>)
 800098a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800098e:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim4.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <MX_LPTIM4_Init+0x68>)
 8000992:	2200      	movs	r2, #0
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim4.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000996:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <MX_LPTIM4_Init+0x68>)
 8000998:	2200      	movs	r2, #0
 800099a:	631a      	str	r2, [r3, #48]	; 0x30
  hlptim4.Init.RepetitionCounter = 0;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <MX_LPTIM4_Init+0x68>)
 800099e:	2200      	movs	r2, #0
 80009a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_LPTIM_Init(&hlptim4) != HAL_OK)
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <MX_LPTIM4_Init+0x68>)
 80009a4:	f002 febc 	bl	8003720 <HAL_LPTIM_Init>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_LPTIM4_Init+0x62>
  {
    Error_Handler();
 80009ae:	f000 fa65 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM4_Init 2 */

  /* USER CODE END LPTIM4_Init 2 */

}
 80009b2:	bf00      	nop
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	200001a4 	.word	0x200001a4
 80009bc:	46004c00 	.word	0x46004c00

080009c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b08e      	sub	sp, #56	; 0x38
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
 80009d6:	615a      	str	r2, [r3, #20]
 80009d8:	619a      	str	r2, [r3, #24]
  RTC_TimeTypeDef sTime = {0};
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80009ee:	4b39      	ldr	r3, [pc, #228]	; (8000ad4 <MX_RTC_Init+0x114>)
 80009f0:	4a39      	ldr	r2, [pc, #228]	; (8000ad8 <MX_RTC_Init+0x118>)
 80009f2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009f4:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <MX_RTC_Init+0x114>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80009fa:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <MX_RTC_Init+0x114>)
 80009fc:	227f      	movs	r2, #127	; 0x7f
 80009fe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <MX_RTC_Init+0x114>)
 8000a02:	22ff      	movs	r2, #255	; 0xff
 8000a04:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a06:	4b33      	ldr	r3, [pc, #204]	; (8000ad4 <MX_RTC_Init+0x114>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a0c:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <MX_RTC_Init+0x114>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a12:	4b30      	ldr	r3, [pc, #192]	; (8000ad4 <MX_RTC_Init+0x114>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a18:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <MX_RTC_Init+0x114>)
 8000a1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a20:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <MX_RTC_Init+0x114>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000a26:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <MX_RTC_Init+0x114>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a2c:	4829      	ldr	r0, [pc, #164]	; (8000ad4 <MX_RTC_Init+0x114>)
 8000a2e:	f007 fa33 	bl	8007e98 <HAL_RTC_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a38:	f000 fa20 	bl	8000e7c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000a40:	2300      	movs	r3, #0
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	4619      	mov	r1, r3
 8000a52:	4820      	ldr	r0, [pc, #128]	; (8000ad4 <MX_RTC_Init+0x114>)
 8000a54:	f007 fd2c 	bl	80084b0 <HAL_RTCEx_PrivilegeModeSet>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a5e:	f000 fa0d 	bl	8000e7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	723b      	strb	r3, [r7, #8]
  sTime.Minutes = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	727b      	strb	r3, [r7, #9]
  sTime.Seconds = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	72bb      	strb	r3, [r7, #10]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4815      	ldr	r0, [pc, #84]	; (8000ad4 <MX_RTC_Init+0x114>)
 8000a80:	f007 fa8c 	bl	8007f9c <HAL_RTC_SetTime>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_RTC_Init+0xce>
  {
    Error_Handler();
 8000a8a:	f000 f9f7 	bl	8000e7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	713b      	strb	r3, [r7, #4]
  sDate.Month = RTC_MONTH_JANUARY;
 8000a92:	2301      	movs	r3, #1
 8000a94:	717b      	strb	r3, [r7, #5]
  sDate.Date = 1;
 8000a96:	2301      	movs	r3, #1
 8000a98:	71bb      	strb	r3, [r7, #6]
  sDate.Year = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	71fb      	strb	r3, [r7, #7]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	480b      	ldr	r0, [pc, #44]	; (8000ad4 <MX_RTC_Init+0x114>)
 8000aa6:	f007 fb15 	bl	80080d4 <HAL_RTC_SetDate>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_RTC_Init+0xf4>
  {
    Error_Handler();
 8000ab0:	f000 f9e4 	bl	8000e7c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 4096, RTC_WAKEUPCLOCK_RTCCLK_DIV16, 0) != HAL_OK)
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_RTC_Init+0x114>)
 8000abe:	f007 fc5b 	bl	8008378 <HAL_RTCEx_SetWakeUpTimer_IT>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_RTC_Init+0x10c>
  {
    Error_Handler();
 8000ac8:	f000 f9d8 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3738      	adds	r7, #56	; 0x38
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200001f4 	.word	0x200001f4
 8000ad8:	46007800 	.word	0x46007800

08000adc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000aec:	4b31      	ldr	r3, [pc, #196]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000aee:	4a32      	ldr	r2, [pc, #200]	; (8000bb8 <MX_SPI1_Init+0xdc>)
 8000af0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000af2:	4b30      	ldr	r3, [pc, #192]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000af4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000af8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8000afa:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000afc:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000b00:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b02:	4b2c      	ldr	r3, [pc, #176]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b04:	2207      	movs	r2, #7
 8000b06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b08:	4b2a      	ldr	r3, [pc, #168]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b0e:	4b29      	ldr	r3, [pc, #164]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b14:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000b1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b1c:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b1e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000b22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b24:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2a:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b30:	4b20      	ldr	r3, [pc, #128]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b38:	2207      	movs	r2, #7
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b48:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b4e:	4b19      	ldr	r3, [pc, #100]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	659a      	str	r2, [r3, #88]	; 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b78:	480e      	ldr	r0, [pc, #56]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b7a:	f007 fcc7 	bl	800850c <HAL_SPI_Init>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_SPI1_Init+0xac>
  {
    Error_Handler();
 8000b84:	f000 f97a 	bl	8000e7c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000b8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b90:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4806      	ldr	r0, [pc, #24]	; (8000bb4 <MX_SPI1_Init+0xd8>)
 8000b9c:	f007 fde7 	bl	800876e <HAL_SPIEx_SetConfigAutonomousMode>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_SPI1_Init+0xce>
  {
    Error_Handler();
 8000ba6:	f000 f969 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000baa:	bf00      	nop
 8000bac:	3710      	adds	r7, #16
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000224 	.word	0x20000224
 8000bb8:	40013000 	.word	0x40013000

08000bbc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bc2:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <MX_USART1_UART_Init+0x94>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c04:	4811      	ldr	r0, [pc, #68]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c06:	f007 fdf3 	bl	80087f0 <HAL_UART_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c10:	f000 f934 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c14:	2100      	movs	r1, #0
 8000c16:	480d      	ldr	r0, [pc, #52]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c18:	f008 facc 	bl	80091b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c22:	f000 f92b 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c26:	2100      	movs	r1, #0
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c2a:	f008 fb01 	bl	8009230 <HAL_UARTEx_SetRxFifoThreshold>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c34:	f000 f922 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_USART1_UART_Init+0x90>)
 8000c3a:	f008 fa82 	bl	8009142 <HAL_UARTEx_DisableFifoMode>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c44:	f000 f91a 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200002b4 	.word	0x200002b4
 8000c50:	40013800 	.word	0x40013800

08000c54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c58:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c5a:	4a23      	ldr	r2, [pc, #140]	; (8000ce8 <MX_USART2_UART_Init+0x94>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b1c      	ldr	r3, [pc, #112]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b19      	ldr	r3, [pc, #100]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c8a:	4b16      	ldr	r3, [pc, #88]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c90:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c96:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9c:	4811      	ldr	r0, [pc, #68]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000c9e:	f007 fda7 	bl	80087f0 <HAL_UART_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000ca8:	f000 f8e8 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cac:	2100      	movs	r1, #0
 8000cae:	480d      	ldr	r0, [pc, #52]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000cb0:	f008 fa80 	bl	80091b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cba:	f000 f8df 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	4808      	ldr	r0, [pc, #32]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000cc2:	f008 fab5 	bl	8009230 <HAL_UARTEx_SetRxFifoThreshold>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ccc:	f000 f8d6 	bl	8000e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_USART2_UART_Init+0x90>)
 8000cd2:	f008 fa36 	bl	8009142 <HAL_UARTEx_DisableFifoMode>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000cdc:	f000 f8ce 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000348 	.word	0x20000348
 8000ce8:	40004400 	.word	0x40004400

08000cec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
 8000cfe:	60da      	str	r2, [r3, #12]
 8000d00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d02:	4b58      	ldr	r3, [pc, #352]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d08:	4a56      	ldr	r2, [pc, #344]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d12:	4b54      	ldr	r3, [pc, #336]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d18:	f003 0304 	and.w	r3, r3, #4
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b50      	ldr	r3, [pc, #320]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d26:	4a4f      	ldr	r2, [pc, #316]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d30:	4b4c      	ldr	r3, [pc, #304]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3e:	4b49      	ldr	r3, [pc, #292]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d44:	4a47      	ldr	r2, [pc, #284]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d46:	f043 0310 	orr.w	r3, r3, #16
 8000d4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d4e:	4b45      	ldr	r3, [pc, #276]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d54:	f003 0310 	and.w	r3, r3, #16
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5c:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d62:	4a40      	ldr	r2, [pc, #256]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d64:	f043 0308 	orr.w	r3, r3, #8
 8000d68:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d6c:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d72:	f003 0308 	and.w	r3, r3, #8
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d80:	4a38      	ldr	r2, [pc, #224]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d8a:	4b36      	ldr	r3, [pc, #216]	; (8000e64 <MX_GPIO_Init+0x178>)
 8000d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	603b      	str	r3, [r7, #0]
 8000d96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PCF8553_CE_Pin|PCF8553_RESET_Pin, GPIO_PIN_RESET);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2150      	movs	r1, #80	; 0x50
 8000d9c:	4832      	ldr	r0, [pc, #200]	; (8000e68 <MX_GPIO_Init+0x17c>)
 8000d9e:	f002 fc3b 	bl	8003618 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_ERROR_Pin|LED_2_ACTIVE_Pin|LED_3_SIGNAL_1_Pin|LCD_BACLLIGHT_Pin, GPIO_PIN_RESET);
 8000da2:	2200      	movs	r2, #0
 8000da4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8000da8:	4830      	ldr	r0, [pc, #192]	; (8000e6c <MX_GPIO_Init+0x180>)
 8000daa:	f002 fc35 	bl	8003618 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCF8553_CE_Pin PCF8553_RESET_Pin */
  GPIO_InitStruct.Pin = PCF8553_CE_Pin|PCF8553_RESET_Pin;
 8000dae:	2350      	movs	r3, #80	; 0x50
 8000db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4828      	ldr	r0, [pc, #160]	; (8000e68 <MX_GPIO_Init+0x17c>)
 8000dc6:	f002 fa4f 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_DOWN_Pin */
  GPIO_InitStruct.Pin = KEY_DOWN_Pin;
 8000dca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dd0:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <MX_GPIO_Init+0x184>)
 8000dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4825      	ldr	r0, [pc, #148]	; (8000e74 <MX_GPIO_Init+0x188>)
 8000de0:	f002 fa42 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_UP_Pin KEY_ENTER_Pin KEY_ESC_Pin FLOW_DETECTOR_Pin */
  GPIO_InitStruct.Pin = KEY_UP_Pin|KEY_ENTER_Pin|KEY_ESC_Pin|FLOW_DETECTOR_Pin;
 8000de4:	f44f 4338 	mov.w	r3, #47104	; 0xb800
 8000de8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dea:	4b23      	ldr	r3, [pc, #140]	; (8000e78 <MX_GPIO_Init+0x18c>)
 8000dec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	481e      	ldr	r0, [pc, #120]	; (8000e74 <MX_GPIO_Init+0x188>)
 8000dfa:	f002 fa35 	bl	8003268 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_ERROR_Pin LED_2_ACTIVE_Pin LED_3_SIGNAL_1_Pin LCD_BACLLIGHT_Pin */
  GPIO_InitStruct.Pin = LED_1_ERROR_Pin|LED_2_ACTIVE_Pin|LED_3_SIGNAL_1_Pin|LCD_BACLLIGHT_Pin;
 8000dfe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e04:	2301      	movs	r3, #1
 8000e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4619      	mov	r1, r3
 8000e16:	4815      	ldr	r0, [pc, #84]	; (8000e6c <MX_GPIO_Init+0x180>)
 8000e18:	f002 fa26 	bl	8003268 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI10_IRQn, 0, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2015      	movs	r0, #21
 8000e22:	f002 f9ec 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI10_IRQn);
 8000e26:	2015      	movs	r0, #21
 8000e28:	f002 fa03 	bl	8003232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI11_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2016      	movs	r0, #22
 8000e32:	f002 f9e4 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI11_IRQn);
 8000e36:	2016      	movs	r0, #22
 8000e38:	f002 f9fb 	bl	8003232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI12_IRQn, 0, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2017      	movs	r0, #23
 8000e42:	f002 f9dc 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8000e46:	2017      	movs	r0, #23
 8000e48:	f002 f9f3 	bl	8003232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI13_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2018      	movs	r0, #24
 8000e52:	f002 f9d4 	bl	80031fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI13_IRQn);
 8000e56:	2018      	movs	r0, #24
 8000e58:	f002 f9eb 	bl	8003232 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e5c:	bf00      	nop
 8000e5e:	3728      	adds	r7, #40	; 0x28
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	46020c00 	.word	0x46020c00
 8000e68:	42020000 	.word	0x42020000
 8000e6c:	42020400 	.word	0x42020400
 8000e70:	10210000 	.word	0x10210000
 8000e74:	42021000 	.word	0x42021000
 8000e78:	10110000 	.word	0x10110000

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_MspInit+0x30>)
 8000e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e94:	4a08      	ldr	r2, [pc, #32]	; (8000eb8 <HAL_MspInit+0x30>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_MspInit+0x30>)
 8000ea0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddA();
 8000eac:	f003 f818 	bl	8003ee0 <HAL_PWREx_EnableVddA>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	46020c00 	.word	0x46020c00

08000ebc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b0bc      	sub	sp, #240	; 0xf0
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
 8000ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	22c8      	movs	r2, #200	; 0xc8
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f008 fa67 	bl	80093b0 <memset>
  if(hadc->Instance==ADC1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a24      	ldr	r2, [pc, #144]	; (8000f78 <HAL_ADC_MspInit+0xbc>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d140      	bne.n	8000f6e <HAL_ADC_MspInit+0xb2>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000eec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ef0:	f04f 0300 	mov.w	r3, #0
 8000ef4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000ef8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000efc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4618      	mov	r0, r3
 8000f06:	f004 fabd 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <HAL_ADC_MspInit+0x58>
    {
      Error_Handler();
 8000f10:	f7ff ffb4 	bl	8000e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <HAL_ADC_MspInit+0xc0>)
 8000f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f1a:	4a18      	ldr	r2, [pc, #96]	; (8000f7c <HAL_ADC_MspInit+0xc0>)
 8000f1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f24:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_ADC_MspInit+0xc0>)
 8000f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_ADC_MspInit+0xc0>)
 8000f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f38:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <HAL_ADC_MspInit+0xc0>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <HAL_ADC_MspInit+0xc0>)
 8000f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = RTD_ADC1_1_Pin|BATTERY_ADC1_2_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8000f50:	230f      	movs	r3, #15
 8000f52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f56:	2303      	movs	r3, #3
 8000f58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <HAL_ADC_MspInit+0xc4>)
 8000f6a:	f002 f97d 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	37f0      	adds	r7, #240	; 0xf0
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	42028000 	.word	0x42028000
 8000f7c:	46020c00 	.word	0x46020c00
 8000f80:	42020800 	.word	0x42020800

08000f84 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0be      	sub	sp, #248	; 0xf8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	22c8      	movs	r2, #200	; 0xc8
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f008 fa03 	bl	80093b0 <memset>
  if(hlptim->Instance==LPTIM1)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a53      	ldr	r2, [pc, #332]	; (80010fc <HAL_LPTIM_MspInit+0x178>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d12a      	bne.n	800100a <HAL_LPTIM_MspInit+0x86>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8000fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_MSIK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc6:	f107 0318 	add.w	r3, r7, #24
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 fa5a 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_LPTIM_MspInit+0x56>
    {
      Error_Handler();
 8000fd6:	f7ff ff51 	bl	8000e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000fda:	4b49      	ldr	r3, [pc, #292]	; (8001100 <HAL_LPTIM_MspInit+0x17c>)
 8000fdc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000fe0:	4a47      	ldr	r2, [pc, #284]	; (8001100 <HAL_LPTIM_MspInit+0x17c>)
 8000fe2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fe6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8000fea:	4b45      	ldr	r3, [pc, #276]	; (8001100 <HAL_LPTIM_MspInit+0x17c>)
 8000fec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8000ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697b      	ldr	r3, [r7, #20]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2043      	movs	r0, #67	; 0x43
 8000ffe:	f002 f8fe 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8001002:	2043      	movs	r0, #67	; 0x43
 8001004:	f002 f915 	bl	8003232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM4_MspInit 1 */

  /* USER CODE END LPTIM4_MspInit 1 */
  }

}
 8001008:	e073      	b.n	80010f2 <HAL_LPTIM_MspInit+0x16e>
  else if(hlptim->Instance==LPTIM3)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a3d      	ldr	r2, [pc, #244]	; (8001104 <HAL_LPTIM_MspInit+0x180>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d122      	bne.n	800105a <HAL_LPTIM_MspInit+0xd6>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM34;
 8001014:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Lptim34ClockSelection = RCC_LPTIM34CLKSOURCE_MSIK;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	4618      	mov	r0, r3
 800102c:	f004 fa2a 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_LPTIM_MspInit+0xb6>
      Error_Handler();
 8001036:	f7ff ff21 	bl	8000e7c <Error_Handler>
    __HAL_RCC_LPTIM3_CLK_ENABLE();
 800103a:	4b31      	ldr	r3, [pc, #196]	; (8001100 <HAL_LPTIM_MspInit+0x17c>)
 800103c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001040:	4a2f      	ldr	r2, [pc, #188]	; (8001100 <HAL_LPTIM_MspInit+0x17c>)
 8001042:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001046:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <HAL_LPTIM_MspInit+0x17c>)
 800104c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	693b      	ldr	r3, [r7, #16]
}
 8001058:	e04b      	b.n	80010f2 <HAL_LPTIM_MspInit+0x16e>
  else if(hlptim->Instance==LPTIM4)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a2a      	ldr	r2, [pc, #168]	; (8001108 <HAL_LPTIM_MspInit+0x184>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d146      	bne.n	80010f2 <HAL_LPTIM_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM34;
 8001064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Lptim34ClockSelection = RCC_LPTIM34CLKSOURCE_MSIK;
 8001070:	2300      	movs	r3, #0
 8001072:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001076:	f107 0318 	add.w	r3, r7, #24
 800107a:	4618      	mov	r0, r3
 800107c:	f004 fa02 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_LPTIM_MspInit+0x106>
      Error_Handler();
 8001086:	f7ff fef9 	bl	8000e7c <Error_Handler>
    __HAL_RCC_LPTIM4_CLK_ENABLE();
 800108a:	4b1d      	ldr	r3, [pc, #116]	; (8001100 <HAL_LPTIM_MspInit+0x17c>)
 800108c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001090:	4a1b      	ldr	r2, [pc, #108]	; (8001100 <HAL_LPTIM_MspInit+0x17c>)
 8001092:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001096:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800109a:	4b19      	ldr	r3, [pc, #100]	; (8001100 <HAL_LPTIM_MspInit+0x17c>)
 800109c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80010a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a8:	4b15      	ldr	r3, [pc, #84]	; (8001100 <HAL_LPTIM_MspInit+0x17c>)
 80010aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010ae:	4a14      	ldr	r2, [pc, #80]	; (8001100 <HAL_LPTIM_MspInit+0x17c>)
 80010b0:	f043 0308 	orr.w	r3, r3, #8
 80010b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <HAL_LPTIM_MspInit+0x17c>)
 80010ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PULSE_LPTIM4_IN_Pin;
 80010c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF13_LPTIM4;
 80010e0:	230d      	movs	r3, #13
 80010e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(PULSE_LPTIM4_IN_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <HAL_LPTIM_MspInit+0x188>)
 80010ee:	f002 f8bb 	bl	8003268 <HAL_GPIO_Init>
}
 80010f2:	bf00      	nop
 80010f4:	37f8      	adds	r7, #248	; 0xf8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	46004400 	.word	0x46004400
 8001100:	46020c00 	.word	0x46020c00
 8001104:	46004800 	.word	0x46004800
 8001108:	46004c00 	.word	0x46004c00
 800110c:	42020c00 	.word	0x42020c00

08001110 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0b6      	sub	sp, #216	; 0xd8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001118:	f107 0310 	add.w	r3, r7, #16
 800111c:	22c8      	movs	r2, #200	; 0xc8
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f008 f945 	bl	80093b0 <memset>
  if(hrtc->Instance==RTC)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a21      	ldr	r2, [pc, #132]	; (80011b0 <HAL_RTC_MspInit+0xa0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d13a      	bne.n	80011a6 <HAL_RTC_MspInit+0x96>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001130:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800113c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001140:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	4618      	mov	r0, r3
 800114a:	f004 f99b 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8001154:	f7ff fe92 	bl	8000e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <HAL_RTC_MspInit+0xa4>)
 800115a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <HAL_RTC_MspInit+0xa4>)
 8001160:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001164:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <HAL_RTC_MspInit+0xa4>)
 800116a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800116e:	4a11      	ldr	r2, [pc, #68]	; (80011b4 <HAL_RTC_MspInit+0xa4>)
 8001170:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001174:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8001178:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <HAL_RTC_MspInit+0xa4>)
 800117a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800117e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_RTCAPB_CLKAM_ENABLE();
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <HAL_RTC_MspInit+0xa4>)
 8001188:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800118c:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <HAL_RTC_MspInit+0xa4>)
 800118e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001192:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2002      	movs	r0, #2
 800119c:	f002 f82f 	bl	80031fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80011a0:	2002      	movs	r0, #2
 80011a2:	f002 f846 	bl	8003232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	37d8      	adds	r7, #216	; 0xd8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	46007800 	.word	0x46007800
 80011b4:	46020c00 	.word	0x46020c00

080011b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b0bc      	sub	sp, #240	; 0xf0
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011d0:	f107 0310 	add.w	r3, r7, #16
 80011d4:	22c8      	movs	r2, #200	; 0xc8
 80011d6:	2100      	movs	r1, #0
 80011d8:	4618      	mov	r0, r3
 80011da:	f008 f8e9 	bl	80093b0 <memset>
  if(hspi->Instance==SPI1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a27      	ldr	r2, [pc, #156]	; (8001280 <HAL_SPI_MspInit+0xc8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d146      	bne.n	8001276 <HAL_SPI_MspInit+0xbe>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80011e8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011ec:	f04f 0300 	mov.w	r3, #0
 80011f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80011f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80011f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4618      	mov	r0, r3
 8001202:	f004 f93f 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 800120c:	f7ff fe36 	bl	8000e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001210:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <HAL_SPI_MspInit+0xcc>)
 8001212:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001216:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <HAL_SPI_MspInit+0xcc>)
 8001218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800121c:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001220:	4b18      	ldr	r3, [pc, #96]	; (8001284 <HAL_SPI_MspInit+0xcc>)
 8001222:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b15      	ldr	r3, [pc, #84]	; (8001284 <HAL_SPI_MspInit+0xcc>)
 8001230:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001234:	4a13      	ldr	r2, [pc, #76]	; (8001284 <HAL_SPI_MspInit+0xcc>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <HAL_SPI_MspInit+0xcc>)
 8001240:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = PCF8553_SCL_Pin|PCF8553_SDIO_Pin;
 800124c:	2382      	movs	r3, #130	; 0x82
 800124e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001264:	2305      	movs	r3, #5
 8001266:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <HAL_SPI_MspInit+0xd0>)
 8001272:	f001 fff9 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001276:	bf00      	nop
 8001278:	37f0      	adds	r7, #240	; 0xf0
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40013000 	.word	0x40013000
 8001284:	46020c00 	.word	0x46020c00
 8001288:	42020000 	.word	0x42020000

0800128c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0be      	sub	sp, #248	; 0xf8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a4:	f107 0318 	add.w	r3, r7, #24
 80012a8:	22c8      	movs	r2, #200	; 0xc8
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f008 f87f 	bl	80093b0 <memset>
  if(huart->Instance==USART1)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a4c      	ldr	r2, [pc, #304]	; (80013e8 <HAL_UART_MspInit+0x15c>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d146      	bne.n	800134a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012bc:	f04f 0201 	mov.w	r2, #1
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80012c8:	2300      	movs	r3, #0
 80012ca:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012cc:	f107 0318 	add.w	r3, r7, #24
 80012d0:	4618      	mov	r0, r3
 80012d2:	f004 f8d7 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80012dc:	f7ff fdce 	bl	8000e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012e0:	4b42      	ldr	r3, [pc, #264]	; (80013ec <HAL_UART_MspInit+0x160>)
 80012e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80012e6:	4a41      	ldr	r2, [pc, #260]	; (80013ec <HAL_UART_MspInit+0x160>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 80012f0:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <HAL_UART_MspInit+0x160>)
 80012f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80012f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b3b      	ldr	r3, [pc, #236]	; (80013ec <HAL_UART_MspInit+0x160>)
 8001300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001304:	4a39      	ldr	r2, [pc, #228]	; (80013ec <HAL_UART_MspInit+0x160>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800130e:	4b37      	ldr	r3, [pc, #220]	; (80013ec <HAL_UART_MspInit+0x160>)
 8001310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800131c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001320:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001336:	2307      	movs	r3, #7
 8001338:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001340:	4619      	mov	r1, r3
 8001342:	482b      	ldr	r0, [pc, #172]	; (80013f0 <HAL_UART_MspInit+0x164>)
 8001344:	f001 ff90 	bl	8003268 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001348:	e049      	b.n	80013de <HAL_UART_MspInit+0x152>
  else if(huart->Instance==USART2)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a29      	ldr	r2, [pc, #164]	; (80013f4 <HAL_UART_MspInit+0x168>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d144      	bne.n	80013de <HAL_UART_MspInit+0x152>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001354:	f04f 0202 	mov.w	r2, #2
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001360:	2300      	movs	r3, #0
 8001362:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	4618      	mov	r0, r3
 800136a:	f004 f88b 	bl	8005484 <HAL_RCCEx_PeriphCLKConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001374:	f7ff fd82 	bl	8000e7c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <HAL_UART_MspInit+0x160>)
 800137a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800137e:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <HAL_UART_MspInit+0x160>)
 8001380:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001384:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001388:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_UART_MspInit+0x160>)
 800138a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_UART_MspInit+0x160>)
 8001398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800139c:	4a13      	ldr	r2, [pc, #76]	; (80013ec <HAL_UART_MspInit+0x160>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_UART_MspInit+0x160>)
 80013a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013b4:	230c      	movs	r3, #12
 80013b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013cc:	2307      	movs	r3, #7
 80013ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_UART_MspInit+0x164>)
 80013da:	f001 ff45 	bl	8003268 <HAL_GPIO_Init>
}
 80013de:	bf00      	nop
 80013e0:	37f8      	adds	r7, #248	; 0xf8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40013800 	.word	0x40013800
 80013ec:	46020c00 	.word	0x46020c00
 80013f0:	42020000 	.word	0x42020000
 80013f4:	40004400 	.word	0x40004400

080013f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013fc:	e7fe      	b.n	80013fc <NMI_Handler+0x4>

080013fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <MemManage_Handler+0x4>

0800140a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140e:	e7fe      	b.n	800140e <BusFault_Handler+0x4>

08001410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001414:	e7fe      	b.n	8001414 <UsageFault_Handler+0x4>

08001416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001428:	bf00      	nop
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001444:	f000 f932 	bl	80016ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC non-secure interrupt.
  */
void RTC_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <RTC_IRQHandler+0x10>)
 8001452:	f007 f809 	bl	8008468 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200001f4 	.word	0x200001f4

08001460 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_DOWN_Pin);
 8001464:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001468:	f002 f8ee 	bl	8003648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <EXTI11_IRQHandler>:

/**
  * @brief This function handles EXTI Line11 interrupt.
  */
void EXTI11_IRQHandler(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI11_IRQn 0 */

  /* USER CODE END EXTI11_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_UP_Pin);
 8001474:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001478:	f002 f8e6 	bl	8003648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI11_IRQn 1 */

  /* USER CODE END EXTI11_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI Line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_ENTER_Pin);
 8001484:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001488:	f002 f8de 	bl	8003648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}

08001490 <EXTI13_IRQHandler>:

/**
  * @brief This function handles EXTI Line13 interrupt.
  */
void EXTI13_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI13_IRQn 0 */

  /* USER CODE END EXTI13_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(KEY_ESC_Pin);
 8001494:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001498:	f002 f8d6 	bl	8003648 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI13_IRQn 1 */

  /* USER CODE END EXTI13_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	bd80      	pop	{r7, pc}

080014a0 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80014a4:	4802      	ldr	r0, [pc, #8]	; (80014b0 <LPTIM1_IRQHandler+0x10>)
 80014a6:	f002 fa3b 	bl	8003920 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000104 	.word	0x20000104

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f007 ff6c 	bl	80093c0 <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	200c0000 	.word	0x200c0000
 8001514:	00000400 	.word	0x00000400
 8001518:	200003e0 	.word	0x200003e0
 800151c:	20000530 	.word	0x20000530

08001520 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001524:	4b18      	ldr	r3, [pc, #96]	; (8001588 <SystemInit+0x68>)
 8001526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152a:	4a17      	ldr	r2, [pc, #92]	; (8001588 <SystemInit+0x68>)
 800152c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001530:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <SystemInit+0x6c>)
 8001536:	2201      	movs	r2, #1
 8001538:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <SystemInit+0x6c>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <SystemInit+0x6c>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <SystemInit+0x6c>)
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <SystemInit+0x6c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0e      	ldr	r2, [pc, #56]	; (800158c <SystemInit+0x6c>)
 8001552:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001556:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800155a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <SystemInit+0x6c>)
 800155e:	2200      	movs	r2, #0
 8001560:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001562:	4b0a      	ldr	r3, [pc, #40]	; (800158c <SystemInit+0x6c>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a09      	ldr	r2, [pc, #36]	; (800158c <SystemInit+0x6c>)
 8001568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800156c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800156e:	4b07      	ldr	r3, [pc, #28]	; (800158c <SystemInit+0x6c>)
 8001570:	2200      	movs	r2, #0
 8001572:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001574:	4b04      	ldr	r3, [pc, #16]	; (8001588 <SystemInit+0x68>)
 8001576:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800157a:	609a      	str	r2, [r3, #8]
  #endif
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed00 	.word	0xe000ed00
 800158c:	46020c00 	.word	0x46020c00

08001590 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001590:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015c8 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001594:	f7ff ffc4 	bl	8001520 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001598:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800159a:	e003      	b.n	80015a4 <LoopCopyDataInit>

0800159c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800159e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015a2:	3104      	adds	r1, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015a4:	480a      	ldr	r0, [pc, #40]	; (80015d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80015a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015ac:	d3f6      	bcc.n	800159c <CopyDataInit>
	ldr	r2, =_sbss
 80015ae:	4a0a      	ldr	r2, [pc, #40]	; (80015d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80015b0:	e002      	b.n	80015b8 <LoopFillZerobss>

080015b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015b4:	f842 3b04 	str.w	r3, [r2], #4

080015b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <LoopForever+0x16>)
	cmp	r2, r3
 80015ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015bc:	d3f9      	bcc.n	80015b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015be:	f007 ff05 	bl	80093cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015c2:	f7ff f82d 	bl	8000620 <main>

080015c6 <LoopForever>:

LoopForever:
    b LoopForever
 80015c6:	e7fe      	b.n	80015c6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80015c8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 80015cc:	08009e5c 	.word	0x08009e5c
	ldr	r0, =_sdata
 80015d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015d4:	2000005c 	.word	0x2000005c
	ldr	r2, =_sbss
 80015d8:	2000005c 	.word	0x2000005c
	ldr	r3, = _ebss
 80015dc:	20000530 	.word	0x20000530

080015e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e0:	e7fe      	b.n	80015e0 <ADC1_IRQHandler>
	...

080015e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <HAL_Init+0x4c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a10      	ldr	r2, [pc, #64]	; (8001630 <HAL_Init+0x4c>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f001 fdf7 	bl	80031e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80015fa:	f003 fd5f 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 80015fe:	4602      	mov	r2, r0
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_Init+0x50>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	490b      	ldr	r1, [pc, #44]	; (8001638 <HAL_Init+0x54>)
 800160a:	5ccb      	ldrb	r3, [r1, r3]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_Init+0x58>)
 8001612:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001614:	200f      	movs	r0, #15
 8001616:	f000 f813 	bl	8001640 <HAL_InitTick>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e002      	b.n	800162a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001624:	f7ff fc30 	bl	8000e88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001628:	2300      	movs	r3, #0
}
 800162a:	4618      	mov	r0, r3
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40022000 	.word	0x40022000
 8001634:	46020c00 	.word	0x46020c00
 8001638:	08009d18 	.word	0x08009d18
 800163c:	20000000 	.word	0x20000000

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_InitTick+0x60>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e021      	b.n	8001698 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001654:	4b13      	ldr	r3, [pc, #76]	; (80016a4 <HAL_InitTick+0x64>)
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_InitTick+0x60>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001662:	fbb3 f3f1 	udiv	r3, r3, r1
 8001666:	fbb2 f3f3 	udiv	r3, r2, r3
 800166a:	4618      	mov	r0, r3
 800166c:	f001 fdef 	bl	800324e <HAL_SYSTICK_Config>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e00e      	b.n	8001698 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2b0f      	cmp	r3, #15
 800167e:	d80a      	bhi.n	8001696 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001680:	2200      	movs	r2, #0
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f001 fdb9 	bl	80031fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <HAL_InitTick+0x68>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001692:	2300      	movs	r3, #0
 8001694:	e000      	b.n	8001698 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000008 	.word	0x20000008
 80016a4:	20000000 	.word	0x20000000
 80016a8:	20000004 	.word	0x20000004

080016ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016b0:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x20>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <HAL_IncTick+0x24>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4413      	add	r3, r2
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_IncTick+0x24>)
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	bf00      	nop
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	20000008 	.word	0x20000008
 80016d0:	200003e4 	.word	0x200003e4

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b03      	ldr	r3, [pc, #12]	; (80016e8 <HAL_GetTick+0x14>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	200003e4 	.word	0x200003e4

080016ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f4:	f7ff ffee 	bl	80016d4 <HAL_GetTick>
 80016f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d005      	beq.n	8001712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_Delay+0x44>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	4413      	add	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001712:	bf00      	nop
 8001714:	f7ff ffde 	bl	80016d4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	429a      	cmp	r2, r3
 8001722:	d8f7      	bhi.n	8001714 <HAL_Delay+0x28>
  {
  }
}
 8001724:	bf00      	nop
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008

08001734 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return ((DBGMCU->IDCODE & DBGMCU_IDCODE_REV_ID) >> 16);
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <HAL_GetREVID+0x18>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	0c1b      	lsrs	r3, r3, #16
 800173e:	b29b      	uxth	r3, r3
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e0044000 	.word	0xe0044000

08001750 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	431a      	orrs	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	601a      	str	r2, [r3, #0]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN, PathInternal);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSEEN | ADC_CCR_VBATEN));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LL_ADC_SetResolution+0x3c>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d104      	bne.n	80017d8 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	f003 030c 	and.w	r3, r3, #12
 80017d6:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	f023 020c 	bic.w	r2, r3, #12
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	60da      	str	r2, [r3, #12]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	46021000 	.word	0x46021000

080017f8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	3360      	adds	r3, #96	; 0x60
 800180a:	461a      	mov	r2, r3
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	005b      	lsls	r3, r3, #1
 8001820:	f003 4178 	and.w	r1, r3, #4160749568	; 0xf8000000
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	430b      	orrs	r3, r1
 8001828:	431a      	orrs	r2, r3
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) << 1UL) | OffsetLevel);
}
 800182e:	bf00      	nop
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800183a:	b480      	push	{r7}
 800183c:	b085      	sub	sp, #20
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3360      	adds	r3, #96	; 0x60
 8001848:	461a      	mov	r2, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 4378 	and.w	r3, r3, #4160749568	; 0xf8000000
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr

08001866 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001866:	b480      	push	{r7}
 8001868:	b087      	sub	sp, #28
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	3360      	adds	r3, #96	; 0x60
 8001876:	461a      	mov	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg, ADC_OFR1_OFFSETPOS, OffsetSign);
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	431a      	orrs	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	601a      	str	r2, [r3, #0]
}
 8001890:	bf00      	nop
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                      uint32_t OffsetSignedSaturation)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	3360      	adds	r3, #96	; 0x60
 80018ac:	461a      	mov	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_SSAT, OffsetSignedSaturation);
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	431a      	orrs	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	601a      	str	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	371c      	adds	r7, #28
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <LL_ADC_SetOffsetUnsignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetUnsignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety,
                                                        uint32_t OffsetUnsignedSaturation)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b087      	sub	sp, #28
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	60f8      	str	r0, [r7, #12]
 80018da:	60b9      	str	r1, [r7, #8]
 80018dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3360      	adds	r3, #96	; 0x60
 80018e2:	461a      	mov	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg, ADC_OFR1_USAT, OffsetUnsignedSaturation);
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	601a      	str	r2, [r3, #0]
}
 80018fc:	bf00      	nop
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001916:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800191a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	431a      	orrs	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	671a      	str	r2, [r3, #112]	; 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	2a00      	cmp	r2, #0
 8001932:	d002      	beq.n	800193a <LL_ADC_SetGainCompensation+0x32>
 8001934:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001938:	e000      	b.n	800193c <LL_ADC_SetGainCompensation+0x34>
 800193a:	2200      	movs	r2, #0
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	671a      	str	r2, [r3, #112]	; 0x70
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800194e:	b480      	push	{r7}
 8001950:	b085      	sub	sp, #20
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	695a      	ldr	r2, [r3, #20]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2107      	movs	r1, #7
 8001966:	fa01 f303 	lsl.w	r3, r1, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	401a      	ands	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	6879      	ldr	r1, [r7, #4]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	431a      	orrs	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32U5, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800198c:	b480      	push	{r7}
 800198e:	b089      	sub	sp, #36	; 0x24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4a2b      	ldr	r2, [pc, #172]	; (8001a48 <LL_ADC_REG_SetSequencerRanks+0xbc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d020      	beq.n	80019e2 <LL_ADC_REG_SetSequencerRanks+0x56>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK)     \
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3330      	adds	r3, #48	; 0x30
 80019a4:	461a      	mov	r2, r3
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	f003 030c 	and.w	r3, r3, #12
 80019b0:	4413      	add	r3, r2
 80019b2:	61fb      	str	r3, [r7, #28]
                                                            >> ADC_SQRX_REGOFFSET_POS));

    MODIFY_REG(*preg,
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	211f      	movs	r1, #31
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	43db      	mvns	r3, r3
 80019c6:	401a      	ands	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	0e9b      	lsrs	r3, r3, #26
 80019cc:	f003 011f 	and.w	r1, r3, #31
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	f003 031f 	and.w	r3, r3, #31
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	431a      	orrs	r2, r3
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(ADCx->CHSELR,
               ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
               (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) << (Rank & ADC_REG_RANK_ID_SQRX_MASK)));
  }
}
 80019e0:	e02b      	b.n	8001a3a <LL_ADC_REG_SetSequencerRanks+0xae>
    MODIFY_REG(ADCx->CHSELR,
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	210f      	movs	r1, #15
 80019ee:	fa01 f303 	lsl.w	r3, r1, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	401a      	ands	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d104      	bne.n	8001a0a <LL_ADC_REG_SetSequencerRanks+0x7e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	0e9b      	lsrs	r3, r3, #26
 8001a04:	f003 031f 	and.w	r3, r3, #31
 8001a08:	e010      	b.n	8001a2c <LL_ADC_REG_SetSequencerRanks+0xa0>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	fa93 f3a3 	rbit	r3, r3
 8001a14:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <LL_ADC_REG_SetSequencerRanks+0x98>
  {
    return 32U;
 8001a20:	2320      	movs	r3, #32
 8001a22:	e003      	b.n	8001a2c <LL_ADC_REG_SetSequencerRanks+0xa0>
  }
  return __builtin_clz(value);
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fab3 f383 	clz	r3, r3
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	f001 011f 	and.w	r1, r1, #31
 8001a32:	408b      	lsls	r3, r1
 8001a34:	431a      	orrs	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a3a:	bf00      	nop
 8001a3c:	3724      	adds	r7, #36	; 0x24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	46021000 	.word	0x46021000

08001a4c <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (1UL << ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & ADC_CHSELR_CHSEL) & 0x1FUL)));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d107      	bne.n	8001a70 <LL_ADC_REG_SetSequencerChAdd+0x24>
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	0e9b      	lsrs	r3, r3, #26
 8001a64:	f003 031f 	and.w	r3, r3, #31
 8001a68:	2201      	movs	r2, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	e015      	b.n	8001a9c <LL_ADC_REG_SetSequencerChAdd+0x50>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	fa93 f3a3 	rbit	r3, r3
 8001a7a:	60fb      	str	r3, [r7, #12]
  return result;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <LL_ADC_REG_SetSequencerChAdd+0x3e>
    return 32U;
 8001a86:	2320      	movs	r3, #32
 8001a88:	e003      	b.n	8001a92 <LL_ADC_REG_SetSequencerChAdd+0x46>
  return __builtin_clz(value);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	2201      	movs	r2, #1
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001aa6:	bf00      	nop
 8001aa8:	371c      	adds	r7, #28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr

08001ab2 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	b083      	sub	sp, #12
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (1UL << ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	0e9b      	lsrs	r3, r3, #26
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	2101      	movs	r1, #1
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <LL_ADC_SetChannelSamplingTime>:
  *         (1) On STM32U5, parameter available only on ADC instance: ADC1, ADC2.
  *         (2) On STM32U5, parameter available only on ADC instance: ADC4.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b08b      	sub	sp, #44	; 0x2c
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  if (ADCx != ADC4) /* ADC1 or ADC2 */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	4a2d      	ldr	r2, [pc, #180]	; (8001ba8 <LL_ADC_SetChannelSamplingTime+0xc4>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d042      	beq.n	8001b7e <LL_ADC_SetChannelSamplingTime+0x9a>
  {
    /* Set bits with content of parameter "SamplingTime" with bits position     */
    /* in register and register position depending on parameter "Channel".      */
    /* Parameter "Channel" is used with masks because containing                */
    /* other bits reserved for other purpose.                                   */
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d104      	bne.n	8001b0c <LL_ADC_SetChannelSamplingTime+0x28>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	0e9b      	lsrs	r3, r3, #26
 8001b06:	f003 021f 	and.w	r2, r3, #31
 8001b0a:	e011      	b.n	8001b30 <LL_ADC_SetChannelSamplingTime+0x4c>
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa93 f3a3 	rbit	r3, r3
 8001b16:	617b      	str	r3, [r7, #20]
  return result;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <LL_ADC_SetChannelSamplingTime+0x42>
    return 32U;
 8001b22:	2320      	movs	r3, #32
 8001b24:	e003      	b.n	8001b2e <LL_ADC_SetChannelSamplingTime+0x4a>
  return __builtin_clz(value);
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fab3 f383 	clz	r3, r3
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	461a      	mov	r2, r3
                                                                                 & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) \
                                                                                >> ADC_SMPRX_REGOFFSET_POS))) * 3UL);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	0e5b      	lsrs	r3, r3, #25
 8001b34:	f003 0101 	and.w	r1, r3, #1
    uint32_t shift_value = ((__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) - (10UL * ((Channel                             \
 8001b38:	460b      	mov	r3, r1
 8001b3a:	009b      	lsls	r3, r3, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	1ad2      	subs	r2, r2, r3
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK)            \
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	3314      	adds	r3, #20
 8001b4e:	461a      	mov	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	0e5b      	lsrs	r3, r3, #25
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	4413      	add	r3, r2
 8001b5c:	623b      	str	r3, [r7, #32]
                                                             >> ADC_SMPRX_REGOFFSET_POS));

    MODIFY_REG(*preg, ADC_SMPR1_SMP0 << shift_value, SamplingTime   << shift_value);
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	2107      	movs	r1, #7
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	fa01 f303 	lsl.w	r3, r1, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	401a      	ands	r2, r3
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	431a      	orrs	r2, r3
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	601a      	str	r2, [r3, #0]
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS),
               ((Channel & ADC_CHANNEL_ID_BITFIELD_MASK) << ADC4_SMPR_SMPSEL0_BITOFFSET_POS)
               & (SamplingTime & ADC4_SAMPLING_TIME_CH_MASK)
              );
  }
}
 8001b7c:	e00e      	b.n	8001b9c <LL_ADC_SetChannelSamplingTime+0xb8>
    MODIFY_REG(ADCx->SMPR1,
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	021b      	lsls	r3, r3, #8
 8001b86:	43db      	mvns	r3, r3
 8001b88:	401a      	ands	r2, r3
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	0219      	lsls	r1, r3, #8
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	400b      	ands	r3, r1
 8001b92:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001b96:	431a      	orrs	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	615a      	str	r2, [r3, #20]
}
 8001b9c:	bf00      	nop
 8001b9e:	372c      	adds	r7, #44	; 0x2c
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	46021000 	.word	0x46021000

08001bac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f003 0318 	and.w	r3, r3, #24
 8001bce:	4908      	ldr	r1, [pc, #32]	; (8001bf0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bd0:	40d9      	lsrs	r1, r3
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	400b      	ands	r3, r1
 8001bd6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff                              \
                                                                              & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	000fffff 	.word	0x000fffff

08001bf4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001c04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c08:	687a      	ldr	r2, [r7, #4]
 8001c0a:	6093      	str	r3, [r2, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c2c:	d101      	bne.n	8001c32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr

08001c40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c7c:	d101      	bne.n	8001c82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e000      	b.n	8001c84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <LL_ADC_IsEnabled+0x18>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <LL_ADC_IsEnabled+0x1a>
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0304 	and.w	r3, r3, #4
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d101      	bne.n	8001cce <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e000      	b.n	8001cd0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b08      	cmp	r3, #8
 8001cee:	d101      	bne.n	8001cf4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e000      	b.n	8001cf6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08a      	sub	sp, #40	; 0x28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t tmpCFGR1 = 0UL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d101      	bne.n	8001d24 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e2b3      	b.n	800228c <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d003      	beq.n	8001d34 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a8b      	ldr	r2, [pc, #556]	; (8001f60 <HAL_ADC_Init+0x25c>)
 8001d32:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d109      	bne.n	8001d50 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff f8bd 	bl	8000ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5f 	bl	8001c18 <LL_ADC_IsDeepPowerDownEnabled>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d004      	beq.n	8001d6a <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7ff ff45 	bl	8001bf4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff ff7a 	bl	8001c68 <LL_ADC_IsInternalRegulatorEnabled>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d115      	bne.n	8001da6 <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff ff5e 	bl	8001c40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d84:	4b77      	ldr	r3, [pc, #476]	; (8001f64 <HAL_ADC_Init+0x260>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	099b      	lsrs	r3, r3, #6
 8001d8a:	4a77      	ldr	r2, [pc, #476]	; (8001f68 <HAL_ADC_Init+0x264>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	099b      	lsrs	r3, r3, #6
 8001d92:	3301      	adds	r3, #1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d98:	e002      	b.n	8001da0 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f9      	bne.n	8001d9a <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff ff5c 	bl	8001c68 <LL_ADC_IsInternalRegulatorEnabled>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10e      	bne.n	8001dd4 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dba:	f043 0210 	orr.w	r2, r3, #16
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dc6:	f043 0201 	orr.w	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	67da      	str	r2, [r3, #124]	; 0x7c

    tmp_hal_status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff6c 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 8001dde:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001de4:	f003 0310 	and.w	r3, r3, #16
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f040 8244 	bne.w	8002276 <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f040 8240 	bne.w	8002276 <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001dfa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dfe:	f043 0202 	orr.w	r2, r3, #2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	679a      	str	r2, [r3, #120]	; 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff40 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d140      	bne.n	8001e98 <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a51      	ldr	r2, [pc, #324]	; (8001f60 <HAL_ADC_Init+0x25c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d028      	beq.n	8001e72 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a51      	ldr	r2, [pc, #324]	; (8001f6c <HAL_ADC_Init+0x268>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d109      	bne.n	8001e3e <HAL_ADC_Init+0x13a>
 8001e2a:	4850      	ldr	r0, [pc, #320]	; (8001f6c <HAL_ADC_Init+0x268>)
 8001e2c:	f7ff ff30 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	bf0c      	ite	eq
 8001e36:	2301      	moveq	r3, #1
 8001e38:	2300      	movne	r3, #0
 8001e3a:	b2db      	uxtb	r3, r3
 8001e3c:	e008      	b.n	8001e50 <HAL_ADC_Init+0x14c>
 8001e3e:	4848      	ldr	r0, [pc, #288]	; (8001f60 <HAL_ADC_Init+0x25c>)
 8001e40:	f7ff ff26 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	bf0c      	ite	eq
 8001e4a:	2301      	moveq	r3, #1
 8001e4c:	2300      	movne	r3, #0
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d021      	beq.n	8001e98 <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a44      	ldr	r2, [pc, #272]	; (8001f6c <HAL_ADC_Init+0x268>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d101      	bne.n	8001e62 <HAL_ADC_Init+0x15e>
 8001e5e:	4a44      	ldr	r2, [pc, #272]	; (8001f70 <HAL_ADC_Init+0x26c>)
 8001e60:	e000      	b.n	8001e64 <HAL_ADC_Init+0x160>
 8001e62:	4a44      	ldr	r2, [pc, #272]	; (8001f74 <HAL_ADC_Init+0x270>)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f7ff fc70 	bl	8001750 <LL_ADC_SetCommonClock>
 8001e70:	e012      	b.n	8001e98 <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	f7ff fc9b 	bl	80017b8 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 8001e82:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <HAL_ADC_Init+0x270>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e92:	4938      	ldr	r1, [pc, #224]	; (8001f74 <HAL_ADC_Init+0x270>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a30      	ldr	r2, [pc, #192]	; (8001f60 <HAL_ADC_Init+0x25c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d010      	beq.n	8001ec4 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ea8:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8001eae:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 8001eb4:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001ebc:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	623b      	str	r3, [r7, #32]
 8001ec2:	e030      	b.n	8001f26 <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	7f1b      	ldrb	r3, [r3, #28]
 8001ec8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ed0:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001ed2:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ed8:	2a00      	cmp	r2, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_ADC_Init+0x1de>
 8001edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ee0:	e000      	b.n	8001ee4 <HAL_ADC_Init+0x1e0>
 8001ee2:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001ee4:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8001eea:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	da04      	bge.n	8001efe <HAL_ADC_Init+0x1fa>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001efc:	e001      	b.n	8001f02 <HAL_ADC_Init+0x1fe>
 8001efe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                            |
 8001f02:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4918      	ldr	r1, [pc, #96]	; (8001f6c <HAL_ADC_Init+0x268>)
 8001f0a:	428b      	cmp	r3, r1
 8001f0c:	d103      	bne.n	8001f16 <HAL_ADC_Init+0x212>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f14:	e003      	b.n	8001f1e <HAL_ADC_Init+0x21a>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f1c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8001f1e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f20:	6a3a      	ldr	r2, [r7, #32]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d12f      	bne.n	8001f90 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_ADC_Init+0x25c>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d007      	beq.n	8001f4a <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	045b      	lsls	r3, r3, #17
 8001f42:	6a3a      	ldr	r2, [r7, #32]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	623b      	str	r3, [r7, #32]
 8001f48:	e022      	b.n	8001f90 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d111      	bne.n	8001f78 <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001f54:	6a3b      	ldr	r3, [r7, #32]
 8001f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	e018      	b.n	8001f90 <HAL_ADC_Init+0x28c>
 8001f5e:	bf00      	nop
 8001f60:	46021000 	.word	0x46021000
 8001f64:	20000000 	.word	0x20000000
 8001f68:	053e2d63 	.word	0x053e2d63
 8001f6c:	42028000 	.word	0x42028000
 8001f70:	42028308 	.word	0x42028308
 8001f74:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f7c:	f043 0220 	orr.w	r2, r3, #32
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	679a      	str	r2, [r3, #120]	; 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f88:	f043 0201 	orr.w	r2, r3, #1
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	67da      	str	r2, [r3, #124]	; 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a92      	ldr	r2, [pc, #584]	; (80021e0 <HAL_ADC_Init+0x4dc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d018      	beq.n	8001fcc <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	6a3a      	ldr	r2, [r7, #32]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	4b89      	ldr	r3, [pc, #548]	; (80021e4 <HAL_ADC_Init+0x4e0>)
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	6a39      	ldr	r1, [r7, #32]
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	60d3      	str	r3, [r2, #12]
 8001fca:	e031      	b.n	8002030 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d009      	beq.n	8001fe8 <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fd8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	6a3a      	ldr	r2, [r7, #32]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	4b7e      	ldr	r3, [pc, #504]	; (80021e8 <HAL_ADC_Init+0x4e4>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	6a39      	ldr	r1, [r7, #32]
 8001ff8:	430b      	orrs	r3, r1
 8001ffa:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a1a      	ldr	r2, [r3, #32]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	645a      	str	r2, [r3, #68]	; 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a6a      	ldr	r2, [pc, #424]	; (80021e0 <HAL_ADC_Init+0x4dc>)
 8002036:	4293      	cmp	r3, r2
 8002038:	f000 8093 	beq.w	8002162 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fe38 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 8002046:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fe45 	bl	8001cdc <LL_ADC_INJ_IsConversionOngoing>
 8002052:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d161      	bne.n	800211e <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d15e      	bne.n	800211e <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	7f1b      	ldrb	r3, [r3, #28]
 8002064:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4960      	ldr	r1, [pc, #384]	; (80021ec <HAL_ADC_Init+0x4e8>)
 800206c:	428b      	cmp	r3, r1
 800206e:	d102      	bne.n	8002076 <HAL_ADC_Init+0x372>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002074:	e002      	b.n	800207c <HAL_ADC_Init+0x378>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800207c:	4313      	orrs	r3, r2
 800207e:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6812      	ldr	r2, [r2, #0]
 8002092:	6a39      	ldr	r1, [r7, #32]
 8002094:	430b      	orrs	r3, r1
 8002096:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	4619      	mov	r1, r3
 80020aa:	4610      	mov	r0, r2
 80020ac:	f7ff fc2c 	bl	8001908 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d11e      	bne.n	80020f8 <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020be:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	4b4a      	ldr	r3, [pc, #296]	; (80021f0 <HAL_ADC_Init+0x4ec>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80020ce:	0411      	lsls	r1, r2, #16
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020d4:	4311      	orrs	r1, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	6e12      	ldr	r2, [r2, #96]	; 0x60
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80020e0:	4311      	orrs	r1, r2
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020e6:	0892      	lsrs	r2, r2, #2
 80020e8:	430a      	orrs	r2, r1
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	611a      	str	r2, [r3, #16]
 80020f6:	e007      	b.n	8002108 <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	691b      	ldr	r3, [r3, #16]
 800210e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d10c      	bne.n	8002140 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212c:	f023 010f 	bic.w	r1, r3, #15
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	1e5a      	subs	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
 800213e:	e007      	b.n	8002150 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 020f 	bic.w	r2, r2, #15
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002154:	f023 0303 	bic.w	r3, r3, #3
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002160:	e092      	b.n	8002288 <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002168:	2b01      	cmp	r3, #1
 800216a:	d111      	bne.n	8002190 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002174:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                     hadc->Init.Oversampling.RightBitShift |
 800217a:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002180:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	4313      	orrs	r3, r2
 8002186:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <HAL_ADC_Init+0x4f0>)
 8002198:	4013      	ands	r3, r2
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	69f9      	ldr	r1, [r7, #28]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6818      	ldr	r0, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	461a      	mov	r2, r3
 80021ae:	2100      	movs	r1, #0
 80021b0:	f7ff fbcd 	bl	800194e <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	461a      	mov	r2, r3
 80021be:	f06f 01fb 	mvn.w	r1, #251	; 0xfb
 80021c2:	f7ff fbc4 	bl	800194e <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d114      	bne.n	80021f8 <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f062 020f 	orn	r2, r2, #15
 80021dc:	629a      	str	r2, [r3, #40]	; 0x28
 80021de:	e024      	b.n	800222a <HAL_ADC_Init+0x526>
 80021e0:	46021000 	.word	0x46021000
 80021e4:	fff0c013 	.word	0xfff0c013
 80021e8:	ffde800d 	.word	0xffde800d
 80021ec:	42028000 	.word	0x42028000
 80021f0:	fc00f81e 	.word	0xfc00f81e
 80021f4:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002200:	d113      	bne.n	800222a <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	3b01      	subs	r3, #1
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	f003 031c 	and.w	r3, r3, #28
 8002214:	f06f 020f 	mvn.w	r2, #15
 8002218:	fa02 f103 	lsl.w	r1, r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	629a      	str	r2, [r3, #40]	; 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	4b18      	ldr	r3, [pc, #96]	; (8002294 <HAL_ADC_Init+0x590>)
 8002232:	4013      	ands	r3, r2
 8002234:	6a3a      	ldr	r2, [r7, #32]
 8002236:	429a      	cmp	r2, r3
 8002238:	d10b      	bne.n	8002252 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	67da      	str	r2, [r3, #124]	; 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002244:	f023 0303 	bic.w	r3, r3, #3
 8002248:	f043 0201 	orr.w	r2, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	679a      	str	r2, [r3, #120]	; 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002250:	e01a      	b.n	8002288 <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002256:	f023 0312 	bic.w	r3, r3, #18
 800225a:	f043 0210 	orr.w	r2, r3, #16
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	679a      	str	r2, [r3, #120]	; 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002266:	f043 0201 	orr.w	r2, r3, #1
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	67da      	str	r2, [r3, #124]	; 0x7c

        tmp_hal_status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002274:	e008      	b.n	8002288 <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800227a:	f043 0210 	orr.w	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	679a      	str	r2, [r3, #120]	; 0x78

    tmp_hal_status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return tmp_hal_status;
 8002288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800228c:	4618      	mov	r0, r3
 800228e:	3728      	adds	r7, #40	; 0x28
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	833ffff3 	.word	0x833ffff3

08002298 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b0bc      	sub	sp, #240	; 0xf0
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_channel;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4aa8      	ldr	r2, [pc, #672]	; (8002554 <HAL_ADC_ConfigChannel+0x2bc>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d103      	bne.n	80022be <HAL_ADC_ConfigChannel+0x26>
  }
  else
  {
    assert_param(IS_ADC4_SAMPLE_TIME_COMMON(pConfig->SamplingTime));

    if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)          ||
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000

      assert_param(IS_ADC4_REGULAR_RANK(pConfig->Rank));
    }
  }

  __HAL_LOCK(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d102      	bne.n	80022ce <HAL_ADC_ConfigChannel+0x36>
 80022c8:	2302      	movs	r3, #2
 80022ca:	f000 beb5 	b.w	8003038 <HAL_ADC_ConfigChannel+0xda0>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fceb 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 8695 	bne.w	8003012 <HAL_ADC_ConfigChannel+0xd7a>
  {
    if (hadc->Instance != ADC4)  /* ADC1 or ADC2 */
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a99      	ldr	r2, [pc, #612]	; (8002554 <HAL_ADC_ConfigChannel+0x2bc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	f000 83ea 	beq.w	8002ac8 <HAL_ADC_ConfigChannel+0x830>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel) & 0x1FUL));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d108      	bne.n	8002312 <HAL_ADC_ConfigChannel+0x7a>
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0e9b      	lsrs	r3, r3, #26
 8002306:	f003 031f 	and.w	r3, r3, #31
 800230a:	2201      	movs	r2, #1
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	e01d      	b.n	800234e <HAL_ADC_ConfigChannel+0xb6>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800231e:	fa93 f3a3 	rbit	r3, r3
 8002322:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  return result;
 8002326:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800232a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  if (value == 0U)
 800232e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_ADC_ConfigChannel+0xa2>
    return 32U;
 8002336:	2320      	movs	r3, #32
 8002338:	e004      	b.n	8002344 <HAL_ADC_ConfigChannel+0xac>
  return __builtin_clz(value);
 800233a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	2201      	movs	r2, #1
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	69d1      	ldr	r1, [r2, #28]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	430b      	orrs	r3, r1
 800235a:	61d3      	str	r3, [r2, #28]

      /* Set ADC group regular sequence: channel on the selected scan sequence rank */
      LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6818      	ldr	r0, [r3, #0]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	6859      	ldr	r1, [r3, #4]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	f7ff fb0f 	bl	800198c <LL_ADC_REG_SetSequencerRanks>
      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated when ADC is disabled or enabled without   */
      /* conversion on going on regular group:                                    */
      /*  - Channel sampling time                                                 */
      /*  - Channel offset                                                        */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fc9f 	bl	8001cb6 <LL_ADC_REG_IsConversionOngoing>
 8002378:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff fcab 	bl	8001cdc <LL_ADC_INJ_IsConversionOngoing>
 8002386:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800238a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800238e:	2b00      	cmp	r3, #0
 8002390:	f040 81ed 	bne.w	800276e <HAL_ADC_ConfigChannel+0x4d6>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002398:	2b00      	cmp	r3, #0
 800239a:	f040 81e8 	bne.w	800276e <HAL_ADC_ConfigChannel+0x4d6>
         )
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6818      	ldr	r0, [r3, #0]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	6819      	ldr	r1, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f7ff fb9a 	bl	8001ae4 <LL_ADC_SetChannelSamplingTime>

        /* Configure the offset: offset enable/disable, channel, offset value */

        /* Shift the offset with respect to the selected ADC resolution. */
        /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
        tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	695a      	ldr	r2, [r3, #20]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	089b      	lsrs	r3, r3, #2
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

        if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d046      	beq.n	8002460 <HAL_ADC_ConfigChannel+0x1c8>
        {
          /* Set ADC selected offset number */
          LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmp_offset_shifted);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6818      	ldr	r0, [r3, #0]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	6919      	ldr	r1, [r3, #16]
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023e2:	f7ff fa09 	bl	80017f8 <LL_ADC_SetOffset>
          assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
          assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSignedSaturation));
          /* Set ADC selected offset sign */
          LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6919      	ldr	r1, [r3, #16]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f7ff fa37 	bl	8001866 <LL_ADC_SetOffsetSign>

          /* Configure offset saturation */
          if (pConfig->OffsetSaturation == ENABLE)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	7e9b      	ldrb	r3, [r3, #26]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d11e      	bne.n	800243e <HAL_ADC_ConfigChannel+0x1a6>
          {
            /* Set ADC selected offset unsigned/signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6818      	ldr	r0, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	6919      	ldr	r1, [r3, #16]
                                               (pConfig->OffsetSignedSaturation == DISABLE)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x17e>
 8002410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002414:	e000      	b.n	8002418 <HAL_ADC_ConfigChannel+0x180>
 8002416:	2300      	movs	r3, #0
 8002418:	461a      	mov	r2, r3
 800241a:	f7ff fa5a 	bl	80018d2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               ? LL_ADC_OFFSET_UNSIGNED_SATURATION_ENABLE    \
                                               : LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);

            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6919      	ldr	r1, [r3, #16]
                                             (pConfig->OffsetSignedSaturation == ENABLE)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	7e5b      	ldrb	r3, [r3, #25]
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800242a:	2b01      	cmp	r3, #1
 800242c:	d102      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x19c>
 800242e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002432:	e000      	b.n	8002436 <HAL_ADC_ConfigChannel+0x19e>
 8002434:	2300      	movs	r3, #0
 8002436:	461a      	mov	r2, r3
 8002438:	f7ff fa30 	bl	800189c <LL_ADC_SetOffsetSignedSaturation>
 800243c:	e197      	b.n	800276e <HAL_ADC_ConfigChannel+0x4d6>
                                             : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
          }
          else
          {
            /* Disable ADC offset signed saturation */
            LL_ADC_SetOffsetUnsignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6818      	ldr	r0, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2200      	movs	r2, #0
 8002448:	4619      	mov	r1, r3
 800244a:	f7ff fa42 	bl	80018d2 <LL_ADC_SetOffsetUnsignedSaturation>
                                               LL_ADC_OFFSET_UNSIGNED_SATURATION_DISABLE);
            LL_ADC_SetOffsetSignedSaturation(hadc->Instance, pConfig->OffsetNumber,
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	2200      	movs	r2, #0
 8002458:	4619      	mov	r1, r3
 800245a:	f7ff fa1f 	bl	800189c <LL_ADC_SetOffsetSignedSaturation>
 800245e:	e186      	b.n	800276e <HAL_ADC_ConfigChannel+0x4d6>
        }
        else
        {
          /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
             If this is the case, the corresponding offset is disabled since pConfig->OffsetNumber = ADC_OFFSET_NONE. */
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2100      	movs	r1, #0
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff f9e7 	bl	800183a <LL_ADC_GetOffsetChannel>
 800246c:	4603      	mov	r3, r0
 800246e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10a      	bne.n	800248c <HAL_ADC_ConfigChannel+0x1f4>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2100      	movs	r1, #0
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff f9dc 	bl	800183a <LL_ADC_GetOffsetChannel>
 8002482:	4603      	mov	r3, r0
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	f003 021f 	and.w	r2, r3, #31
 800248a:	e01e      	b.n	80024ca <HAL_ADC_ConfigChannel+0x232>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f7ff f9d1 	bl	800183a <LL_ADC_GetOffsetChannel>
 8002498:	4603      	mov	r3, r0
 800249a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  return result;
 80024aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  if (value == 0U)
 80024b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_ADC_ConfigChannel+0x226>
    return 32U;
 80024ba:	2320      	movs	r3, #32
 80024bc:	e004      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x230>
  return __builtin_clz(value);
 80024be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024c2:	fab3 f383 	clz	r3, r3
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d105      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x24a>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	0e9b      	lsrs	r3, r3, #26
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	e018      	b.n	8002514 <HAL_ADC_ConfigChannel+0x27c>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80024f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80024fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_ADC_ConfigChannel+0x272>
    return 32U;
 8002506:	2320      	movs	r3, #32
 8002508:	e004      	b.n	8002514 <HAL_ADC_ConfigChannel+0x27c>
  return __builtin_clz(value);
 800250a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800250e:	fab3 f383 	clz	r3, r3
 8002512:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002514:	429a      	cmp	r2, r3
 8002516:	d107      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x290>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, pConfig->Channel, 0x0);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2300      	movs	r3, #0
 8002522:	2100      	movs	r1, #0
 8002524:	f7ff f968 	bl	80017f8 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff f983 	bl	800183a <LL_ADC_GetOffsetChannel>
 8002534:	4603      	mov	r3, r0
 8002536:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10c      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x2c0>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2101      	movs	r1, #1
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff f978 	bl	800183a <LL_ADC_GetOffsetChannel>
 800254a:	4603      	mov	r3, r0
 800254c:	0e9b      	lsrs	r3, r3, #26
 800254e:	f003 021f 	and.w	r2, r3, #31
 8002552:	e020      	b.n	8002596 <HAL_ADC_ConfigChannel+0x2fe>
 8002554:	46021000 	.word	0x46021000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2101      	movs	r1, #1
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff f96b 	bl	800183a <LL_ADC_GetOffsetChannel>
 8002564:	4603      	mov	r3, r0
 8002566:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002576:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800257a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800257e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_ADC_ConfigChannel+0x2f2>
    return 32U;
 8002586:	2320      	movs	r3, #32
 8002588:	e004      	b.n	8002594 <HAL_ADC_ConfigChannel+0x2fc>
  return __builtin_clz(value);
 800258a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d105      	bne.n	80025ae <HAL_ADC_ConfigChannel+0x316>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	0e9b      	lsrs	r3, r3, #26
 80025a8:	f003 031f 	and.w	r3, r3, #31
 80025ac:	e018      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x348>
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025ba:	fa93 f3a3 	rbit	r3, r3
 80025be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80025c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80025ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x33e>
    return 32U;
 80025d2:	2320      	movs	r3, #32
 80025d4:	e004      	b.n	80025e0 <HAL_ADC_ConfigChannel+0x348>
  return __builtin_clz(value);
 80025d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80025da:	fab3 f383 	clz	r3, r3
 80025de:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d107      	bne.n	80025f4 <HAL_ADC_ConfigChannel+0x35c>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, pConfig->Channel, 0x0);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6818      	ldr	r0, [r3, #0]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	2300      	movs	r3, #0
 80025ee:	2101      	movs	r1, #1
 80025f0:	f7ff f902 	bl	80017f8 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2102      	movs	r1, #2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f91d 	bl	800183a <LL_ADC_GetOffsetChannel>
 8002600:	4603      	mov	r3, r0
 8002602:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10a      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x388>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	2102      	movs	r1, #2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff f912 	bl	800183a <LL_ADC_GetOffsetChannel>
 8002616:	4603      	mov	r3, r0
 8002618:	0e9b      	lsrs	r3, r3, #26
 800261a:	f003 021f 	and.w	r2, r3, #31
 800261e:	e01e      	b.n	800265e <HAL_ADC_ConfigChannel+0x3c6>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2102      	movs	r1, #2
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff f907 	bl	800183a <LL_ADC_GetOffsetChannel>
 800262c:	4603      	mov	r3, r0
 800262e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002636:	fa93 f3a3 	rbit	r3, r3
 800263a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800263e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002642:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002646:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 800264e:	2320      	movs	r3, #32
 8002650:	e004      	b.n	800265c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002652:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d105      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x3de>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	0e9b      	lsrs	r3, r3, #26
 8002670:	f003 031f 	and.w	r3, r3, #31
 8002674:	e018      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x410>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800268a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800268e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002692:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_ADC_ConfigChannel+0x406>
    return 32U;
 800269a:	2320      	movs	r3, #32
 800269c:	e004      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x410>
  return __builtin_clz(value);
 800269e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80026a2:	fab3 f383 	clz	r3, r3
 80026a6:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d107      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x424>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_3, pConfig->Channel, 0x0);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2300      	movs	r3, #0
 80026b6:	2102      	movs	r1, #2
 80026b8:	f7ff f89e 	bl	80017f8 <LL_ADC_SetOffset>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2103      	movs	r1, #3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff f8b9 	bl	800183a <LL_ADC_GetOffsetChannel>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10a      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x450>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2103      	movs	r1, #3
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff f8ae 	bl	800183a <LL_ADC_GetOffsetChannel>
 80026de:	4603      	mov	r3, r0
 80026e0:	0e9b      	lsrs	r3, r3, #26
 80026e2:	f003 021f 	and.w	r2, r3, #31
 80026e6:	e01a      	b.n	800271e <HAL_ADC_ConfigChannel+0x486>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2103      	movs	r1, #3
 80026ee:	4618      	mov	r0, r3
 80026f0:	f7ff f8a3 	bl	800183a <LL_ADC_GetOffsetChannel>
 80026f4:	4603      	mov	r3, r0
 80026f6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002700:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002702:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002706:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_ADC_ConfigChannel+0x47a>
    return 32U;
 800270e:	2320      	movs	r3, #32
 8002710:	e004      	b.n	800271c <HAL_ADC_ConfigChannel+0x484>
  return __builtin_clz(value);
 8002712:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002716:	fab3 f383 	clz	r3, r3
 800271a:	b2db      	uxtb	r3, r3
 800271c:	461a      	mov	r2, r3
              == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x49e>
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0e9b      	lsrs	r3, r3, #26
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	e011      	b.n	800275a <HAL_ADC_ConfigChannel+0x4c2>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800273c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800273e:	fa93 f3a3 	rbit	r3, r3
 8002742:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002746:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002748:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ADC_ConfigChannel+0x4ba>
    return 32U;
 800274e:	2320      	movs	r3, #32
 8002750:	e003      	b.n	800275a <HAL_ADC_ConfigChannel+0x4c2>
  return __builtin_clz(value);
 8002752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002754:	fab3 f383 	clz	r3, r3
 8002758:	b2db      	uxtb	r3, r3
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800275a:	429a      	cmp	r2, r3
 800275c:	d107      	bne.n	800276e <HAL_ADC_ConfigChannel+0x4d6>
          {
            LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, pConfig->Channel, 0x0);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	2300      	movs	r3, #0
 8002768:	2103      	movs	r1, #3
 800276a:	f7ff f845 	bl	80017f8 <LL_ADC_SetOffset>

      /* Parameters update conditioned to ADC state:                              */
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Single or differential mode                                           */
      /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fa8c 	bl	8001c90 <LL_ADC_IsEnabled>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 8456 	bne.w	800302c <HAL_ADC_ConfigChannel+0xd94>
      {
        /* Set mode single-ended or differential input of the selected ADC channel */
        LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	6819      	ldr	r1, [r3, #0]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	461a      	mov	r2, r3
 800278e:	f7ff fa0d 	bl	8001bac <LL_ADC_SetChannelSingleDiff>

        /* Configuration of differential mode */
        if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800279a:	f040 80d6 	bne.w	800294a <HAL_ADC_ConfigChannel+0x6b2>
        {
          /* Set sampling time of the selected ADC channel */
          /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
          tmp_channel = __LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel) \
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10b      	bne.n	80027c2 <HAL_ADC_ConfigChannel+0x52a>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	0e9b      	lsrs	r3, r3, #26
 80027b0:	3301      	adds	r3, #1
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2b09      	cmp	r3, #9
 80027b8:	bf94      	ite	ls
 80027ba:	2301      	movls	r3, #1
 80027bc:	2300      	movhi	r3, #0
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	e019      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x55e>
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027ca:	fa93 f3a3 	rbit	r3, r3
 80027ce:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80027d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027d2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80027d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_ADC_ConfigChannel+0x546>
    return 32U;
 80027da:	2320      	movs	r3, #32
 80027dc:	e003      	b.n	80027e6 <HAL_ADC_ConfigChannel+0x54e>
  return __builtin_clz(value);
 80027de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027e0:	fab3 f383 	clz	r3, r3
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	3301      	adds	r3, #1
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	2b09      	cmp	r3, #9
 80027ee:	bf94      	ite	ls
 80027f0:	2301      	movls	r3, #1
 80027f2:	2300      	movhi	r3, #0
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d04d      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x5fe>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d107      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x57e>
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	0e9b      	lsrs	r3, r3, #26
 800280c:	3301      	adds	r3, #1
 800280e:	069b      	lsls	r3, r3, #26
 8002810:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002814:	e015      	b.n	8002842 <HAL_ADC_ConfigChannel+0x5aa>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800281e:	fa93 f3a3 	rbit	r3, r3
 8002822:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002826:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ADC_ConfigChannel+0x59a>
    return 32U;
 800282e:	2320      	movs	r3, #32
 8002830:	e003      	b.n	800283a <HAL_ADC_ConfigChannel+0x5a2>
  return __builtin_clz(value);
 8002832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002834:	fab3 f383 	clz	r3, r3
 8002838:	b2db      	uxtb	r3, r3
 800283a:	3301      	adds	r3, #1
 800283c:	069b      	lsls	r3, r3, #26
 800283e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d109      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x5ca>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	0e9b      	lsrs	r3, r3, #26
 8002854:	3301      	adds	r3, #1
 8002856:	f003 031f 	and.w	r3, r3, #31
 800285a:	2101      	movs	r1, #1
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	e017      	b.n	8002892 <HAL_ADC_ConfigChannel+0x5fa>
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800286a:	fa93 f3a3 	rbit	r3, r3
 800286e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002872:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_ADC_ConfigChannel+0x5e6>
    return 32U;
 800287a:	2320      	movs	r3, #32
 800287c:	e003      	b.n	8002886 <HAL_ADC_ConfigChannel+0x5ee>
  return __builtin_clz(value);
 800287e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002880:	fab3 f383 	clz	r3, r3
 8002884:	b2db      	uxtb	r3, r3
 8002886:	3301      	adds	r3, #1
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2101      	movs	r1, #1
 800288e:	fa01 f303 	lsl.w	r3, r1, r3
 8002892:	4313      	orrs	r3, r2
 8002894:	e04e      	b.n	8002934 <HAL_ADC_ConfigChannel+0x69c>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d107      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x61a>
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	0e9b      	lsrs	r3, r3, #26
 80028a8:	3301      	adds	r3, #1
 80028aa:	069b      	lsls	r3, r3, #26
 80028ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028b0:	e015      	b.n	80028de <HAL_ADC_ConfigChannel+0x646>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ba:	fa93 f3a3 	rbit	r3, r3
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80028c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80028c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_ConfigChannel+0x636>
    return 32U;
 80028ca:	2320      	movs	r3, #32
 80028cc:	e003      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x63e>
  return __builtin_clz(value);
 80028ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	3301      	adds	r3, #1
 80028d8:	069b      	lsls	r3, r3, #26
 80028da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x666>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	0e9b      	lsrs	r3, r3, #26
 80028f0:	3301      	adds	r3, #1
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	2101      	movs	r1, #1
 80028f8:	fa01 f303 	lsl.w	r3, r1, r3
 80028fc:	e017      	b.n	800292e <HAL_ADC_ConfigChannel+0x696>
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800290c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_ADC_ConfigChannel+0x682>
    return 32U;
 8002916:	2320      	movs	r3, #32
 8002918:	e003      	b.n	8002922 <HAL_ADC_ConfigChannel+0x68a>
  return __builtin_clz(value);
 800291a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291c:	fab3 f383 	clz	r3, r3
 8002920:	b2db      	uxtb	r3, r3
 8002922:	3301      	adds	r3, #1
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	2101      	movs	r1, #1
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	4313      	orrs	r3, r2
 8002930:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002934:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
                                                        + 1UL) & 0x1FUL);
          LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	461a      	mov	r2, r3
 8002942:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002946:	f7ff f8cd 	bl	8001ae4 <LL_ADC_SetChannelSamplingTime>
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        /* Note: these internal measurement paths can be disabled using           */
        /* HAL_ADC_DeInit().                                                      */

        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	f280 836c 	bge.w	800302c <HAL_ADC_ConfigChannel+0xd94>
        {
          /* Configuration of common ADC parameters                                 */

          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a97      	ldr	r2, [pc, #604]	; (8002bb8 <HAL_ADC_ConfigChannel+0x920>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x6ca>
 800295e:	4b97      	ldr	r3, [pc, #604]	; (8002bbc <HAL_ADC_ConfigChannel+0x924>)
 8002960:	e000      	b.n	8002964 <HAL_ADC_ConfigChannel+0x6cc>
 8002962:	4b97      	ldr	r3, [pc, #604]	; (8002bc0 <HAL_ADC_ConfigChannel+0x928>)
 8002964:	4618      	mov	r0, r3
 8002966:	f7fe ff19 	bl	800179c <LL_ADC_GetCommonPathInternalCh>
 800296a:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* Software is allowed to change common parameters only when all ADCs   */
          /* of the common group are disabled.                                    */
          if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a91      	ldr	r2, [pc, #580]	; (8002bb8 <HAL_ADC_ConfigChannel+0x920>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d109      	bne.n	800298c <HAL_ADC_ConfigChannel+0x6f4>
 8002978:	488f      	ldr	r0, [pc, #572]	; (8002bb8 <HAL_ADC_ConfigChannel+0x920>)
 800297a:	f7ff f989 	bl	8001c90 <LL_ADC_IsEnabled>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	bf0c      	ite	eq
 8002984:	2301      	moveq	r3, #1
 8002986:	2300      	movne	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e008      	b.n	800299e <HAL_ADC_ConfigChannel+0x706>
 800298c:	488d      	ldr	r0, [pc, #564]	; (8002bc4 <HAL_ADC_ConfigChannel+0x92c>)
 800298e:	f7ff f97f 	bl	8001c90 <LL_ADC_IsEnabled>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8088 	beq.w	8002ab4 <HAL_ADC_ConfigChannel+0x81c>
          {
            /* If the requested internal measurement path has already been enabled, */
            /* bypass the configuration processing.                                 */
            if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a87      	ldr	r2, [pc, #540]	; (8002bc8 <HAL_ADC_ConfigChannel+0x930>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d132      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x77c>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029b2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d12c      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x77c>
            {
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a7e      	ldr	r2, [pc, #504]	; (8002bb8 <HAL_ADC_ConfigChannel+0x920>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d005      	beq.n	80029d0 <HAL_ADC_ConfigChannel+0x738>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a7e      	ldr	r2, [pc, #504]	; (8002bc4 <HAL_ADC_ConfigChannel+0x92c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	f040 832b 	bne.w	8003026 <HAL_ADC_ConfigChannel+0xd8e>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a78      	ldr	r2, [pc, #480]	; (8002bb8 <HAL_ADC_ConfigChannel+0x920>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d101      	bne.n	80029de <HAL_ADC_ConfigChannel+0x746>
 80029da:	4a78      	ldr	r2, [pc, #480]	; (8002bbc <HAL_ADC_ConfigChannel+0x924>)
 80029dc:	e000      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x748>
 80029de:	4a78      	ldr	r2, [pc, #480]	; (8002bc0 <HAL_ADC_ConfigChannel+0x928>)
 80029e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029e8:	4619      	mov	r1, r3
 80029ea:	4610      	mov	r0, r2
 80029ec:	f7fe fec3 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
                /* Wait loop initialization and execution */
                /* Note: Variable divided by 2 to compensate partially              */
                /*       CPU processing cycles, scaling in us split to not          */
                /*       exceed 32 bits register capacity and handle low frequency. */
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
                                   * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029f0:	4b76      	ldr	r3, [pc, #472]	; (8002bcc <HAL_ADC_ConfigChannel+0x934>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	4a76      	ldr	r2, [pc, #472]	; (8002bd0 <HAL_ADC_ConfigChannel+0x938>)
 80029f8:	fba2 2303 	umull	r2, r3, r2, r3
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
                wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)                                       \
 8002a02:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002a04:	e002      	b.n	8002a0c <HAL_ADC_ConfigChannel+0x774>
                {
                  wait_loop_index--;
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	60bb      	str	r3, [r7, #8]
                while (wait_loop_index != 0UL)
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f9      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x76e>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a12:	e308      	b.n	8003026 <HAL_ADC_ConfigChannel+0xd8e>
                }
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a6e      	ldr	r2, [pc, #440]	; (8002bd4 <HAL_ADC_ConfigChannel+0x93c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d121      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x7ca>
                                                                 & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
            else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel                          \
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d11b      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x7ca>
            {
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a62      	ldr	r2, [pc, #392]	; (8002bb8 <HAL_ADC_ConfigChannel+0x920>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d005      	beq.n	8002a40 <HAL_ADC_ConfigChannel+0x7a8>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a62      	ldr	r2, [pc, #392]	; (8002bc4 <HAL_ADC_ConfigChannel+0x92c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	f040 82f5 	bne.w	800302a <HAL_ADC_ConfigChannel+0xd92>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a5c      	ldr	r2, [pc, #368]	; (8002bb8 <HAL_ADC_ConfigChannel+0x920>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x7b6>
 8002a4a:	4a5c      	ldr	r2, [pc, #368]	; (8002bbc <HAL_ADC_ConfigChannel+0x924>)
 8002a4c:	e000      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x7b8>
 8002a4e:	4a5c      	ldr	r2, [pc, #368]	; (8002bc0 <HAL_ADC_ConfigChannel+0x928>)
 8002a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a58:	4619      	mov	r1, r3
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	f7fe fe8b 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a60:	e2e3      	b.n	800302a <HAL_ADC_ConfigChannel+0xd92>
                                               LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
              }
            }
            else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a5c      	ldr	r2, [pc, #368]	; (8002bd8 <HAL_ADC_ConfigChannel+0x940>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	f040 82df 	bne.w	800302c <HAL_ADC_ConfigChannel+0xd94>
                     && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f040 82d8 	bne.w	800302c <HAL_ADC_ConfigChannel+0xd94>
            {
              if (ADC_VREFINT_INSTANCE(hadc))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a4d      	ldr	r2, [pc, #308]	; (8002bb8 <HAL_ADC_ConfigChannel+0x920>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d005      	beq.n	8002a92 <HAL_ADC_ConfigChannel+0x7fa>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a4e      	ldr	r2, [pc, #312]	; (8002bc4 <HAL_ADC_ConfigChannel+0x92c>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	f040 82cd 	bne.w	800302c <HAL_ADC_ConfigChannel+0xd94>
              {
                LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a48      	ldr	r2, [pc, #288]	; (8002bb8 <HAL_ADC_ConfigChannel+0x920>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0x808>
 8002a9c:	4a47      	ldr	r2, [pc, #284]	; (8002bbc <HAL_ADC_ConfigChannel+0x924>)
 8002a9e:	e000      	b.n	8002aa2 <HAL_ADC_ConfigChannel+0x80a>
 8002aa0:	4a47      	ldr	r2, [pc, #284]	; (8002bc0 <HAL_ADC_ConfigChannel+0x928>)
 8002aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002aaa:	4619      	mov	r1, r3
 8002aac:	4610      	mov	r0, r2
 8002aae:	f7fe fe62 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
 8002ab2:	e2bb      	b.n	800302c <HAL_ADC_ConfigChannel+0xd94>
          /* enabled and other ADC of the common group are enabled, internal      */
          /* measurement paths cannot be enabled.                                 */
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	679a      	str	r2, [r3, #120]	; 0x78

            tmp_hal_status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8002ac6:	e2b1      	b.n	800302c <HAL_ADC_ConfigChannel+0xd94>
        }
      }
    }
    else
    {
      tmp_channel = pConfig->Channel;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

      /* Remap internal channels on STM32U5-2M revA */
#if defined (STM32U575xx) || defined (STM32U585xx)
      if (HAL_GetREVID() == REV_ID_A)
 8002ad0:	f7fe fe30 	bl	8001734 <HAL_GetREVID>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ada:	d130      	bne.n	8002b3e <HAL_ADC_ConfigChannel+0x8a6>
      {
        if (pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a3e      	ldr	r2, [pc, #248]	; (8002bdc <HAL_ADC_ConfigChannel+0x944>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d103      	bne.n	8002aee <HAL_ADC_ConfigChannel+0x856>
        {
          tmp_channel = (LL_ADC_CHANNEL_22 | ADC_CHANNEL_ID_INTERNAL_CH);
 8002ae6:	4b3e      	ldr	r3, [pc, #248]	; (8002be0 <HAL_ADC_ConfigChannel+0x948>)
 8002ae8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002aec:	e027      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC4_CHANNEL_VBAT)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a3c      	ldr	r2, [pc, #240]	; (8002be4 <HAL_ADC_ConfigChannel+0x94c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d103      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x868>
        {
          tmp_channel = (LL_ADC_CHANNEL_23 | ADC_CHANNEL_ID_INTERNAL_CH);
 8002af8:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <HAL_ADC_ConfigChannel+0x950>)
 8002afa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002afe:	e01e      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a39      	ldr	r2, [pc, #228]	; (8002bec <HAL_ADC_ConfigChannel+0x954>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d103      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x87a>
        {
          tmp_channel = (LL_ADC_CHANNEL_VREFINT | LL_ADC_CHANNEL_DIFFERENCIATION_VREFINT_VCORE);
 8002b0a:	4b39      	ldr	r3, [pc, #228]	; (8002bf0 <HAL_ADC_ConfigChannel+0x958>)
 8002b0c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b10:	e015      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH1_ADC4)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a37      	ldr	r2, [pc, #220]	; (8002bf4 <HAL_ADC_ConfigChannel+0x95c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d103      	bne.n	8002b24 <HAL_ADC_ConfigChannel+0x88c>
        {
          tmp_channel = (LL_ADC_CHANNEL_20 | ADC_CHANNEL_ID_INTERNAL_CH);
 8002b1c:	4b36      	ldr	r3, [pc, #216]	; (8002bf8 <HAL_ADC_ConfigChannel+0x960>)
 8002b1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b22:	e00c      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x8a6>
        }
        else if (pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a34      	ldr	r2, [pc, #208]	; (8002bfc <HAL_ADC_ConfigChannel+0x964>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d103      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x89e>
        {
          tmp_channel = (LL_ADC_CHANNEL_21 | ADC_CHANNEL_ID_INTERNAL_CH);
 8002b2e:	4b31      	ldr	r3, [pc, #196]	; (8002bf4 <HAL_ADC_ConfigChannel+0x95c>)
 8002b30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002b34:	e003      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x8a6>
        }
        else
        {
          tmp_channel = pConfig->Channel;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      /* If sequencer set to not fully configurable with channel rank set to    */
      /* none, remove the channel from the sequencer.                           */
      /* Otherwise (sequencer set to fully configurable or to to not fully      */
      /* configurable with channel rank to be set), configure the selected      */
      /* channel.                                                               */
      if (pConfig->Rank != ADC4_RANK_NONE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	f000 81a2 	beq.w	8002e8c <HAL_ADC_ConfigChannel+0xbf4>
        /* Note: ADC channel configuration requires few ADC clock cycles        */
        /*       to be ready. Processing of ADC settings in this function       */
        /*       induce that a specific wait time is not necessary.             */
        /*       For more details on ADC channel configuration ready,           */
        /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b50:	d004      	beq.n	8002b5c <HAL_ADC_ConfigChannel+0x8c4>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002b56:	4a2a      	ldr	r2, [pc, #168]	; (8002c00 <HAL_ADC_ConfigChannel+0x968>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d107      	bne.n	8002b6c <HAL_ADC_ConfigChannel+0x8d4>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Set the channel by enabling the corresponding bitfield.            */
          LL_ADC_REG_SetSequencerChAdd(hadc->Instance, tmp_channel);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe ff71 	bl	8001a4c <LL_ADC_REG_SetSequencerChAdd>
 8002b6a:	e0c1      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0xa58>
        {
          /* Sequencer set to fully configurable:                               */
          /* Set the channel by entering it into the selected rank.             */

          /* Memorize the channel set into variable in HAL ADC handle */
          MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 031f 	and.w	r3, r3, #31
 8002b7a:	210f      	movs	r1, #15
 8002b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b80:	43db      	mvns	r3, r3
 8002b82:	401a      	ands	r2, r3
 8002b84:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d105      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x904>
 8002b90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002b94:	0e9b      	lsrs	r3, r3, #26
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	e037      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x974>
 8002b9c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d127      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x96c>
    return 32U;
 8002bb4:	2320      	movs	r3, #32
 8002bb6:	e029      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x974>
 8002bb8:	42028000 	.word	0x42028000
 8002bbc:	42028308 	.word	0x42028308
 8002bc0:	46021308 	.word	0x46021308
 8002bc4:	46021000 	.word	0x46021000
 8002bc8:	ce080000 	.word	0xce080000
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	053e2d63 	.word	0x053e2d63
 8002bd4:	ca040000 	.word	0xca040000
 8002bd8:	80000001 	.word	0x80000001
 8002bdc:	b6002000 	.word	0xb6002000
 8002be0:	da400000 	.word	0xda400000
 8002be4:	ba004000 	.word	0xba004000
 8002be8:	de800000 	.word	0xde800000
 8002bec:	b2001000 	.word	0xb2001000
 8002bf0:	81000001 	.word	0x81000001
 8002bf4:	d6200000 	.word	0xd6200000
 8002bf8:	d2100000 	.word	0xd2100000
 8002bfc:	d7200000 	.word	0xd7200000
 8002c00:	80000010 	.word	0x80000010
  return __builtin_clz(value);
 8002c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	6839      	ldr	r1, [r7, #0]
 8002c0e:	6849      	ldr	r1, [r1, #4]
 8002c10:	f001 011f 	and.w	r1, r1, #31
 8002c14:	408b      	lsls	r3, r1
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* If the selected rank is below ADC group regular sequencer length,  */
          /* apply the configuration in ADC register.                           */
          /* Note: Otherwise, configuration is not applied.                     */
          /*       To apply it, parameter'NbrOfConversion' must be increased.   */
          if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d860      	bhi.n	8002cf0 <HAL_ADC_ConfigChannel+0xa58>
          {
#if !defined (ADC2)
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002c2e:	f7fe fd81 	bl	8001734 <HAL_GetREVID>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c38:	d851      	bhi.n	8002cde <HAL_ADC_ConfigChannel+0xa46>
            {
              if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) >= 20UL)
 8002c3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c3e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10a      	bne.n	8002c5c <HAL_ADC_ConfigChannel+0x9c4>
 8002c46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c4a:	0e9b      	lsrs	r3, r3, #26
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	2b13      	cmp	r3, #19
 8002c52:	bf8c      	ite	hi
 8002c54:	2301      	movhi	r3, #1
 8002c56:	2300      	movls	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e016      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x9f2>
 8002c5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa93 f3a3 	rbit	r3, r3
 8002c68:	61bb      	str	r3, [r7, #24]
  return result;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_ADC_ConfigChannel+0x9e0>
    return 32U;
 8002c74:	2320      	movs	r3, #32
 8002c76:	e003      	b.n	8002c80 <HAL_ADC_ConfigChannel+0x9e8>
  return __builtin_clz(value);
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	fab3 f383 	clz	r3, r3
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b13      	cmp	r3, #19
 8002c82:	bf8c      	ite	hi
 8002c84:	2301      	movhi	r3, #1
 8002c86:	2300      	movls	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d027      	beq.n	8002cde <HAL_ADC_ConfigChannel+0xa46>
              {
                tmp_channel = (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(tmp_channel) - 9UL));
 8002c8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c92:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_ADC_ConfigChannel+0xa16>
 8002c9a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002c9e:	0e9b      	lsrs	r3, r3, #26
 8002ca0:	f003 031f 	and.w	r3, r3, #31
 8002ca4:	3b09      	subs	r3, #9
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	e015      	b.n	8002cda <HAL_ADC_ConfigChannel+0xa42>
 8002cae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	60fb      	str	r3, [r7, #12]
  return result;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_ADC_ConfigChannel+0xa32>
    return 32U;
 8002cc6:	2320      	movs	r3, #32
 8002cc8:	e003      	b.n	8002cd2 <HAL_ADC_ConfigChannel+0xa3a>
  return __builtin_clz(value);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	fab3 f383 	clz	r3, r3
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	3b09      	subs	r3, #9
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
              }
            }
#endif /* ADC2 */
            LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, tmp_channel);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002cea:	4619      	mov	r1, r3
 8002cec:	f7fe fe4e 	bl	800198c <LL_ADC_REG_SetSequencerRanks>
          }
        }

        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, tmp_channel, pConfig->SamplingTime);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6818      	ldr	r0, [r3, #0]
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002cfe:	f7fe fef1 	bl	8001ae4 <LL_ADC_SetChannelSamplingTime>
        /* internal measurement paths enable: If internal channel selected,     */
        /* enable dedicated internal buffers and path.                          */
        /* Note: these internal measurement paths can be disabled using         */
        /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
        /*       channel configuration parameter "Rank".                        */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f280 8190 	bge.w	800302c <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a97      	ldr	r2, [pc, #604]	; (8002f70 <HAL_ADC_ConfigChannel+0xcd8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0xa82>
 8002d16:	4b97      	ldr	r3, [pc, #604]	; (8002f74 <HAL_ADC_ConfigChannel+0xcdc>)
 8002d18:	e000      	b.n	8002d1c <HAL_ADC_ConfigChannel+0xa84>
 8002d1a:	4b97      	ldr	r3, [pc, #604]	; (8002f78 <HAL_ADC_ConfigChannel+0xce0>)
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe fd3d 	bl	800179c <LL_ADC_GetCommonPathInternalCh>
 8002d22:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          /* If the requested internal measurement path has already been enabled,   */
          /* bypass the configuration processing.                                   */
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a94      	ldr	r2, [pc, #592]	; (8002f7c <HAL_ADC_ConfigChannel+0xce4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d126      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0xae6>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d120      	bne.n	8002d7e <HAL_ADC_ConfigChannel+0xae6>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a8b      	ldr	r2, [pc, #556]	; (8002f70 <HAL_ADC_ConfigChannel+0xcd8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0xab2>
 8002d46:	4a8b      	ldr	r2, [pc, #556]	; (8002f74 <HAL_ADC_ConfigChannel+0xcdc>)
 8002d48:	e000      	b.n	8002d4c <HAL_ADC_ConfigChannel+0xab4>
 8002d4a:	4a8b      	ldr	r2, [pc, #556]	; (8002f78 <HAL_ADC_ConfigChannel+0xce0>)
 8002d4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002d54:	4619      	mov	r1, r3
 8002d56:	4610      	mov	r0, r2
 8002d58:	f7fe fd0d 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002d5c:	4b88      	ldr	r3, [pc, #544]	; (8002f80 <HAL_ADC_ConfigChannel+0xce8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	099b      	lsrs	r3, r3, #6
 8002d62:	4a88      	ldr	r2, [pc, #544]	; (8002f84 <HAL_ADC_ConfigChannel+0xcec>)
 8002d64:	fba2 2303 	umull	r2, r3, r2, r3
 8002d68:	099b      	lsrs	r3, r3, #6
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002d6e:	e002      	b.n	8002d76 <HAL_ADC_ConfigChannel+0xade>
            {
              wait_loop_index--;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	60bb      	str	r3, [r7, #8]
            while (wait_loop_index != 0UL)
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f9      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0xad8>
          if ((pConfig->Channel == ADC4_CHANNEL_TEMPSENSOR)                                                           \
 8002d7c:	e067      	b.n	8002e4e <HAL_ADC_ConfigChannel+0xbb6>
            }
          }
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a81      	ldr	r2, [pc, #516]	; (8002f88 <HAL_ADC_ConfigChannel+0xcf0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d116      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0xb1e>
                                                                & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
          else if ((pConfig->Channel == ADC4_CHANNEL_VBAT) && ((tmp_config_internal_channel                           \
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d110      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0xb1e>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a75      	ldr	r2, [pc, #468]	; (8002f70 <HAL_ADC_ConfigChannel+0xcd8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0xb0a>
 8002d9e:	4a75      	ldr	r2, [pc, #468]	; (8002f74 <HAL_ADC_ConfigChannel+0xcdc>)
 8002da0:	e000      	b.n	8002da4 <HAL_ADC_ConfigChannel+0xb0c>
 8002da2:	4a75      	ldr	r2, [pc, #468]	; (8002f78 <HAL_ADC_ConfigChannel+0xce0>)
 8002da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002da8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f7fe fce1 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
 8002db4:	e04b      	b.n	8002e4e <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)                                                          \
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a74      	ldr	r2, [pc, #464]	; (8002f8c <HAL_ADC_ConfigChannel+0xcf4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d116      	bne.n	8002dee <HAL_ADC_ConfigChannel+0xb56>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d110      	bne.n	8002dee <HAL_ADC_ConfigChannel+0xb56>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a67      	ldr	r2, [pc, #412]	; (8002f70 <HAL_ADC_ConfigChannel+0xcd8>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_ADC_ConfigChannel+0xb42>
 8002dd6:	4a67      	ldr	r2, [pc, #412]	; (8002f74 <HAL_ADC_ConfigChannel+0xcdc>)
 8002dd8:	e000      	b.n	8002ddc <HAL_ADC_ConfigChannel+0xb44>
 8002dda:	4a67      	ldr	r2, [pc, #412]	; (8002f78 <HAL_ADC_ConfigChannel+0xce0>)
 8002ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002de0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002de4:	4619      	mov	r1, r3
 8002de6:	4610      	mov	r0, r2
 8002de8:	f7fe fcc5 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
 8002dec:	e02f      	b.n	8002e4e <HAL_ADC_ConfigChannel+0xbb6>
                                           LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VCORE)                                                            \
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a67      	ldr	r2, [pc, #412]	; (8002f90 <HAL_ADC_ConfigChannel+0xcf8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d12a      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0xbb6>
                   && ((tmp_config_internal_channel  & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d124      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0xbb6>
          {
#if !defined (ADC2)
            if (ADC_VCORE_INSTANCE(hadc))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a62      	ldr	r2, [pc, #392]	; (8002f94 <HAL_ADC_ConfigChannel+0xcfc>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d11f      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0xbb6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a57      	ldr	r2, [pc, #348]	; (8002f70 <HAL_ADC_ConfigChannel+0xcd8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0xb84>
 8002e18:	4a56      	ldr	r2, [pc, #344]	; (8002f74 <HAL_ADC_ConfigChannel+0xcdc>)
 8002e1a:	e000      	b.n	8002e1e <HAL_ADC_ConfigChannel+0xb86>
 8002e1c:	4a56      	ldr	r2, [pc, #344]	; (8002f78 <HAL_ADC_ConfigChannel+0xce0>)
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e26:	4619      	mov	r1, r3
 8002e28:	4610      	mov	r0, r2
 8002e2a:	f7fe fca4 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
                                             LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
              if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002e2e:	f7fe fc81 	bl	8001734 <HAL_GetREVID>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e38:	d809      	bhi.n	8002e4e <HAL_ADC_ConfigChannel+0xbb6>
              {
                SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8002e4e:	f7fe fc71 	bl	8001734 <HAL_GetREVID>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e58:	f040 80e8 	bne.w	800302c <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a4d      	ldr	r2, [pc, #308]	; (8002f98 <HAL_ADC_ConfigChannel+0xd00>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	f040 80e2 	bne.w	800302c <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f040 80db 	bne.w	800302c <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8002e8a:	e0cf      	b.n	800302c <HAL_ADC_ConfigChannel+0xd94>
        /* Regular sequencer configuration */
        /* Note: Case of sequencer set to fully configurable:                   */
        /*       Sequencer rank cannot be disabled, only affected to            */
        /*       another channel.                                               */
        /*       To remove a rank, use parameter 'NbrOfConversion".             */
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e94:	d004      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0xc08>
            (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
        if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)         ||
 8002e9a:	4a40      	ldr	r2, [pc, #256]	; (8002f9c <HAL_ADC_ConfigChannel+0xd04>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d106      	bne.n	8002eae <HAL_ADC_ConfigChannel+0xc16>
        {
          /* Sequencer set to not fully configurable:                           */
          /* Reset the channel by disabling the corresponding bitfield.         */
          LL_ADC_REG_SetSequencerChRem(hadc->Instance, tmp_channel);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fe fe02 	bl	8001ab2 <LL_ADC_REG_SetSequencerChRem>
        }

        /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
        /* If internal channel selected, enable dedicated internal buffers and    */
        /* paths.                                                                 */
        if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	f280 80ba 	bge.w	800302c <HAL_ADC_ConfigChannel+0xd94>
        {
          tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a2c      	ldr	r2, [pc, #176]	; (8002f70 <HAL_ADC_ConfigChannel+0xcd8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d101      	bne.n	8002ec6 <HAL_ADC_ConfigChannel+0xc2e>
 8002ec2:	4b2c      	ldr	r3, [pc, #176]	; (8002f74 <HAL_ADC_ConfigChannel+0xcdc>)
 8002ec4:	e000      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0xc30>
 8002ec6:	4b2c      	ldr	r3, [pc, #176]	; (8002f78 <HAL_ADC_ConfigChannel+0xce0>)
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fe fc67 	bl	800179c <LL_ADC_GetCommonPathInternalCh>
 8002ece:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4

          if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a32      	ldr	r2, [pc, #200]	; (8002fa0 <HAL_ADC_ConfigChannel+0xd08>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d110      	bne.n	8002efe <HAL_ADC_ConfigChannel+0xc66>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a23      	ldr	r2, [pc, #140]	; (8002f70 <HAL_ADC_ConfigChannel+0xcd8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d101      	bne.n	8002eea <HAL_ADC_ConfigChannel+0xc52>
 8002ee6:	4a23      	ldr	r2, [pc, #140]	; (8002f74 <HAL_ADC_ConfigChannel+0xcdc>)
 8002ee8:	e000      	b.n	8002eec <HAL_ADC_ConfigChannel+0xc54>
 8002eea:	4a23      	ldr	r2, [pc, #140]	; (8002f78 <HAL_ADC_ConfigChannel+0xce0>)
 8002eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4610      	mov	r0, r2
 8002ef8:	f7fe fc3d 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
 8002efc:	e06d      	b.n	8002fda <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a28      	ldr	r2, [pc, #160]	; (8002fa4 <HAL_ADC_ConfigChannel+0xd0c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d110      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0xc92>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a18      	ldr	r2, [pc, #96]	; (8002f70 <HAL_ADC_ConfigChannel+0xcd8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d101      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0xc7e>
 8002f12:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <HAL_ADC_ConfigChannel+0xcdc>)
 8002f14:	e000      	b.n	8002f18 <HAL_ADC_ConfigChannel+0xc80>
 8002f16:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <HAL_ADC_ConfigChannel+0xce0>)
 8002f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f7fe fc27 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
 8002f28:	e057      	b.n	8002fda <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <HAL_ADC_ConfigChannel+0xcf4>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d110      	bne.n	8002f56 <HAL_ADC_ConfigChannel+0xcbe>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0d      	ldr	r2, [pc, #52]	; (8002f70 <HAL_ADC_ConfigChannel+0xcd8>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0xcaa>
 8002f3e:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <HAL_ADC_ConfigChannel+0xcdc>)
 8002f40:	e000      	b.n	8002f44 <HAL_ADC_ConfigChannel+0xcac>
 8002f42:	4a0d      	ldr	r2, [pc, #52]	; (8002f78 <HAL_ADC_ConfigChannel+0xce0>)
 8002f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f48:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f7fe fc11 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
 8002f54:	e041      	b.n	8002fda <HAL_ADC_ConfigChannel+0xd42>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
          }
          else if (pConfig->Channel == ADC_CHANNEL_VCORE)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a0d      	ldr	r2, [pc, #52]	; (8002f90 <HAL_ADC_ConfigChannel+0xcf8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d13c      	bne.n	8002fda <HAL_ADC_ConfigChannel+0xd42>
          {
#if !defined (ADC2)
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a02      	ldr	r2, [pc, #8]	; (8002f70 <HAL_ADC_ConfigChannel+0xcd8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d11e      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0xd10>
 8002f6a:	4a02      	ldr	r2, [pc, #8]	; (8002f74 <HAL_ADC_ConfigChannel+0xcdc>)
 8002f6c:	e01d      	b.n	8002faa <HAL_ADC_ConfigChannel+0xd12>
 8002f6e:	bf00      	nop
 8002f70:	42028000 	.word	0x42028000
 8002f74:	42028308 	.word	0x42028308
 8002f78:	46021308 	.word	0x46021308
 8002f7c:	b6002000 	.word	0xb6002000
 8002f80:	20000000 	.word	0x20000000
 8002f84:	053e2d63 	.word	0x053e2d63
 8002f88:	ba004000 	.word	0xba004000
 8002f8c:	80000001 	.word	0x80000001
 8002f90:	b2001000 	.word	0xb2001000
 8002f94:	46021000 	.word	0x46021000
 8002f98:	d7200000 	.word	0xd7200000
 8002f9c:	80000010 	.word	0x80000010
 8002fa0:	ce080000 	.word	0xce080000
 8002fa4:	ca040000 	.word	0xca040000
 8002fa8:	4a25      	ldr	r2, [pc, #148]	; (8003040 <HAL_ADC_ConfigChannel+0xda8>)
 8002faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fae:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	f7fe fbde 	bl	8001776 <LL_ADC_SetCommonPathInternalCh>
                                           ~LL_ADC_PATH_INTERNAL_VREFINT & tmp_config_internal_channel);
            if (HAL_GetREVID() <= REV_ID_A) /* STM32U5 silicon Rev.A */
 8002fba:	f7fe fbbb 	bl	8001734 <HAL_GetREVID>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc4:	d809      	bhi.n	8002fda <HAL_ADC_ConfigChannel+0xd42>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
            /* nothing to do */
          }
          /* If STM32U5 2M silicon Rev.B (or 4M), ADC_CHANNEL_DAC1CH1 and ADC_CHANNEL_DAC1CH2 are both on Channel 21
             and selection is done via ADC_OR[0] register */
#if !defined (ADC2)
          if (HAL_GetREVID() == REV_ID_B) /* STM32U5 silicon Rev.B */
 8002fda:	f7fe fbab 	bl	8001734 <HAL_GetREVID>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe4:	d122      	bne.n	800302c <HAL_ADC_ConfigChannel+0xd94>
          {
            if ((pConfig->Channel == ADC_CHANNEL_DAC1CH2_ADC4)                                                        \
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a16      	ldr	r2, [pc, #88]	; (8003044 <HAL_ADC_ConfigChannel+0xdac>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d11d      	bne.n	800302c <HAL_ADC_ConfigChannel+0xd94>
                && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d117      	bne.n	800302c <HAL_ADC_ConfigChannel+0xd94>
            {
              SET_BIT((hadc->Instance->OR), ADC_OR_CHN0SEL);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0201 	orr.w	r2, r2, #1
 800300c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 8003010:	e00c      	b.n	800302c <HAL_ADC_ConfigChannel+0xd94>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003016:	f043 0220 	orr.w	r2, r3, #32
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	679a      	str	r2, [r3, #120]	; 0x78
    tmp_hal_status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 30ef 	strb.w	r3, [r7, #239]	; 0xef
 8003024:	e002      	b.n	800302c <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003026:	bf00      	nop
 8003028:	e000      	b.n	800302c <HAL_ADC_ConfigChannel+0xd94>
              if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800302a:	bf00      	nop
  }

  __HAL_UNLOCK(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return tmp_hal_status;
 8003034:	f897 30ef 	ldrb.w	r3, [r7, #239]	; 0xef
}
 8003038:	4618      	mov	r0, r3
 800303a:	37f0      	adds	r7, #240	; 0xf0
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	46021308 	.word	0x46021308
 8003044:	d7200000 	.word	0xd7200000

08003048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003064:	4013      	ands	r3, r2
 8003066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800307a:	4a04      	ldr	r2, [pc, #16]	; (800308c <__NVIC_SetPriorityGrouping+0x44>)
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	60d3      	str	r3, [r2, #12]
}
 8003080:	bf00      	nop
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003094:	4b04      	ldr	r3, [pc, #16]	; (80030a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	0a1b      	lsrs	r3, r3, #8
 800309a:	f003 0307 	and.w	r3, r3, #7
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	db0b      	blt.n	80030d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	f003 021f 	and.w	r2, r3, #31
 80030c4:	4907      	ldr	r1, [pc, #28]	; (80030e4 <__NVIC_EnableIRQ+0x38>)
 80030c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ca:	095b      	lsrs	r3, r3, #5
 80030cc:	2001      	movs	r0, #1
 80030ce:	fa00 f202 	lsl.w	r2, r0, r2
 80030d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	e000e100 	.word	0xe000e100

080030e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	6039      	str	r1, [r7, #0]
 80030f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	db0a      	blt.n	8003112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	490c      	ldr	r1, [pc, #48]	; (8003134 <__NVIC_SetPriority+0x4c>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	0112      	lsls	r2, r2, #4
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	440b      	add	r3, r1
 800310c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003110:	e00a      	b.n	8003128 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	b2da      	uxtb	r2, r3
 8003116:	4908      	ldr	r1, [pc, #32]	; (8003138 <__NVIC_SetPriority+0x50>)
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	3b04      	subs	r3, #4
 8003120:	0112      	lsls	r2, r2, #4
 8003122:	b2d2      	uxtb	r2, r2
 8003124:	440b      	add	r3, r1
 8003126:	761a      	strb	r2, [r3, #24]
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000e100 	.word	0xe000e100
 8003138:	e000ed00 	.word	0xe000ed00

0800313c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	; 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f1c3 0307 	rsb	r3, r3, #7
 8003156:	2b04      	cmp	r3, #4
 8003158:	bf28      	it	cs
 800315a:	2304      	movcs	r3, #4
 800315c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3304      	adds	r3, #4
 8003162:	2b06      	cmp	r3, #6
 8003164:	d902      	bls.n	800316c <NVIC_EncodePriority+0x30>
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3b03      	subs	r3, #3
 800316a:	e000      	b.n	800316e <NVIC_EncodePriority+0x32>
 800316c:	2300      	movs	r3, #0
 800316e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003170:	f04f 32ff 	mov.w	r2, #4294967295
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43da      	mvns	r2, r3
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	401a      	ands	r2, r3
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003184:	f04f 31ff 	mov.w	r1, #4294967295
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	43d9      	mvns	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003194:	4313      	orrs	r3, r2
         );
}
 8003196:	4618      	mov	r0, r3
 8003198:	3724      	adds	r7, #36	; 0x24
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031b4:	d301      	bcc.n	80031ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031b6:	2301      	movs	r3, #1
 80031b8:	e00f      	b.n	80031da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <SysTick_Config+0x40>)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3b01      	subs	r3, #1
 80031c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031c2:	210f      	movs	r1, #15
 80031c4:	f04f 30ff 	mov.w	r0, #4294967295
 80031c8:	f7ff ff8e 	bl	80030e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031cc:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <SysTick_Config+0x40>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031d2:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <SysTick_Config+0x40>)
 80031d4:	2207      	movs	r2, #7
 80031d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3708      	adds	r7, #8
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	e000e010 	.word	0xe000e010

080031e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff ff29 	bl	8003048 <__NVIC_SetPriorityGrouping>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b086      	sub	sp, #24
 8003202:	af00      	add	r7, sp, #0
 8003204:	4603      	mov	r3, r0
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800320c:	f7ff ff40 	bl	8003090 <__NVIC_GetPriorityGrouping>
 8003210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	6978      	ldr	r0, [r7, #20]
 8003218:	f7ff ff90 	bl	800313c <NVIC_EncodePriority>
 800321c:	4602      	mov	r2, r0
 800321e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff ff5f 	bl	80030e8 <__NVIC_SetPriority>
}
 800322a:	bf00      	nop
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003232:	b580      	push	{r7, lr}
 8003234:	b082      	sub	sp, #8
 8003236:	af00      	add	r7, sp, #0
 8003238:	4603      	mov	r3, r0
 800323a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800323c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff ff33 	bl	80030ac <__NVIC_EnableIRQ>
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	b082      	sub	sp, #8
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff ffa4 	bl	80031a4 <SysTick_Config>
 800325c:	4603      	mov	r3, r0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3708      	adds	r7, #8
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003268:	b480      	push	{r7}
 800326a:	b089      	sub	sp, #36	; 0x24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003272:	2300      	movs	r3, #0
 8003274:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800327a:	e1ba      	b.n	80035f2 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	fa01 f303 	lsl.w	r3, r1, r3
 8003288:	4013      	ands	r3, r2
 800328a:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 81aa 	beq.w	80035ec <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a55      	ldr	r2, [pc, #340]	; (80033f0 <HAL_GPIO_Init+0x188>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d15d      	bne.n	800335c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80032a6:	2201      	movs	r2, #1
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69fa      	ldr	r2, [r7, #28]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f003 0201 	and.w	r2, r3, #1
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80032d0:	4a48      	ldr	r2, [pc, #288]	; (80033f4 <HAL_GPIO_Init+0x18c>)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032d8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80032da:	4a46      	ldr	r2, [pc, #280]	; (80033f4 <HAL_GPIO_Init+0x18c>)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	08da      	lsrs	r2, r3, #3
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	3208      	adds	r2, #8
 80032ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	220f      	movs	r2, #15
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	4013      	ands	r3, r2
 8003308:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	f003 0307 	and.w	r3, r3, #7
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	220b      	movs	r2, #11
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	4313      	orrs	r3, r2
 800331c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	08da      	lsrs	r2, r3, #3
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	3208      	adds	r2, #8
 8003326:	69f9      	ldr	r1, [r7, #28]
 8003328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	2203      	movs	r2, #3
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69fa      	ldr	r2, [r7, #28]
 8003340:	4013      	ands	r3, r2
 8003342:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	2202      	movs	r2, #2
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	69fa      	ldr	r2, [r7, #28]
 8003350:	4313      	orrs	r3, r2
 8003352:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	69fa      	ldr	r2, [r7, #28]
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	e067      	b.n	800342c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	2b02      	cmp	r3, #2
 8003362:	d003      	beq.n	800336c <HAL_GPIO_Init+0x104>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b12      	cmp	r3, #18
 800336a:	d145      	bne.n	80033f8 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	08da      	lsrs	r2, r3, #3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3208      	adds	r2, #8
 8003374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003378:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	220f      	movs	r2, #15
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	4013      	ands	r3, r2
 800338e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	f003 020f 	and.w	r2, r3, #15
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	08da      	lsrs	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3208      	adds	r2, #8
 80033b2:	69f9      	ldr	r1, [r7, #28]
 80033b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0203 	and.w	r2, r3, #3
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	601a      	str	r2, [r3, #0]
 80033ec:	e01e      	b.n	800342c <HAL_GPIO_Init+0x1c4>
 80033ee:	bf00      	nop
 80033f0:	46020000 	.word	0x46020000
 80033f4:	08009d70 	.word	0x08009d70
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	2203      	movs	r2, #3
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	43db      	mvns	r3, r3
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	4013      	ands	r3, r2
 800340e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f003 0203 	and.w	r2, r3, #3
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	4313      	orrs	r3, r2
 8003424:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d00b      	beq.n	800344c <HAL_GPIO_Init+0x1e4>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d007      	beq.n	800344c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003440:	2b11      	cmp	r3, #17
 8003442:	d003      	beq.n	800344c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b12      	cmp	r3, #18
 800344a:	d130      	bne.n	80034ae <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	2203      	movs	r2, #3
 8003458:	fa02 f303 	lsl.w	r3, r2, r3
 800345c:	43db      	mvns	r3, r3
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	4013      	ands	r3, r2
 8003462:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	4313      	orrs	r3, r2
 8003474:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003482:	2201      	movs	r2, #1
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	43db      	mvns	r3, r3
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	4013      	ands	r3, r2
 8003490:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	f003 0201 	and.w	r2, r3, #1
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	69fa      	ldr	r2, [r7, #28]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d017      	beq.n	80034e6 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	2203      	movs	r2, #3
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	fa02 f303 	lsl.w	r3, r2, r3
 80034da:	69fa      	ldr	r2, [r7, #28]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d07c      	beq.n	80035ec <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80034f2:	4a47      	ldr	r2, [pc, #284]	; (8003610 <HAL_GPIO_Init+0x3a8>)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	089b      	lsrs	r3, r3, #2
 80034f8:	3318      	adds	r3, #24
 80034fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fe:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	220f      	movs	r2, #15
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43db      	mvns	r3, r3
 8003510:	69fa      	ldr	r2, [r7, #28]
 8003512:	4013      	ands	r3, r2
 8003514:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	0a9a      	lsrs	r2, r3, #10
 800351a:	4b3e      	ldr	r3, [pc, #248]	; (8003614 <HAL_GPIO_Init+0x3ac>)
 800351c:	4013      	ands	r3, r2
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	f002 0203 	and.w	r2, r2, #3
 8003524:	00d2      	lsls	r2, r2, #3
 8003526:	4093      	lsls	r3, r2
 8003528:	69fa      	ldr	r2, [r7, #28]
 800352a:	4313      	orrs	r3, r2
 800352c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800352e:	4938      	ldr	r1, [pc, #224]	; (8003610 <HAL_GPIO_Init+0x3a8>)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	089b      	lsrs	r3, r3, #2
 8003534:	3318      	adds	r3, #24
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800353c:	4b34      	ldr	r3, [pc, #208]	; (8003610 <HAL_GPIO_Init+0x3a8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	43db      	mvns	r3, r3
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	4013      	ands	r3, r2
 800354a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003560:	4a2b      	ldr	r2, [pc, #172]	; (8003610 <HAL_GPIO_Init+0x3a8>)
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003566:	4b2a      	ldr	r3, [pc, #168]	; (8003610 <HAL_GPIO_Init+0x3a8>)
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	43db      	mvns	r3, r3
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	4013      	ands	r3, r2
 8003574:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	4313      	orrs	r3, r2
 8003588:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800358a:	4a21      	ldr	r2, [pc, #132]	; (8003610 <HAL_GPIO_Init+0x3a8>)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003590:	4b1f      	ldr	r3, [pc, #124]	; (8003610 <HAL_GPIO_Init+0x3a8>)
 8003592:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003596:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	43db      	mvns	r3, r3
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	4013      	ands	r3, r2
 80035a0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80035ae:	69fa      	ldr	r2, [r7, #28]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80035b6:	4a16      	ldr	r2, [pc, #88]	; (8003610 <HAL_GPIO_Init+0x3a8>)
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80035be:	4b14      	ldr	r3, [pc, #80]	; (8003610 <HAL_GPIO_Init+0x3a8>)
 80035c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69fa      	ldr	r2, [r7, #28]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d003      	beq.n	80035e4 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80035e4:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <HAL_GPIO_Init+0x3a8>)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3301      	adds	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f47f ae3d 	bne.w	800327c <HAL_GPIO_Init+0x14>
  }
}
 8003602:	bf00      	nop
 8003604:	bf00      	nop
 8003606:	3724      	adds	r7, #36	; 0x24
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	46022000 	.word	0x46022000
 8003614:	002f7f7f 	.word	0x002f7f7f

08003618 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	807b      	strh	r3, [r7, #2]
 8003624:	4613      	mov	r3, r2
 8003626:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003628:	787b      	ldrb	r3, [r7, #1]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d003      	beq.n	8003636 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003634:	e002      	b.n	800363c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8003652:	4b0f      	ldr	r3, [pc, #60]	; (8003690 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	4013      	ands	r3, r2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d006      	beq.n	800366c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800365e:	4a0c      	ldr	r2, [pc, #48]	; (8003690 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 8003660:	88fb      	ldrh	r3, [r7, #6]
 8003662:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	4618      	mov	r0, r3
 8003668:	f000 f814 	bl	8003694 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800366c:	4b08      	ldr	r3, [pc, #32]	; (8003690 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	4013      	ands	r3, r2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d006      	beq.n	8003686 <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003678:	4a05      	ldr	r2, [pc, #20]	; (8003690 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 f812 	bl	80036aa <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003686:	bf00      	nop
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	46022000 	.word	0x46022000

08003694 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line rising detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
 80036dc:	e007      	b.n	80036ee <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80036de:	4b07      	ldr	r3, [pc, #28]	; (80036fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f023 0204 	bic.w	r2, r3, #4
 80036e6:	4905      	ldr	r1, [pc, #20]	; (80036fc <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]
  }

  return status;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	40030400 	.word	0x40030400

08003700 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003704:	4b05      	ldr	r3, [pc, #20]	; (800371c <HAL_ICACHE_Enable+0x1c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a04      	ldr	r2, [pc, #16]	; (800371c <HAL_ICACHE_Enable+0x1c>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40030400 	.word	0x40030400

08003720 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e0e7      	b.n	8003902 <HAL_LPTIM_Init+0x1e2>
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(hlptim->Init.Period));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d106      	bne.n	8003752 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7fd fc19 	bl	8000f84 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2202      	movs	r2, #2
 8003756:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f042 0201 	orr.w	r2, r2, #1
 8003768:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003772:	605a      	str	r2, [r3, #4]

  /* Set the repetition counter */
  __HAL_LPTIM_REPETITIONCOUNTER_SET(hlptim, hlptim->Init.RepetitionCounter);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800377c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Wait for the completion of the write operation to the LPTIM_RCR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_REPOK) == HAL_TIMEOUT)
 800377e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 faa0 	bl	8003cc8 <LPTIM_WaitForFlag>
 8003788:	4603      	mov	r3, r0
 800378a:	2b03      	cmp	r3, #3
 800378c:	d101      	bne.n	8003792 <HAL_LPTIM_Init+0x72>
  {
    return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e0b7      	b.n	8003902 <HAL_LPTIM_Init+0x1e2>
  }


  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2210      	movs	r2, #16
 8003798:	605a      	str	r2, [r3, #4]

  /* Set LPTIM Period */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, hlptim->Init.Period);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6a12      	ldr	r2, [r2, #32]
 80037a2:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80037a4:	2110      	movs	r1, #16
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fa8e 	bl	8003cc8 <LPTIM_WaitForFlag>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b03      	cmp	r3, #3
 80037b0:	d101      	bne.n	80037b6 <HAL_LPTIM_Init+0x96>
  {
    return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e0a5      	b.n	8003902 <HAL_LPTIM_Init+0x1e2>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10e      	bne.n	80037e2 <HAL_LPTIM_Init+0xc2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d107      	bne.n	80037e2 <HAL_LPTIM_Init+0xc2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	691a      	ldr	r2, [r3, #16]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	611a      	str	r2, [r3, #16]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d004      	beq.n	80037fc <HAL_LPTIM_Init+0xdc>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037fa:	d103      	bne.n	8003804 <HAL_LPTIM_Init+0xe4>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f023 031e 	bic.w	r3, r3, #30
 8003802:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800380c:	4293      	cmp	r3, r2
 800380e:	d005      	beq.n	800381c <HAL_LPTIM_Init+0xfc>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003816:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800381a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	4b3b      	ldr	r3, [pc, #236]	; (800390c <HAL_LPTIM_Init+0x1ec>)
 8003820:	4013      	ands	r3, r2
 8003822:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800382c:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.Clock.Prescaler |
 8003832:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003838:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d107      	bne.n	8003858 <HAL_LPTIM_Init+0x138>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003850:	4313      	orrs	r3, r2
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d004      	beq.n	800386a <HAL_LPTIM_Init+0x14a>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003868:	d107      	bne.n	800387a <HAL_LPTIM_Init+0x15a>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003872:	4313      	orrs	r3, r2
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003882:	4293      	cmp	r3, r2
 8003884:	d00a      	beq.n	800389c <HAL_LPTIM_Init+0x17c>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800388e:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003894:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	4313      	orrs	r3, r2
 800389a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a19      	ldr	r2, [pc, #100]	; (8003910 <HAL_LPTIM_Init+0x1f0>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <HAL_LPTIM_Init+0x198>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a18      	ldr	r2, [pc, #96]	; (8003914 <HAL_LPTIM_Init+0x1f4>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d108      	bne.n	80038ca <HAL_LPTIM_Init+0x1aa>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	625a      	str	r2, [r3, #36]	; 0x24
 80038c8:	e00e      	b.n	80038e8 <HAL_LPTIM_Init+0x1c8>
  }
  else
  {
    if ((hlptim->Instance == LPTIM3) || (hlptim->Instance == LPTIM4))
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a12      	ldr	r2, [pc, #72]	; (8003918 <HAL_LPTIM_Init+0x1f8>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d004      	beq.n	80038de <HAL_LPTIM_Init+0x1be>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a10      	ldr	r2, [pc, #64]	; (800391c <HAL_LPTIM_Init+0x1fc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d104      	bne.n	80038e8 <HAL_LPTIM_Init+0x1c8>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Initialize the LPTIM channels state */
  LPTIM_CHANNEL_STATE_SET_ALL(hlptim, HAL_LPTIM_CHANNEL_STATE_READY);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a

  /* Return function status */
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	ff39f1fe 	.word	0xff39f1fe
 8003910:	46004400 	.word	0x46004400
 8003914:	40009400 	.word	0x40009400
 8003918:	46004800 	.word	0x46004800
 800391c:	46004c00 	.word	0x46004c00

08003920 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* Capture Compare 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d120      	bne.n	8003978 <HAL_LPTIM_IRQHandler+0x58>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	2b01      	cmp	r3, #1
 8003942:	d119      	bne.n	8003978 <HAL_LPTIM_IRQHandler+0x58>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2201      	movs	r2, #1
 800394a:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC1SEL) != 0x00U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_LPTIM_IRQHandler+0x4a>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f99c 	bl	8003ca0 <HAL_LPTIM_IC_CaptureCallback>
 8003968:	e002      	b.n	8003970 <HAL_LPTIM_IRQHandler+0x50>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f93e 	bl	8003bec <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Capture Compare 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2) != RESET)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003986:	d122      	bne.n	80039ce <HAL_LPTIM_IRQHandler+0xae>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003992:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003996:	d11a      	bne.n	80039ce <HAL_LPTIM_IRQHandler+0xae>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a0:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Input capture event */
      if ((hlptim->Instance->CCMR1 & LPTIM_CCMR1_CC2SEL) != 0x00U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_LPTIM_IRQHandler+0xa0>
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->IC_CaptureCallback(hlptim);
#else
        HAL_LPTIM_IC_CaptureCallback(hlptim);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 f971 	bl	8003ca0 <HAL_LPTIM_IC_CaptureCallback>
 80039be:	e002      	b.n	80039c6 <HAL_LPTIM_IRQHandler+0xa6>
      else
      {
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
        hlptim->CompareMatchCallback(hlptim);
#else
        HAL_LPTIM_CompareMatchCallback(hlptim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f913 	bl	8003bec <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      }
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 1 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC1O) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039dc:	d117      	bne.n	8003a0e <HAL_LPTIM_IRQHandler+0xee>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC1O) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ec:	d10f      	bne.n	8003a0e <HAL_LPTIM_IRQHandler+0xee>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC1O);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039f6:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f957 	bl	8003cb4 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Over Capture 2 interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a1c:	d117      	bne.n	8003a4e <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_FLAG_CC2O) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2c:	d10f      	bne.n	8003a4e <HAL_LPTIM_IRQHandler+0x12e>
    {
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CC2O);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a36:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* Over capture event */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->IC_OverCaptureCallback(hlptim);
#else
      HAL_LPTIM_IC_OverCaptureCallback(hlptim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f937 	bl	8003cb4 <HAL_LPTIM_IC_OverCaptureCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_CLEARED;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d10d      	bne.n	8003a78 <HAL_LPTIM_IRQHandler+0x158>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d106      	bne.n	8003a78 <HAL_LPTIM_IRQHandler+0x158>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f8c4 	bl	8003c00 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	2b04      	cmp	r3, #4
 8003a84:	d10d      	bne.n	8003aa2 <HAL_LPTIM_IRQHandler+0x182>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d106      	bne.n	8003aa2 <HAL_LPTIM_IRQHandler+0x182>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2204      	movs	r2, #4
 8003a9a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 f8b9 	bl	8003c14 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP1OK) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0308 	and.w	r3, r3, #8
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d111      	bne.n	8003ad4 <HAL_LPTIM_IRQHandler+0x1b4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP1OK) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d10a      	bne.n	8003ad4 <HAL_LPTIM_IRQHandler+0x1b4>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP1OK);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_1;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8aa 	bl	8003c28 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMP2OK) != RESET)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ade:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ae2:	d113      	bne.n	8003b0c <HAL_LPTIM_IRQHandler+0x1ec>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMP2OK) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003af2:	d10b      	bne.n	8003b0c <HAL_LPTIM_IRQHandler+0x1ec>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMP2OK);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003afc:	605a      	str	r2, [r3, #4]
      hlptim->Channel = HAL_LPTIM_ACTIVE_CHANNEL_2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2202      	movs	r2, #2
 8003b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 f88e 	bl	8003c28 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b10      	cmp	r3, #16
 8003b18:	d10d      	bne.n	8003b36 <HAL_LPTIM_IRQHandler+0x216>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d106      	bne.n	8003b36 <HAL_LPTIM_IRQHandler+0x216>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 f883 	bl	8003c3c <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0320 	and.w	r3, r3, #32
 8003b40:	2b20      	cmp	r3, #32
 8003b42:	d10d      	bne.n	8003b60 <HAL_LPTIM_IRQHandler+0x240>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b20      	cmp	r3, #32
 8003b50:	d106      	bne.n	8003b60 <HAL_LPTIM_IRQHandler+0x240>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2220      	movs	r2, #32
 8003b58:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f878 	bl	8003c50 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6a:	2b40      	cmp	r3, #64	; 0x40
 8003b6c:	d10d      	bne.n	8003b8a <HAL_LPTIM_IRQHandler+0x26a>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d106      	bne.n	8003b8a <HAL_LPTIM_IRQHandler+0x26a>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2240      	movs	r2, #64	; 0x40
 8003b82:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f86d 	bl	8003c64 <HAL_LPTIM_DirectionDownCallback>
    }
  }

  /* Repetition counter underflowed (or contains zero) and the LPTIM counter
     overflowed */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UPDATE) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b94:	2b80      	cmp	r3, #128	; 0x80
 8003b96:	d10d      	bne.n	8003bb4 <HAL_LPTIM_IRQHandler+0x294>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UPDATE) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b80      	cmp	r3, #128	; 0x80
 8003ba4:	d106      	bne.n	8003bb4 <HAL_LPTIM_IRQHandler+0x294>
    {
      /* Clear update event flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UPDATE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	605a      	str	r2, [r3, #4]

      /* Update event Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->UpdateEventCallback(hlptim);
#else
      HAL_LPTIM_UpdateEventCallback(hlptim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f862 	bl	8003c78 <HAL_LPTIM_UpdateEventCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Successful APB bus write to repetition counter register */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_REPOK) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc2:	d10f      	bne.n	8003be4 <HAL_LPTIM_IRQHandler+0x2c4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_REPOK) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bd2:	d107      	bne.n	8003be4 <HAL_LPTIM_IRQHandler+0x2c4>
    {
      /* Clear successful APB bus write to repetition counter flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_REPOK);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bdc:	605a      	str	r2, [r3, #4]

      /* Successful APB bus write to repetition counter Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->RepCounterWriteCallback(hlptim);
#else
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f854 	bl	8003c8c <HAL_LPTIM_RepCounterWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8003be4:	bf00      	nop
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr

08003c00 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_LPTIM_UpdateEventCallback>:
  * @brief Repetition counter underflowed (or contains zero) and LPTIM counter overflowed callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_UpdateEventCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_UpdateEventCallback could be implemented in the user file
   */
}
 8003c80:	bf00      	nop
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_LPTIM_RepCounterWriteCallback>:
  * @brief  Successful APB bus write to repetition counter register callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_RepCounterWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_RepCounterWriteCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <HAL_LPTIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_CaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_LPTIM_IC_OverCaptureCallback>:
  * @brief  Over Capture callback in non-blocking mode
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_IC_OverCaptureCallback(LPTIM_HandleTypeDef *hlptim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_IC_OverCaptureCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8003cd6:	4b12      	ldr	r3, [pc, #72]	; (8003d20 <LPTIM_WaitForFlag+0x58>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <LPTIM_WaitForFlag+0x5c>)
 8003cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce0:	0b9b      	lsrs	r3, r3, #14
 8003ce2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	4013      	ands	r3, r2
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d002      	beq.n	8003d12 <LPTIM_WaitForFlag+0x4a>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ec      	bne.n	8003cec <LPTIM_WaitForFlag+0x24>

  return result;
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	20000000 	.word	0x20000000
 8003d24:	d1b71759 	.word	0xd1b71759

08003d28 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003d30:	4b39      	ldr	r3, [pc, #228]	; (8003e18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d38:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d10b      	bne.n	8003d5a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d48:	d905      	bls.n	8003d56 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003d4a:	4b33      	ldr	r3, [pc, #204]	; (8003e18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	4a32      	ldr	r2, [pc, #200]	; (8003e18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d54:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	e057      	b.n	8003e0a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d60:	d90a      	bls.n	8003d78 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003d62:	4b2d      	ldr	r3, [pc, #180]	; (8003e18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	4a2a      	ldr	r2, [pc, #168]	; (8003e18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d74:	60d3      	str	r3, [r2, #12]
 8003d76:	e007      	b.n	8003d88 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003d78:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003d80:	4925      	ldr	r1, [pc, #148]	; (8003e18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003d88:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a24      	ldr	r2, [pc, #144]	; (8003e20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	2232      	movs	r2, #50	; 0x32
 8003d96:	fb02 f303 	mul.w	r3, r2, r3
 8003d9a:	4a21      	ldr	r2, [pc, #132]	; (8003e20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003da0:	099b      	lsrs	r3, r3, #6
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003da6:	e002      	b.n	8003dae <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003dae:	4b1a      	ldr	r3, [pc, #104]	; (8003e18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d102      	bne.n	8003dc0 <HAL_PWREx_ControlVoltageScaling+0x98>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f3      	bne.n	8003da8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d01b      	beq.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003dc6:	4b15      	ldr	r3, [pc, #84]	; (8003e1c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	099b      	lsrs	r3, r3, #6
 8003dd2:	2232      	movs	r2, #50	; 0x32
 8003dd4:	fb02 f303 	mul.w	r3, r2, r3
 8003dd8:	4a11      	ldr	r2, [pc, #68]	; (8003e20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	099b      	lsrs	r3, r3, #6
 8003de0:	3301      	adds	r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003de4:	e002      	b.n	8003dec <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003dec:	4b0a      	ldr	r3, [pc, #40]	; (8003e18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d102      	bne.n	8003dfe <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1f3      	bne.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e000      	b.n	8003e0a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	46020800 	.word	0x46020800
 8003e1c:	20000000 	.word	0x20000000
 8003e20:	10624dd3 	.word	0x10624dd3

08003e24 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e24:	b480      	push	{r7}
 8003e26:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003e28:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <HAL_PWREx_GetVoltageRange+0x18>)
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	46020800 	.word	0x46020800

08003e40 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003e48:	4b22      	ldr	r3, [pc, #136]	; (8003ed4 <HAL_PWREx_ConfigSupply+0x94>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a22      	ldr	r2, [pc, #136]	; (8003ed8 <HAL_PWREx_ConfigSupply+0x98>)
 8003e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e52:	099b      	lsrs	r3, r3, #6
 8003e54:	2232      	movs	r2, #50	; 0x32
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	4a1f      	ldr	r2, [pc, #124]	; (8003ed8 <HAL_PWREx_ConfigSupply+0x98>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	099b      	lsrs	r3, r3, #6
 8003e62:	3301      	adds	r3, #1
 8003e64:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d113      	bne.n	8003e94 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	; (8003edc <HAL_PWREx_ConfigSupply+0x9c>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	4a1a      	ldr	r2, [pc, #104]	; (8003edc <HAL_PWREx_ConfigSupply+0x9c>)
 8003e72:	f023 0302 	bic.w	r3, r3, #2
 8003e76:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003e78:	e002      	b.n	8003e80 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003e80:	4b16      	ldr	r3, [pc, #88]	; (8003edc <HAL_PWREx_ConfigSupply+0x9c>)
 8003e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d116      	bne.n	8003eba <HAL_PWREx_ConfigSupply+0x7a>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d1f3      	bne.n	8003e7a <HAL_PWREx_ConfigSupply+0x3a>
 8003e92:	e012      	b.n	8003eba <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003e94:	4b11      	ldr	r3, [pc, #68]	; (8003edc <HAL_PWREx_ConfigSupply+0x9c>)
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	4a10      	ldr	r2, [pc, #64]	; (8003edc <HAL_PWREx_ConfigSupply+0x9c>)
 8003e9a:	f043 0302 	orr.w	r3, r3, #2
 8003e9e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003ea0:	e002      	b.n	8003ea8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <HAL_PWREx_ConfigSupply+0x9c>)
 8003eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eac:	f003 0302 	and.w	r3, r3, #2
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d102      	bne.n	8003eba <HAL_PWREx_ConfigSupply+0x7a>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f3      	bne.n	8003ea2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e000      	b.n	8003ec6 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000000 	.word	0x20000000
 8003ed8:	10624dd3 	.word	0x10624dd3
 8003edc:	46020800 	.word	0x46020800

08003ee0 <HAL_PWREx_EnableVddA>:
  * @note   Remove VDDA electrical and logical isolation, once VDDA supply is
  *         present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddA(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_ASV);
 8003ee4:	4b05      	ldr	r3, [pc, #20]	; (8003efc <HAL_PWREx_EnableVddA+0x1c>)
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	4a04      	ldr	r2, [pc, #16]	; (8003efc <HAL_PWREx_EnableVddA+0x1c>)
 8003eea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003eee:	6113      	str	r3, [r2, #16]
}
 8003ef0:	bf00      	nop
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	46020800 	.word	0x46020800

08003f00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003f00:	b480      	push	{r7}
 8003f02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8003f04:	4b05      	ldr	r3, [pc, #20]	; (8003f1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	4a04      	ldr	r2, [pc, #16]	; (8003f1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8003f10:	bf00      	nop
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	46020800 	.word	0x46020800

08003f20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b08e      	sub	sp, #56	; 0x38
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	f000 bec8 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f3a:	4b99      	ldr	r3, [pc, #612]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f44:	4b96      	ldr	r3, [pc, #600]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8003f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 816c 	beq.w	8004234 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <HAL_RCC_OscConfig+0x52>
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	2b0c      	cmp	r3, #12
 8003f66:	f040 80de 	bne.w	8004126 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	f040 80da 	bne.w	8004126 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f000 bea5 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f84:	4b86      	ldr	r3, [pc, #536]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <HAL_RCC_OscConfig+0x7a>
 8003f90:	4b83      	ldr	r3, [pc, #524]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003f98:	e005      	b.n	8003fa6 <HAL_RCC_OscConfig+0x86>
 8003f9a:	4b81      	ldr	r3, [pc, #516]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8003f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003fa0:	041b      	lsls	r3, r3, #16
 8003fa2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d255      	bcs.n	8004056 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10a      	bne.n	8003fc6 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f001 f9df 	bl	8005378 <RCC_SetFlashLatencyFromMSIRange>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f000 be82 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8003fc6:	4b76      	ldr	r3, [pc, #472]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	4a75      	ldr	r2, [pc, #468]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8003fcc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003fd0:	6093      	str	r3, [r2, #8]
 8003fd2:	4b73      	ldr	r3, [pc, #460]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	4970      	ldr	r1, [pc, #448]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003fec:	d309      	bcc.n	8004002 <HAL_RCC_OscConfig+0xe2>
 8003fee:	4b6c      	ldr	r3, [pc, #432]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	f023 021f 	bic.w	r2, r3, #31
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	4969      	ldr	r1, [pc, #420]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60cb      	str	r3, [r1, #12]
 8004000:	e07e      	b.n	8004100 <HAL_RCC_OscConfig+0x1e0>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	2b00      	cmp	r3, #0
 8004008:	da0a      	bge.n	8004020 <HAL_RCC_OscConfig+0x100>
 800400a:	4b65      	ldr	r3, [pc, #404]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	015b      	lsls	r3, r3, #5
 8004018:	4961      	ldr	r1, [pc, #388]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 800401a:	4313      	orrs	r3, r2
 800401c:	60cb      	str	r3, [r1, #12]
 800401e:	e06f      	b.n	8004100 <HAL_RCC_OscConfig+0x1e0>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004028:	d30a      	bcc.n	8004040 <HAL_RCC_OscConfig+0x120>
 800402a:	4b5d      	ldr	r3, [pc, #372]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	029b      	lsls	r3, r3, #10
 8004038:	4959      	ldr	r1, [pc, #356]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 800403a:	4313      	orrs	r3, r2
 800403c:	60cb      	str	r3, [r1, #12]
 800403e:	e05f      	b.n	8004100 <HAL_RCC_OscConfig+0x1e0>
 8004040:	4b57      	ldr	r3, [pc, #348]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	03db      	lsls	r3, r3, #15
 800404e:	4954      	ldr	r1, [pc, #336]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004050:	4313      	orrs	r3, r2
 8004052:	60cb      	str	r3, [r1, #12]
 8004054:	e054      	b.n	8004100 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004056:	4b52      	ldr	r3, [pc, #328]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	4a51      	ldr	r2, [pc, #324]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 800405c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004060:	6093      	str	r3, [r2, #8]
 8004062:	4b4f      	ldr	r3, [pc, #316]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	494c      	ldr	r1, [pc, #304]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004070:	4313      	orrs	r3, r2
 8004072:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800407c:	d309      	bcc.n	8004092 <HAL_RCC_OscConfig+0x172>
 800407e:	4b48      	ldr	r3, [pc, #288]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f023 021f 	bic.w	r2, r3, #31
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	4945      	ldr	r1, [pc, #276]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 800408c:	4313      	orrs	r3, r2
 800408e:	60cb      	str	r3, [r1, #12]
 8004090:	e028      	b.n	80040e4 <HAL_RCC_OscConfig+0x1c4>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	2b00      	cmp	r3, #0
 8004098:	da0a      	bge.n	80040b0 <HAL_RCC_OscConfig+0x190>
 800409a:	4b41      	ldr	r3, [pc, #260]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	015b      	lsls	r3, r3, #5
 80040a8:	493d      	ldr	r1, [pc, #244]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60cb      	str	r3, [r1, #12]
 80040ae:	e019      	b.n	80040e4 <HAL_RCC_OscConfig+0x1c4>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b8:	d30a      	bcc.n	80040d0 <HAL_RCC_OscConfig+0x1b0>
 80040ba:	4b39      	ldr	r3, [pc, #228]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	029b      	lsls	r3, r3, #10
 80040c8:	4935      	ldr	r1, [pc, #212]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60cb      	str	r3, [r1, #12]
 80040ce:	e009      	b.n	80040e4 <HAL_RCC_OscConfig+0x1c4>
 80040d0:	4b33      	ldr	r3, [pc, #204]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	03db      	lsls	r3, r3, #15
 80040de:	4930      	ldr	r1, [pc, #192]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80040e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 f942 	bl	8005378 <RCC_SetFlashLatencyFromMSIRange>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	f000 bde5 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004100:	f001 f8e4 	bl	80052cc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004104:	4b27      	ldr	r3, [pc, #156]	; (80041a4 <HAL_RCC_OscConfig+0x284>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7fd fa99 	bl	8001640 <HAL_InitTick>
 800410e:	4603      	mov	r3, r0
 8004110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 808a 	beq.w	8004232 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800411e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004122:	f000 bdd2 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d066      	beq.n	80041fc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800412e:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1b      	ldr	r2, [pc, #108]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800413a:	f7fd facb 	bl	80016d4 <HAL_GetTick>
 800413e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004140:	e009      	b.n	8004156 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004142:	f7fd fac7 	bl	80016d4 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d902      	bls.n	8004156 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	f000 bdba 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ef      	beq.n	8004142 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	4a0e      	ldr	r2, [pc, #56]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004168:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800416c:	6093      	str	r3, [r2, #8]
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	4909      	ldr	r1, [pc, #36]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 800417c:	4313      	orrs	r3, r2
 800417e:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004184:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004188:	d30e      	bcc.n	80041a8 <HAL_RCC_OscConfig+0x288>
 800418a:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f023 021f 	bic.w	r2, r3, #31
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a1b      	ldr	r3, [r3, #32]
 8004196:	4902      	ldr	r1, [pc, #8]	; (80041a0 <HAL_RCC_OscConfig+0x280>)
 8004198:	4313      	orrs	r3, r2
 800419a:	60cb      	str	r3, [r1, #12]
 800419c:	e04a      	b.n	8004234 <HAL_RCC_OscConfig+0x314>
 800419e:	bf00      	nop
 80041a0:	46020c00 	.word	0x46020c00
 80041a4:	20000004 	.word	0x20000004
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	da0a      	bge.n	80041c6 <HAL_RCC_OscConfig+0x2a6>
 80041b0:	4b98      	ldr	r3, [pc, #608]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	015b      	lsls	r3, r3, #5
 80041be:	4995      	ldr	r1, [pc, #596]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60cb      	str	r3, [r1, #12]
 80041c4:	e036      	b.n	8004234 <HAL_RCC_OscConfig+0x314>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ce:	d30a      	bcc.n	80041e6 <HAL_RCC_OscConfig+0x2c6>
 80041d0:	4b90      	ldr	r3, [pc, #576]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	029b      	lsls	r3, r3, #10
 80041de:	498d      	ldr	r1, [pc, #564]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60cb      	str	r3, [r1, #12]
 80041e4:	e026      	b.n	8004234 <HAL_RCC_OscConfig+0x314>
 80041e6:	4b8b      	ldr	r3, [pc, #556]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	03db      	lsls	r3, r3, #15
 80041f4:	4987      	ldr	r1, [pc, #540]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60cb      	str	r3, [r1, #12]
 80041fa:	e01b      	b.n	8004234 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80041fc:	4b85      	ldr	r3, [pc, #532]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a84      	ldr	r2, [pc, #528]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004208:	f7fd fa64 	bl	80016d4 <HAL_GetTick>
 800420c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800420e:	e009      	b.n	8004224 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004210:	f7fd fa60 	bl	80016d4 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d902      	bls.n	8004224 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	f000 bd53 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004224:	4b7b      	ldr	r3, [pc, #492]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0304 	and.w	r3, r3, #4
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1ef      	bne.n	8004210 <HAL_RCC_OscConfig+0x2f0>
 8004230:	e000      	b.n	8004234 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004232:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 808b 	beq.w	8004358 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	2b08      	cmp	r3, #8
 8004246:	d005      	beq.n	8004254 <HAL_RCC_OscConfig+0x334>
 8004248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424a:	2b0c      	cmp	r3, #12
 800424c:	d109      	bne.n	8004262 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800424e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004250:	2b03      	cmp	r3, #3
 8004252:	d106      	bne.n	8004262 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d17d      	bne.n	8004358 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f000 bd34 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426a:	d106      	bne.n	800427a <HAL_RCC_OscConfig+0x35a>
 800426c:	4b69      	ldr	r3, [pc, #420]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a68      	ldr	r2, [pc, #416]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 8004272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e041      	b.n	80042fe <HAL_RCC_OscConfig+0x3de>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004282:	d112      	bne.n	80042aa <HAL_RCC_OscConfig+0x38a>
 8004284:	4b63      	ldr	r3, [pc, #396]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a62      	ldr	r2, [pc, #392]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 800428a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	4b60      	ldr	r3, [pc, #384]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a5f      	ldr	r2, [pc, #380]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 8004296:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800429a:	6013      	str	r3, [r2, #0]
 800429c:	4b5d      	ldr	r3, [pc, #372]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a5c      	ldr	r2, [pc, #368]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	e029      	b.n	80042fe <HAL_RCC_OscConfig+0x3de>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80042b2:	d112      	bne.n	80042da <HAL_RCC_OscConfig+0x3ba>
 80042b4:	4b57      	ldr	r3, [pc, #348]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a56      	ldr	r2, [pc, #344]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	4b54      	ldr	r3, [pc, #336]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a53      	ldr	r2, [pc, #332]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ca:	6013      	str	r3, [r2, #0]
 80042cc:	4b51      	ldr	r3, [pc, #324]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a50      	ldr	r2, [pc, #320]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d6:	6013      	str	r3, [r2, #0]
 80042d8:	e011      	b.n	80042fe <HAL_RCC_OscConfig+0x3de>
 80042da:	4b4e      	ldr	r3, [pc, #312]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a4d      	ldr	r2, [pc, #308]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b4b      	ldr	r3, [pc, #300]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a4a      	ldr	r2, [pc, #296]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b48      	ldr	r3, [pc, #288]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a47      	ldr	r2, [pc, #284]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80042f8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80042fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d014      	beq.n	8004330 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8004306:	f7fd f9e5 	bl	80016d4 <HAL_GetTick>
 800430a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800430c:	e009      	b.n	8004322 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800430e:	f7fd f9e1 	bl	80016d4 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b64      	cmp	r3, #100	; 0x64
 800431a:	d902      	bls.n	8004322 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	f000 bcd4 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004322:	4b3c      	ldr	r3, [pc, #240]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0ef      	beq.n	800430e <HAL_RCC_OscConfig+0x3ee>
 800432e:	e013      	b.n	8004358 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004330:	f7fd f9d0 	bl	80016d4 <HAL_GetTick>
 8004334:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004336:	e009      	b.n	800434c <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004338:	f7fd f9cc 	bl	80016d4 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d902      	bls.n	800434c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	f000 bcbf 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800434c:	4b31      	ldr	r3, [pc, #196]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ef      	bne.n	8004338 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d05f      	beq.n	8004424 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004366:	2b04      	cmp	r3, #4
 8004368:	d005      	beq.n	8004376 <HAL_RCC_OscConfig+0x456>
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	2b0c      	cmp	r3, #12
 800436e:	d114      	bne.n	800439a <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004372:	2b02      	cmp	r3, #2
 8004374:	d111      	bne.n	800439a <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	f000 bca3 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004384:	4b23      	ldr	r3, [pc, #140]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	041b      	lsls	r3, r3, #16
 8004392:	4920      	ldr	r1, [pc, #128]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 8004394:	4313      	orrs	r3, r2
 8004396:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8004398:	e044      	b.n	8004424 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d024      	beq.n	80043ec <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80043a2:	4b1c      	ldr	r3, [pc, #112]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1b      	ldr	r2, [pc, #108]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043ae:	f7fd f991 	bl	80016d4 <HAL_GetTick>
 80043b2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043b4:	e009      	b.n	80043ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b6:	f7fd f98d 	bl	80016d4 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d902      	bls.n	80043ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	f000 bc80 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ca:	4b12      	ldr	r3, [pc, #72]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0ef      	beq.n	80043b6 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80043d6:	4b0f      	ldr	r3, [pc, #60]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	490b      	ldr	r1, [pc, #44]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	610b      	str	r3, [r1, #16]
 80043ea:	e01b      	b.n	8004424 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80043ec:	4b09      	ldr	r3, [pc, #36]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a08      	ldr	r2, [pc, #32]	; (8004414 <HAL_RCC_OscConfig+0x4f4>)
 80043f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043f6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043f8:	f7fd f96c 	bl	80016d4 <HAL_GetTick>
 80043fc:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004400:	f7fd f968 	bl	80016d4 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d904      	bls.n	8004418 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	f000 bc5b 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
 8004414:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004418:	4baf      	ldr	r3, [pc, #700]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1ed      	bne.n	8004400 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0308 	and.w	r3, r3, #8
 800442c:	2b00      	cmp	r3, #0
 800442e:	f000 80c8 	beq.w	80045c2 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004432:	2300      	movs	r3, #0
 8004434:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004438:	4ba7      	ldr	r3, [pc, #668]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 800443a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d111      	bne.n	800446a <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004446:	4ba4      	ldr	r3, [pc, #656]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004448:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800444c:	4aa2      	ldr	r2, [pc, #648]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 800444e:	f043 0304 	orr.w	r3, r3, #4
 8004452:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004456:	4ba0      	ldr	r3, [pc, #640]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004458:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800445c:	f003 0304 	and.w	r3, r3, #4
 8004460:	617b      	str	r3, [r7, #20]
 8004462:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004464:	2301      	movs	r3, #1
 8004466:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800446a:	4b9c      	ldr	r3, [pc, #624]	; (80046dc <HAL_RCC_OscConfig+0x7bc>)
 800446c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446e:	f003 0301 	and.w	r3, r3, #1
 8004472:	2b00      	cmp	r3, #0
 8004474:	d119      	bne.n	80044aa <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004476:	4b99      	ldr	r3, [pc, #612]	; (80046dc <HAL_RCC_OscConfig+0x7bc>)
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	4a98      	ldr	r2, [pc, #608]	; (80046dc <HAL_RCC_OscConfig+0x7bc>)
 800447c:	f043 0301 	orr.w	r3, r3, #1
 8004480:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004482:	f7fd f927 	bl	80016d4 <HAL_GetTick>
 8004486:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004488:	e009      	b.n	800449e <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800448a:	f7fd f923 	bl	80016d4 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d902      	bls.n	800449e <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	f000 bc16 	b.w	8004cca <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800449e:	4b8f      	ldr	r3, [pc, #572]	; (80046dc <HAL_RCC_OscConfig+0x7bc>)
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0ef      	beq.n	800448a <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d05f      	beq.n	8004572 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80044b2:	4b89      	ldr	r3, [pc, #548]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 80044b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044b8:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	6a3b      	ldr	r3, [r7, #32]
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d037      	beq.n	8004538 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d006      	beq.n	80044e0 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e3f4      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d01b      	beq.n	8004522 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80044ea:	4b7b      	ldr	r3, [pc, #492]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 80044ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80044f0:	4a79      	ldr	r2, [pc, #484]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 80044f2:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80044f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80044fa:	f7fd f8eb 	bl	80016d4 <HAL_GetTick>
 80044fe:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004502:	f7fd f8e7 	bl	80016d4 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b05      	cmp	r3, #5
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e3da      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004514:	4b70      	ldr	r3, [pc, #448]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800451a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ef      	bne.n	8004502 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004522:	4b6d      	ldr	r3, [pc, #436]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004528:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	4969      	ldr	r1, [pc, #420]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004532:	4313      	orrs	r3, r2
 8004534:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004538:	4b67      	ldr	r3, [pc, #412]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 800453a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800453e:	4a66      	ldr	r2, [pc, #408]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004540:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004544:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004548:	f7fd f8c4 	bl	80016d4 <HAL_GetTick>
 800454c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004550:	f7fd f8c0 	bl	80016d4 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b05      	cmp	r3, #5
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e3b3      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004562:	4b5d      	ldr	r3, [pc, #372]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004564:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0ef      	beq.n	8004550 <HAL_RCC_OscConfig+0x630>
 8004570:	e01b      	b.n	80045aa <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004572:	4b59      	ldr	r3, [pc, #356]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004574:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004578:	4a57      	ldr	r2, [pc, #348]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 800457a:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800457e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004582:	f7fd f8a7 	bl	80016d4 <HAL_GetTick>
 8004586:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004588:	e008      	b.n	800459c <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800458a:	f7fd f8a3 	bl	80016d4 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b05      	cmp	r3, #5
 8004596:	d901      	bls.n	800459c <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	e396      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800459c:	4b4e      	ldr	r3, [pc, #312]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 800459e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80045a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1ef      	bne.n	800458a <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045aa:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d107      	bne.n	80045c2 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045b2:	4b49      	ldr	r3, [pc, #292]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 80045b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045b8:	4a47      	ldr	r2, [pc, #284]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 80045ba:	f023 0304 	bic.w	r3, r3, #4
 80045be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0304 	and.w	r3, r3, #4
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 8111 	beq.w	80047f2 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80045d0:	2300      	movs	r3, #0
 80045d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d6:	4b40      	ldr	r3, [pc, #256]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 80045d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d111      	bne.n	8004608 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045e4:	4b3c      	ldr	r3, [pc, #240]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 80045e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045ea:	4a3b      	ldr	r2, [pc, #236]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 80045ec:	f043 0304 	orr.w	r3, r3, #4
 80045f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80045f4:	4b38      	ldr	r3, [pc, #224]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 80045f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004602:	2301      	movs	r3, #1
 8004604:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004608:	4b34      	ldr	r3, [pc, #208]	; (80046dc <HAL_RCC_OscConfig+0x7bc>)
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d118      	bne.n	8004646 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004614:	4b31      	ldr	r3, [pc, #196]	; (80046dc <HAL_RCC_OscConfig+0x7bc>)
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	4a30      	ldr	r2, [pc, #192]	; (80046dc <HAL_RCC_OscConfig+0x7bc>)
 800461a:	f043 0301 	orr.w	r3, r3, #1
 800461e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004620:	f7fd f858 	bl	80016d4 <HAL_GetTick>
 8004624:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004628:	f7fd f854 	bl	80016d4 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e347      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800463a:	4b28      	ldr	r3, [pc, #160]	; (80046dc <HAL_RCC_OscConfig+0x7bc>)
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	f003 0301 	and.w	r3, r3, #1
 8004642:	2b00      	cmp	r3, #0
 8004644:	d0f0      	beq.n	8004628 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d01f      	beq.n	8004692 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d010      	beq.n	8004680 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800465e:	4b1e      	ldr	r3, [pc, #120]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004660:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004664:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004666:	f043 0304 	orr.w	r3, r3, #4
 800466a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800466e:	4b1a      	ldr	r3, [pc, #104]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004670:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004674:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004676:	f043 0301 	orr.w	r3, r3, #1
 800467a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800467e:	e018      	b.n	80046b2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004680:	4b15      	ldr	r3, [pc, #84]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004682:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004686:	4a14      	ldr	r2, [pc, #80]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004688:	f043 0301 	orr.w	r3, r3, #1
 800468c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004690:	e00f      	b.n	80046b2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004692:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 8004694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004698:	4a0f      	ldr	r2, [pc, #60]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80046a2:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 80046a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046a8:	4a0b      	ldr	r2, [pc, #44]	; (80046d8 <HAL_RCC_OscConfig+0x7b8>)
 80046aa:	f023 0304 	bic.w	r3, r3, #4
 80046ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d057      	beq.n	800476a <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80046ba:	f7fd f80b 	bl	80016d4 <HAL_GetTick>
 80046be:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c0:	e00e      	b.n	80046e0 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046c2:	f7fd f807 	bl	80016d4 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d905      	bls.n	80046e0 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e2f8      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
 80046d8:	46020c00 	.word	0x46020c00
 80046dc:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e0:	4b9c      	ldr	r3, [pc, #624]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 80046e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0e9      	beq.n	80046c2 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d01b      	beq.n	8004732 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80046fa:	4b96      	ldr	r3, [pc, #600]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 80046fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004700:	4a94      	ldr	r2, [pc, #592]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004706:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800470a:	e00a      	b.n	8004722 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800470c:	f7fc ffe2 	bl	80016d4 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	f241 3288 	movw	r2, #5000	; 0x1388
 800471a:	4293      	cmp	r3, r2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e2d3      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004722:	4b8c      	ldr	r3, [pc, #560]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0ed      	beq.n	800470c <HAL_RCC_OscConfig+0x7ec>
 8004730:	e053      	b.n	80047da <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004732:	4b88      	ldr	r3, [pc, #544]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004738:	4a86      	ldr	r2, [pc, #536]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 800473a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800473e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fc ffc6 	bl	80016d4 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e2b7      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800475a:	4b7e      	ldr	r3, [pc, #504]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 800475c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004760:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1ed      	bne.n	8004744 <HAL_RCC_OscConfig+0x824>
 8004768:	e037      	b.n	80047da <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800476a:	f7fc ffb3 	bl	80016d4 <HAL_GetTick>
 800476e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004770:	e00a      	b.n	8004788 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fc ffaf 	bl	80016d4 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e2a0      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004788:	4b72      	ldr	r3, [pc, #456]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 800478a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1ed      	bne.n	8004772 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004796:	4b6f      	ldr	r3, [pc, #444]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800479c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d01a      	beq.n	80047da <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80047a4:	4b6b      	ldr	r3, [pc, #428]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 80047a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047aa:	4a6a      	ldr	r2, [pc, #424]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 80047ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047b4:	e00a      	b.n	80047cc <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047b6:	f7fc ff8d 	bl	80016d4 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e27e      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80047cc:	4b61      	ldr	r3, [pc, #388]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 80047ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1ed      	bne.n	80047b6 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d107      	bne.n	80047f2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e2:	4b5c      	ldr	r3, [pc, #368]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 80047e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e8:	4a5a      	ldr	r2, [pc, #360]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 80047ea:	f023 0304 	bic.w	r3, r3, #4
 80047ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d036      	beq.n	800486c <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	2b00      	cmp	r3, #0
 8004804:	d019      	beq.n	800483a <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004806:	4b53      	ldr	r3, [pc, #332]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a52      	ldr	r2, [pc, #328]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 800480c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004810:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004812:	f7fc ff5f 	bl	80016d4 <HAL_GetTick>
 8004816:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800481a:	f7fc ff5b 	bl	80016d4 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e24e      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800482c:	4b49      	ldr	r3, [pc, #292]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x8fa>
 8004838:	e018      	b.n	800486c <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800483a:	4b46      	ldr	r3, [pc, #280]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a45      	ldr	r2, [pc, #276]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004840:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004844:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004846:	f7fc ff45 	bl	80016d4 <HAL_GetTick>
 800484a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800484c:	e008      	b.n	8004860 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800484e:	f7fc ff41 	bl	80016d4 <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d901      	bls.n	8004860 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e234      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004860:	4b3c      	ldr	r3, [pc, #240]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d1f0      	bne.n	800484e <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	2b00      	cmp	r3, #0
 8004876:	d036      	beq.n	80048e6 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	2b00      	cmp	r3, #0
 800487e:	d019      	beq.n	80048b4 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004880:	4b34      	ldr	r3, [pc, #208]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a33      	ldr	r2, [pc, #204]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800488a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800488c:	f7fc ff22 	bl	80016d4 <HAL_GetTick>
 8004890:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004894:	f7fc ff1e 	bl	80016d4 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e211      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80048a6:	4b2b      	ldr	r3, [pc, #172]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x974>
 80048b2:	e018      	b.n	80048e6 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80048b4:	4b27      	ldr	r3, [pc, #156]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a26      	ldr	r2, [pc, #152]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 80048ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048be:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80048c0:	f7fc ff08 	bl	80016d4 <HAL_GetTick>
 80048c4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80048c8:	f7fc ff04 	bl	80016d4 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e1f7      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 80048da:	4b1e      	ldr	r3, [pc, #120]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d07f      	beq.n	80049f2 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d062      	beq.n	80049c0 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80048fa:	4b16      	ldr	r3, [pc, #88]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	4a15      	ldr	r2, [pc, #84]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004900:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004904:	6093      	str	r3, [r2, #8]
 8004906:	4b13      	ldr	r3, [pc, #76]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004912:	4910      	ldr	r1, [pc, #64]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004914:	4313      	orrs	r3, r2
 8004916:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004920:	d309      	bcc.n	8004936 <HAL_RCC_OscConfig+0xa16>
 8004922:	4b0c      	ldr	r3, [pc, #48]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f023 021f 	bic.w	r2, r3, #31
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	4909      	ldr	r1, [pc, #36]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004930:	4313      	orrs	r3, r2
 8004932:	60cb      	str	r3, [r1, #12]
 8004934:	e02a      	b.n	800498c <HAL_RCC_OscConfig+0xa6c>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	da0c      	bge.n	8004958 <HAL_RCC_OscConfig+0xa38>
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	015b      	lsls	r3, r3, #5
 800494c:	4901      	ldr	r1, [pc, #4]	; (8004954 <HAL_RCC_OscConfig+0xa34>)
 800494e:	4313      	orrs	r3, r2
 8004950:	60cb      	str	r3, [r1, #12]
 8004952:	e01b      	b.n	800498c <HAL_RCC_OscConfig+0xa6c>
 8004954:	46020c00 	.word	0x46020c00
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004960:	d30a      	bcc.n	8004978 <HAL_RCC_OscConfig+0xa58>
 8004962:	4ba1      	ldr	r3, [pc, #644]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	029b      	lsls	r3, r3, #10
 8004970:	499d      	ldr	r1, [pc, #628]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004972:	4313      	orrs	r3, r2
 8004974:	60cb      	str	r3, [r1, #12]
 8004976:	e009      	b.n	800498c <HAL_RCC_OscConfig+0xa6c>
 8004978:	4b9b      	ldr	r3, [pc, #620]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a1b      	ldr	r3, [r3, #32]
 8004984:	03db      	lsls	r3, r3, #15
 8004986:	4998      	ldr	r1, [pc, #608]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004988:	4313      	orrs	r3, r2
 800498a:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 800498c:	4b96      	ldr	r3, [pc, #600]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a95      	ldr	r2, [pc, #596]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004992:	f043 0310 	orr.w	r3, r3, #16
 8004996:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004998:	f7fc fe9c 	bl	80016d4 <HAL_GetTick>
 800499c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800499e:	e008      	b.n	80049b2 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80049a0:	f7fc fe98 	bl	80016d4 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d901      	bls.n	80049b2 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80049ae:	2303      	movs	r3, #3
 80049b0:	e18b      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80049b2:	4b8d      	ldr	r3, [pc, #564]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0320 	and.w	r3, r3, #32
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0f0      	beq.n	80049a0 <HAL_RCC_OscConfig+0xa80>
 80049be:	e018      	b.n	80049f2 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80049c0:	4b89      	ldr	r3, [pc, #548]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a88      	ldr	r2, [pc, #544]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 80049c6:	f023 0310 	bic.w	r3, r3, #16
 80049ca:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049cc:	f7fc fe82 	bl	80016d4 <HAL_GetTick>
 80049d0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80049d4:	f7fc fe7e 	bl	80016d4 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e171      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80049e6:	4b80      	ldr	r3, [pc, #512]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0320 	and.w	r3, r3, #32
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d1f0      	bne.n	80049d4 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	f000 8166 	beq.w	8004cc8 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a02:	4b79      	ldr	r3, [pc, #484]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	f003 030c 	and.w	r3, r3, #12
 8004a0a:	2b0c      	cmp	r3, #12
 8004a0c:	f000 80f2 	beq.w	8004bf4 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	f040 80c5 	bne.w	8004ba4 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004a1a:	4b73      	ldr	r3, [pc, #460]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a72      	ldr	r2, [pc, #456]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004a20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a24:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004a26:	f7fc fe55 	bl	80016d4 <HAL_GetTick>
 8004a2a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a2e:	f7fc fe51 	bl	80016d4 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e144      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004a40:	4b69      	ldr	r3, [pc, #420]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d1f0      	bne.n	8004a2e <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a4c:	4b66      	ldr	r3, [pc, #408]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d111      	bne.n	8004a7e <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004a5a:	4b63      	ldr	r3, [pc, #396]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a60:	4a61      	ldr	r2, [pc, #388]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004a62:	f043 0304 	orr.w	r3, r3, #4
 8004a66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004a6a:	4b5f      	ldr	r3, [pc, #380]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	60fb      	str	r3, [r7, #12]
 8004a76:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004a7e:	4b5b      	ldr	r3, [pc, #364]	; (8004bec <HAL_RCC_OscConfig+0xccc>)
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004a8a:	d102      	bne.n	8004a92 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004a92:	4b56      	ldr	r3, [pc, #344]	; (8004bec <HAL_RCC_OscConfig+0xccc>)
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	4a55      	ldr	r2, [pc, #340]	; (8004bec <HAL_RCC_OscConfig+0xccc>)
 8004a98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a9c:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004a9e:	4b52      	ldr	r3, [pc, #328]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aa6:	f023 0303 	bic.w	r3, r3, #3
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ab2:	3a01      	subs	r2, #1
 8004ab4:	0212      	lsls	r2, r2, #8
 8004ab6:	4311      	orrs	r1, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004abc:	430a      	orrs	r2, r1
 8004abe:	494a      	ldr	r1, [pc, #296]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	628b      	str	r3, [r1, #40]	; 0x28
 8004ac4:	4b48      	ldr	r3, [pc, #288]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac8:	4b49      	ldr	r3, [pc, #292]	; (8004bf0 <HAL_RCC_OscConfig+0xcd0>)
 8004aca:	4013      	ands	r3, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004ad0:	3a01      	subs	r2, #1
 8004ad2:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004ada:	3a01      	subs	r2, #1
 8004adc:	0252      	lsls	r2, r2, #9
 8004ade:	b292      	uxth	r2, r2
 8004ae0:	4311      	orrs	r1, r2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004ae6:	3a01      	subs	r2, #1
 8004ae8:	0412      	lsls	r2, r2, #16
 8004aea:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004aee:	4311      	orrs	r1, r2
 8004af0:	687a      	ldr	r2, [r7, #4]
 8004af2:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004af4:	3a01      	subs	r2, #1
 8004af6:	0612      	lsls	r2, r2, #24
 8004af8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004afc:	430a      	orrs	r2, r1
 8004afe:	493a      	ldr	r1, [pc, #232]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004b04:	4b38      	ldr	r3, [pc, #224]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	4a37      	ldr	r2, [pc, #220]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b0a:	f023 0310 	bic.w	r3, r3, #16
 8004b0e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b14:	4a34      	ldr	r2, [pc, #208]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004b1a:	4b33      	ldr	r3, [pc, #204]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	4a32      	ldr	r2, [pc, #200]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b20:	f043 0310 	orr.w	r3, r3, #16
 8004b24:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004b26:	4b30      	ldr	r3, [pc, #192]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	f023 020c 	bic.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b32:	492d      	ldr	r1, [pc, #180]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8004b38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d105      	bne.n	8004b4c <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004b40:	4b2a      	ldr	r3, [pc, #168]	; (8004bec <HAL_RCC_OscConfig+0xccc>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	4a29      	ldr	r2, [pc, #164]	; (8004bec <HAL_RCC_OscConfig+0xccc>)
 8004b46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4a:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004b4c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d107      	bne.n	8004b64 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004b54:	4b24      	ldr	r3, [pc, #144]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b5a:	4a23      	ldr	r2, [pc, #140]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b5c:	f023 0304 	bic.w	r3, r3, #4
 8004b60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b64:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	4a1f      	ldr	r2, [pc, #124]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b6e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004b70:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b7a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b7c:	f7fc fdaa 	bl	80016d4 <HAL_GetTick>
 8004b80:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b84:	f7fc fda6 	bl	80016d4 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b02      	cmp	r3, #2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e099      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0xc64>
 8004ba2:	e091      	b.n	8004cc8 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004ba4:	4b10      	ldr	r3, [pc, #64]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a0f      	ldr	r2, [pc, #60]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bae:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004bb0:	f7fc fd90 	bl	80016d4 <HAL_GetTick>
 8004bb4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb8:	f7fc fd8c 	bl	80016d4 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e07f      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bca:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f0      	bne.n	8004bb8 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004bd6:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bda:	4a03      	ldr	r2, [pc, #12]	; (8004be8 <HAL_RCC_OscConfig+0xcc8>)
 8004bdc:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004be0:	f023 0303 	bic.w	r3, r3, #3
 8004be4:	6293      	str	r3, [r2, #40]	; 0x28
 8004be6:	e06f      	b.n	8004cc8 <HAL_RCC_OscConfig+0xda8>
 8004be8:	46020c00 	.word	0x46020c00
 8004bec:	46020800 	.word	0x46020800
 8004bf0:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004bf4:	4b37      	ldr	r3, [pc, #220]	; (8004cd4 <HAL_RCC_OscConfig+0xdb4>)
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf8:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004bfa:	4b36      	ldr	r3, [pc, #216]	; (8004cd4 <HAL_RCC_OscConfig+0xdb4>)
 8004bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bfe:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d039      	beq.n	8004c7c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	f003 0203 	and.w	r2, r3, #3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d132      	bne.n	8004c7c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	0a1b      	lsrs	r3, r3, #8
 8004c1a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d129      	bne.n	8004c7c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d122      	bne.n	8004c7c <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c40:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d11a      	bne.n	8004c7c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	0a5b      	lsrs	r3, r3, #9
 8004c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d111      	bne.n	8004c7c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	0c1b      	lsrs	r3, r3, #16
 8004c5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c64:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d108      	bne.n	8004c7c <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	0e1b      	lsrs	r3, r3, #24
 8004c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c76:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d001      	beq.n	8004c80 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e024      	b.n	8004cca <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004c80:	4b14      	ldr	r3, [pc, #80]	; (8004cd4 <HAL_RCC_OscConfig+0xdb4>)
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	08db      	lsrs	r3, r3, #3
 8004c86:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d01a      	beq.n	8004cc8 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8004c92:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <HAL_RCC_OscConfig+0xdb4>)
 8004c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c96:	4a0f      	ldr	r2, [pc, #60]	; (8004cd4 <HAL_RCC_OscConfig+0xdb4>)
 8004c98:	f023 0310 	bic.w	r3, r3, #16
 8004c9c:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9e:	f7fc fd19 	bl	80016d4 <HAL_GetTick>
 8004ca2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8004ca4:	bf00      	nop
 8004ca6:	f7fc fd15 	bl	80016d4 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d0f9      	beq.n	8004ca6 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cb6:	4a07      	ldr	r2, [pc, #28]	; (8004cd4 <HAL_RCC_OscConfig+0xdb4>)
 8004cb8:	00db      	lsls	r3, r3, #3
 8004cba:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8004cbc:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <HAL_RCC_OscConfig+0xdb4>)
 8004cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc0:	4a04      	ldr	r2, [pc, #16]	; (8004cd4 <HAL_RCC_OscConfig+0xdb4>)
 8004cc2:	f043 0310 	orr.w	r3, r3, #16
 8004cc6:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3738      	adds	r7, #56	; 0x38
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	46020c00 	.word	0x46020c00

08004cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b086      	sub	sp, #24
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e1d9      	b.n	80050a0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cec:	4b9b      	ldr	r3, [pc, #620]	; (8004f5c <HAL_RCC_ClockConfig+0x284>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 030f 	and.w	r3, r3, #15
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d910      	bls.n	8004d1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cfa:	4b98      	ldr	r3, [pc, #608]	; (8004f5c <HAL_RCC_ClockConfig+0x284>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f023 020f 	bic.w	r2, r3, #15
 8004d02:	4996      	ldr	r1, [pc, #600]	; (8004f5c <HAL_RCC_ClockConfig+0x284>)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0a:	4b94      	ldr	r3, [pc, #592]	; (8004f5c <HAL_RCC_ClockConfig+0x284>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e1c1      	b.n	80050a0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0310 	and.w	r3, r3, #16
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d010      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	695a      	ldr	r2, [r3, #20]
 8004d2c:	4b8c      	ldr	r3, [pc, #560]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d908      	bls.n	8004d4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004d38:	4b89      	ldr	r3, [pc, #548]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	4986      	ldr	r1, [pc, #536]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0308 	and.w	r3, r3, #8
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d012      	beq.n	8004d7c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691a      	ldr	r2, [r3, #16]
 8004d5a:	4b81      	ldr	r3, [pc, #516]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	091b      	lsrs	r3, r3, #4
 8004d60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d909      	bls.n	8004d7c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004d68:	4b7d      	ldr	r3, [pc, #500]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	011b      	lsls	r3, r3, #4
 8004d76:	497a      	ldr	r1, [pc, #488]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 0304 	and.w	r3, r3, #4
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d010      	beq.n	8004daa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	4b74      	ldr	r3, [pc, #464]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d908      	bls.n	8004daa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004d98:	4b71      	ldr	r3, [pc, #452]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004d9a:	6a1b      	ldr	r3, [r3, #32]
 8004d9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	496e      	ldr	r1, [pc, #440]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d010      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689a      	ldr	r2, [r3, #8]
 8004dba:	4b69      	ldr	r3, [pc, #420]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f003 030f 	and.w	r3, r3, #15
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d908      	bls.n	8004dd8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004dc6:	4b66      	ldr	r3, [pc, #408]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f023 020f 	bic.w	r2, r3, #15
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	4963      	ldr	r1, [pc, #396]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80d2 	beq.w	8004f8a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004de6:	2300      	movs	r3, #0
 8004de8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b03      	cmp	r3, #3
 8004df0:	d143      	bne.n	8004e7a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df2:	4b5b      	ldr	r3, [pc, #364]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d110      	bne.n	8004e22 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004e00:	4b57      	ldr	r3, [pc, #348]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e06:	4a56      	ldr	r2, [pc, #344]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004e08:	f043 0304 	orr.w	r3, r3, #4
 8004e0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004e10:	4b53      	ldr	r3, [pc, #332]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	60bb      	str	r3, [r7, #8]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004e22:	f7fc fc57 	bl	80016d4 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004e28:	4b4e      	ldr	r3, [pc, #312]	; (8004f64 <HAL_RCC_ClockConfig+0x28c>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00f      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004e36:	f7fc fc4d 	bl	80016d4 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e12b      	b.n	80050a0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004e48:	4b46      	ldr	r3, [pc, #280]	; (8004f64 <HAL_RCC_ClockConfig+0x28c>)
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004e54:	7dfb      	ldrb	r3, [r7, #23]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004e5a:	4b41      	ldr	r3, [pc, #260]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e60:	4a3f      	ldr	r2, [pc, #252]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004e62:	f023 0304 	bic.w	r3, r3, #4
 8004e66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004e6a:	4b3d      	ldr	r3, [pc, #244]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d121      	bne.n	8004eba <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e112      	b.n	80050a0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d107      	bne.n	8004e92 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e82:	4b37      	ldr	r3, [pc, #220]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d115      	bne.n	8004eba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e106      	b.n	80050a0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d107      	bne.n	8004eaa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004e9a:	4b31      	ldr	r3, [pc, #196]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d109      	bne.n	8004eba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e0fa      	b.n	80050a0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eaa:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e0f2      	b.n	80050a0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8004eba:	4b29      	ldr	r3, [pc, #164]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f023 0203 	bic.w	r2, r3, #3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	4926      	ldr	r1, [pc, #152]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8004ecc:	f7fc fc02 	bl	80016d4 <HAL_GetTick>
 8004ed0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b03      	cmp	r3, #3
 8004ed8:	d112      	bne.n	8004f00 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004eda:	e00a      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004edc:	f7fc fbfa 	bl	80016d4 <HAL_GetTick>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e0d6      	b.n	80050a0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ef2:	4b1b      	ldr	r3, [pc, #108]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f003 030c 	and.w	r3, r3, #12
 8004efa:	2b0c      	cmp	r3, #12
 8004efc:	d1ee      	bne.n	8004edc <HAL_RCC_ClockConfig+0x204>
 8004efe:	e044      	b.n	8004f8a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d112      	bne.n	8004f2e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f08:	e00a      	b.n	8004f20 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f0a:	f7fc fbe3 	bl	80016d4 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d901      	bls.n	8004f20 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e0bf      	b.n	80050a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004f20:	4b0f      	ldr	r3, [pc, #60]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f003 030c 	and.w	r3, r3, #12
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d1ee      	bne.n	8004f0a <HAL_RCC_ClockConfig+0x232>
 8004f2c:	e02d      	b.n	8004f8a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d123      	bne.n	8004f7e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f36:	e00a      	b.n	8004f4e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f38:	f7fc fbcc 	bl	80016d4 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e0a8      	b.n	80050a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f4e:	4b04      	ldr	r3, [pc, #16]	; (8004f60 <HAL_RCC_ClockConfig+0x288>)
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1ee      	bne.n	8004f38 <HAL_RCC_ClockConfig+0x260>
 8004f5a:	e016      	b.n	8004f8a <HAL_RCC_ClockConfig+0x2b2>
 8004f5c:	40022000 	.word	0x40022000
 8004f60:	46020c00 	.word	0x46020c00
 8004f64:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f68:	f7fc fbb4 	bl	80016d4 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e090      	b.n	80050a0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f7e:	4b4a      	ldr	r3, [pc, #296]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d1ee      	bne.n	8004f68 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d010      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	4b43      	ldr	r3, [pc, #268]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d208      	bcs.n	8004fb8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004fa6:	4b40      	ldr	r3, [pc, #256]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	f023 020f 	bic.w	r2, r3, #15
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	493d      	ldr	r1, [pc, #244]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb8:	4b3c      	ldr	r3, [pc, #240]	; (80050ac <HAL_RCC_ClockConfig+0x3d4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d210      	bcs.n	8004fe8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc6:	4b39      	ldr	r3, [pc, #228]	; (80050ac <HAL_RCC_ClockConfig+0x3d4>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f023 020f 	bic.w	r2, r3, #15
 8004fce:	4937      	ldr	r1, [pc, #220]	; (80050ac <HAL_RCC_ClockConfig+0x3d4>)
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd6:	4b35      	ldr	r3, [pc, #212]	; (80050ac <HAL_RCC_ClockConfig+0x3d4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 030f 	and.w	r3, r3, #15
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e05b      	b.n	80050a0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d010      	beq.n	8005016 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	4b2b      	ldr	r3, [pc, #172]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005000:	429a      	cmp	r2, r3
 8005002:	d208      	bcs.n	8005016 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005004:	4b28      	ldr	r3, [pc, #160]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005006:	6a1b      	ldr	r3, [r3, #32]
 8005008:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	4925      	ldr	r1, [pc, #148]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005012:	4313      	orrs	r3, r2
 8005014:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d012      	beq.n	8005048 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691a      	ldr	r2, [r3, #16]
 8005026:	4b20      	ldr	r3, [pc, #128]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	091b      	lsrs	r3, r3, #4
 800502c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005030:	429a      	cmp	r2, r3
 8005032:	d209      	bcs.n	8005048 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005034:	4b1c      	ldr	r3, [pc, #112]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	4919      	ldr	r1, [pc, #100]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005044:	4313      	orrs	r3, r2
 8005046:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b00      	cmp	r3, #0
 8005052:	d010      	beq.n	8005076 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	695a      	ldr	r2, [r3, #20]
 8005058:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005060:	429a      	cmp	r2, r3
 8005062:	d208      	bcs.n	8005076 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005064:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	490d      	ldr	r1, [pc, #52]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 8005072:	4313      	orrs	r3, r2
 8005074:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005076:	f000 f821 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 800507a:	4602      	mov	r2, r0
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <HAL_RCC_ClockConfig+0x3d0>)
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	490a      	ldr	r1, [pc, #40]	; (80050b0 <HAL_RCC_ClockConfig+0x3d8>)
 8005086:	5ccb      	ldrb	r3, [r1, r3]
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
 800508c:	4a09      	ldr	r2, [pc, #36]	; (80050b4 <HAL_RCC_ClockConfig+0x3dc>)
 800508e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005090:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <HAL_RCC_ClockConfig+0x3e0>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4618      	mov	r0, r3
 8005096:	f7fc fad3 	bl	8001640 <HAL_InitTick>
 800509a:	4603      	mov	r3, r0
 800509c:	73fb      	strb	r3, [r7, #15]

  return status;
 800509e:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3718      	adds	r7, #24
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	46020c00 	.word	0x46020c00
 80050ac:	40022000 	.word	0x40022000
 80050b0:	08009d18 	.word	0x08009d18
 80050b4:	20000000 	.word	0x20000000
 80050b8:	20000004 	.word	0x20000004

080050bc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	b08b      	sub	sp, #44	; 0x2c
 80050c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80050c2:	2300      	movs	r3, #0
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80050c6:	2300      	movs	r3, #0
 80050c8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050ca:	4b7b      	ldr	r3, [pc, #492]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f003 030c 	and.w	r3, r3, #12
 80050d2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050d4:	4b78      	ldr	r3, [pc, #480]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	f003 0303 	and.w	r3, r3, #3
 80050dc:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_GetSysClockFreq+0x34>
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b0c      	cmp	r3, #12
 80050e8:	d121      	bne.n	800512e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d11e      	bne.n	800512e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80050f0:	4b71      	ldr	r3, [pc, #452]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d107      	bne.n	800510c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80050fc:	4b6e      	ldr	r3, [pc, #440]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80050fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005102:	0b1b      	lsrs	r3, r3, #12
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
 800510a:	e005      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 800510c:	4b6a      	ldr	r3, [pc, #424]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	0f1b      	lsrs	r3, r3, #28
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005118:	4a68      	ldr	r2, [pc, #416]	; (80052bc <HAL_RCC_GetSysClockFreq+0x200>)
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005120:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d110      	bne.n	800514a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800512c:	e00d      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800512e:	4b62      	ldr	r3, [pc, #392]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	f003 030c 	and.w	r3, r3, #12
 8005136:	2b04      	cmp	r3, #4
 8005138:	d102      	bne.n	8005140 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800513a:	4b61      	ldr	r3, [pc, #388]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x204>)
 800513c:	623b      	str	r3, [r7, #32]
 800513e:	e004      	b.n	800514a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	2b08      	cmp	r3, #8
 8005144:	d101      	bne.n	800514a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005146:	4b5e      	ldr	r3, [pc, #376]	; (80052c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005148:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	2b0c      	cmp	r3, #12
 800514e:	f040 80ac 	bne.w	80052aa <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005152:	4b59      	ldr	r3, [pc, #356]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800515c:	4b56      	ldr	r3, [pc, #344]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005160:	0a1b      	lsrs	r3, r3, #8
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	3301      	adds	r3, #1
 8005168:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800516a:	4b53      	ldr	r3, [pc, #332]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800516c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516e:	091b      	lsrs	r3, r3, #4
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005176:	4b50      	ldr	r3, [pc, #320]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	08db      	lsrs	r3, r3, #3
 800517c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	fb02 f303 	mul.w	r3, r2, r3
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800518e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	f000 8086 	beq.w	80052a6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	2b02      	cmp	r3, #2
 800519e:	d003      	beq.n	80051a8 <HAL_RCC_GetSysClockFreq+0xec>
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	2b03      	cmp	r3, #3
 80051a4:	d022      	beq.n	80051ec <HAL_RCC_GetSysClockFreq+0x130>
 80051a6:	e043      	b.n	8005230 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051b2:	eddf 6a44 	vldr	s13, [pc, #272]	; 80052c4 <HAL_RCC_GetSysClockFreq+0x208>
 80051b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ba:	4b3f      	ldr	r3, [pc, #252]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80051bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80051ca:	ed97 6a01 	vldr	s12, [r7, #4]
 80051ce:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80052c8 <HAL_RCC_GetSysClockFreq+0x20c>
 80051d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80051da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051de:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80051ea:	e046      	b.n	800527a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f6:	eddf 6a33 	vldr	s13, [pc, #204]	; 80052c4 <HAL_RCC_GetSysClockFreq+0x208>
 80051fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051fe:	4b2e      	ldr	r3, [pc, #184]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005206:	ee07 3a90 	vmov	s15, r3
 800520a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800520e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005212:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80052c8 <HAL_RCC_GetSysClockFreq+0x20c>
 8005216:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800521a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800521e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005222:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800522e:	e024      	b.n	800527a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005232:	ee07 3a90 	vmov	s15, r3
 8005236:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	ee07 3a90 	vmov	s15, r3
 8005240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005244:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005248:	4b1b      	ldr	r3, [pc, #108]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800524a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800524c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005250:	ee07 3a90 	vmov	s15, r3
 8005254:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005258:	ed97 6a01 	vldr	s12, [r7, #4]
 800525c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80052c8 <HAL_RCC_GetSysClockFreq+0x20c>
 8005260:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005264:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800526c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005274:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005278:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800527a:	4b0f      	ldr	r3, [pc, #60]	; (80052b8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800527c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800527e:	0e1b      	lsrs	r3, r3, #24
 8005280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005284:	3301      	adds	r3, #1
 8005286:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	ee07 3a90 	vmov	s15, r3
 800528e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005292:	edd7 6a07 	vldr	s13, [r7, #28]
 8005296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800529e:	ee17 3a90 	vmov	r3, s15
 80052a2:	623b      	str	r3, [r7, #32]
 80052a4:	e001      	b.n	80052aa <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80052aa:	6a3b      	ldr	r3, [r7, #32]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	372c      	adds	r7, #44	; 0x2c
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	46020c00 	.word	0x46020c00
 80052bc:	08009d30 	.word	0x08009d30
 80052c0:	00f42400 	.word	0x00f42400
 80052c4:	4b742400 	.word	0x4b742400
 80052c8:	46000000 	.word	0x46000000

080052cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80052d0:	f7ff fef4 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 80052d4:	4602      	mov	r2, r0
 80052d6:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <HAL_RCC_GetHCLKFreq+0x28>)
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f003 030f 	and.w	r3, r3, #15
 80052de:	4906      	ldr	r1, [pc, #24]	; (80052f8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80052e0:	5ccb      	ldrb	r3, [r1, r3]
 80052e2:	fa22 f303 	lsr.w	r3, r2, r3
 80052e6:	4a05      	ldr	r2, [pc, #20]	; (80052fc <HAL_RCC_GetHCLKFreq+0x30>)
 80052e8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80052ea:	4b04      	ldr	r3, [pc, #16]	; (80052fc <HAL_RCC_GetHCLKFreq+0x30>)
 80052ec:	681b      	ldr	r3, [r3, #0]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	46020c00 	.word	0x46020c00
 80052f8:	08009d18 	.word	0x08009d18
 80052fc:	20000000 	.word	0x20000000

08005300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005304:	f7ff ffe2 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 8005308:	4602      	mov	r2, r0
 800530a:	4b05      	ldr	r3, [pc, #20]	; (8005320 <HAL_RCC_GetPCLK1Freq+0x20>)
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	091b      	lsrs	r3, r3, #4
 8005310:	f003 0307 	and.w	r3, r3, #7
 8005314:	4903      	ldr	r1, [pc, #12]	; (8005324 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005316:	5ccb      	ldrb	r3, [r1, r3]
 8005318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800531c:	4618      	mov	r0, r3
 800531e:	bd80      	pop	{r7, pc}
 8005320:	46020c00 	.word	0x46020c00
 8005324:	08009d28 	.word	0x08009d28

08005328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800532c:	f7ff ffce 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 8005330:	4602      	mov	r2, r0
 8005332:	4b05      	ldr	r3, [pc, #20]	; (8005348 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	0a1b      	lsrs	r3, r3, #8
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	4903      	ldr	r1, [pc, #12]	; (800534c <HAL_RCC_GetPCLK2Freq+0x24>)
 800533e:	5ccb      	ldrb	r3, [r1, r3]
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005344:	4618      	mov	r0, r3
 8005346:	bd80      	pop	{r7, pc}
 8005348:	46020c00 	.word	0x46020c00
 800534c:	08009d28 	.word	0x08009d28

08005350 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005354:	f7ff ffba 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 8005358:	4602      	mov	r2, r0
 800535a:	4b05      	ldr	r3, [pc, #20]	; (8005370 <HAL_RCC_GetPCLK3Freq+0x20>)
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	091b      	lsrs	r3, r3, #4
 8005360:	f003 0307 	and.w	r3, r3, #7
 8005364:	4903      	ldr	r1, [pc, #12]	; (8005374 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005366:	5ccb      	ldrb	r3, [r1, r3]
 8005368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800536c:	4618      	mov	r0, r3
 800536e:	bd80      	pop	{r7, pc}
 8005370:	46020c00 	.word	0x46020c00
 8005374:	08009d28 	.word	0x08009d28

08005378 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b086      	sub	sp, #24
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005380:	4b3e      	ldr	r3, [pc, #248]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800538e:	f7fe fd49 	bl	8003e24 <HAL_PWREx_GetVoltageRange>
 8005392:	6178      	str	r0, [r7, #20]
 8005394:	e019      	b.n	80053ca <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005396:	4b39      	ldr	r3, [pc, #228]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800539c:	4a37      	ldr	r2, [pc, #220]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800539e:	f043 0304 	orr.w	r3, r3, #4
 80053a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80053a6:	4b35      	ldr	r3, [pc, #212]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80053a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ac:	f003 0304 	and.w	r3, r3, #4
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80053b4:	f7fe fd36 	bl	8003e24 <HAL_PWREx_GetVoltageRange>
 80053b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80053ba:	4b30      	ldr	r3, [pc, #192]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80053bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053c0:	4a2e      	ldr	r2, [pc, #184]	; (800547c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80053c2:	f023 0304 	bic.w	r3, r3, #4
 80053c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053d0:	d003      	beq.n	80053da <RCC_SetFlashLatencyFromMSIRange+0x62>
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053d8:	d109      	bne.n	80053ee <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053e0:	d202      	bcs.n	80053e8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80053e2:	2301      	movs	r3, #1
 80053e4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80053e6:	e033      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80053ec:	e030      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053f4:	d208      	bcs.n	8005408 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053fc:	d102      	bne.n	8005404 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80053fe:	2303      	movs	r3, #3
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	e025      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e035      	b.n	8005474 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800540e:	d90f      	bls.n	8005430 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d109      	bne.n	800542a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800541c:	d902      	bls.n	8005424 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800541e:	2300      	movs	r3, #0
 8005420:	613b      	str	r3, [r7, #16]
 8005422:	e015      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005424:	2301      	movs	r3, #1
 8005426:	613b      	str	r3, [r7, #16]
 8005428:	e012      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800542a:	2300      	movs	r3, #0
 800542c:	613b      	str	r3, [r7, #16]
 800542e:	e00f      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005436:	d109      	bne.n	800544c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800543e:	d102      	bne.n	8005446 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005440:	2301      	movs	r3, #1
 8005442:	613b      	str	r3, [r7, #16]
 8005444:	e004      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005446:	2302      	movs	r3, #2
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	e001      	b.n	8005450 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800544c:	2301      	movs	r3, #1
 800544e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f023 020f 	bic.w	r2, r3, #15
 8005458:	4909      	ldr	r1, [pc, #36]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005460:	4b07      	ldr	r3, [pc, #28]	; (8005480 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 030f 	and.w	r3, r3, #15
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	429a      	cmp	r2, r3
 800546c:	d001      	beq.n	8005472 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	46020c00 	.word	0x46020c00
 8005480:	40022000 	.word	0x40022000

08005484 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005488:	b0ba      	sub	sp, #232	; 0xe8
 800548a:	af00      	add	r7, sp, #0
 800548c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005490:	2300      	movs	r3, #0
 8005492:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005496:	2300      	movs	r3, #0
 8005498:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800549c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	f002 0401 	and.w	r4, r2, #1
 80054a8:	2500      	movs	r5, #0
 80054aa:	ea54 0305 	orrs.w	r3, r4, r5
 80054ae:	d00b      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80054b0:	4bcb      	ldr	r3, [pc, #812]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054b6:	f023 0103 	bic.w	r1, r3, #3
 80054ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c0:	4ac7      	ldr	r2, [pc, #796]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054c2:	430b      	orrs	r3, r1
 80054c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d0:	f002 0802 	and.w	r8, r2, #2
 80054d4:	f04f 0900 	mov.w	r9, #0
 80054d8:	ea58 0309 	orrs.w	r3, r8, r9
 80054dc:	d00b      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80054de:	4bc0      	ldr	r3, [pc, #768]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80054e4:	f023 010c 	bic.w	r1, r3, #12
 80054e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ee:	4abc      	ldr	r2, [pc, #752]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80054f0:	430b      	orrs	r3, r1
 80054f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f002 0a04 	and.w	sl, r2, #4
 8005502:	f04f 0b00 	mov.w	fp, #0
 8005506:	ea5a 030b 	orrs.w	r3, sl, fp
 800550a:	d00b      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800550c:	4bb4      	ldr	r3, [pc, #720]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800550e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005512:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005516:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	4ab0      	ldr	r2, [pc, #704]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800551e:	430b      	orrs	r3, r1
 8005520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005524:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552c:	f002 0308 	and.w	r3, r2, #8
 8005530:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005534:	2300      	movs	r3, #0
 8005536:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800553a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800553e:	460b      	mov	r3, r1
 8005540:	4313      	orrs	r3, r2
 8005542:	d00b      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005544:	4ba6      	ldr	r3, [pc, #664]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800554a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800554e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005554:	4aa2      	ldr	r2, [pc, #648]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005556:	430b      	orrs	r3, r1
 8005558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800555c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005564:	f002 0310 	and.w	r3, r2, #16
 8005568:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800556c:	2300      	movs	r3, #0
 800556e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005572:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005576:	460b      	mov	r3, r1
 8005578:	4313      	orrs	r3, r2
 800557a:	d00b      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800557c:	4b98      	ldr	r3, [pc, #608]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800557e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005582:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005586:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800558a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558c:	4a94      	ldr	r2, [pc, #592]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800558e:	430b      	orrs	r3, r1
 8005590:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005594:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f002 0320 	and.w	r3, r2, #32
 80055a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055a4:	2300      	movs	r3, #0
 80055a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80055aa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80055ae:	460b      	mov	r3, r1
 80055b0:	4313      	orrs	r3, r2
 80055b2:	d00b      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80055b4:	4b8a      	ldr	r3, [pc, #552]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80055ba:	f023 0107 	bic.w	r1, r3, #7
 80055be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055c4:	4a86      	ldr	r2, [pc, #536]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055c6:	430b      	orrs	r3, r1
 80055c8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80055d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055dc:	2300      	movs	r3, #0
 80055de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4313      	orrs	r3, r2
 80055ea:	d00b      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80055ec:	4b7c      	ldr	r3, [pc, #496]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80055f2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80055f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055fc:	4a78      	ldr	r2, [pc, #480]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80055fe:	430b      	orrs	r3, r1
 8005600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8005610:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005614:	2300      	movs	r3, #0
 8005616:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800561a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800561e:	460b      	mov	r3, r1
 8005620:	4313      	orrs	r3, r2
 8005622:	d00b      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005624:	4b6e      	ldr	r3, [pc, #440]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800562a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800562e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005634:	4a6a      	ldr	r2, [pc, #424]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005636:	430b      	orrs	r3, r1
 8005638:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800563c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005644:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8005648:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800564c:	2300      	movs	r3, #0
 800564e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005652:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8005656:	460b      	mov	r3, r1
 8005658:	4313      	orrs	r3, r2
 800565a:	d00b      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800565c:	4b60      	ldr	r3, [pc, #384]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800565e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005662:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	4a5c      	ldr	r2, [pc, #368]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800566e:	430b      	orrs	r3, r1
 8005670:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005674:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005684:	2300      	movs	r3, #0
 8005686:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800568a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800568e:	460b      	mov	r3, r1
 8005690:	4313      	orrs	r3, r2
 8005692:	d00b      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005694:	4b52      	ldr	r3, [pc, #328]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800569a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800569e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056a4:	4a4e      	ldr	r2, [pc, #312]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056a6:	430b      	orrs	r3, r1
 80056a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80056ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80056b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80056bc:	2300      	movs	r3, #0
 80056be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80056c2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80056c6:	460b      	mov	r3, r1
 80056c8:	4313      	orrs	r3, r2
 80056ca:	d00b      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80056cc:	4b44      	ldr	r3, [pc, #272]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80056d2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80056d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056dc:	4a40      	ldr	r2, [pc, #256]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056de:	430b      	orrs	r3, r1
 80056e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80056e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80056f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056f4:	2300      	movs	r3, #0
 80056f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80056fa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80056fe:	460b      	mov	r3, r1
 8005700:	4313      	orrs	r3, r2
 8005702:	d00b      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005704:	4b36      	ldr	r3, [pc, #216]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800570a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800570e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005714:	4a32      	ldr	r2, [pc, #200]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005716:	430b      	orrs	r3, r1
 8005718:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800571c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005728:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800572c:	2300      	movs	r3, #0
 800572e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005732:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8005736:	460b      	mov	r3, r1
 8005738:	4313      	orrs	r3, r2
 800573a:	d00c      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800573c:	4b28      	ldr	r3, [pc, #160]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800573e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005742:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800574a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800574e:	4a24      	ldr	r2, [pc, #144]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005750:	430b      	orrs	r3, r1
 8005752:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005762:	67bb      	str	r3, [r7, #120]	; 0x78
 8005764:	2300      	movs	r3, #0
 8005766:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005768:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800576c:	460b      	mov	r3, r1
 800576e:	4313      	orrs	r3, r2
 8005770:	d04f      	beq.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577a:	2b80      	cmp	r3, #128	; 0x80
 800577c:	d02d      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x356>
 800577e:	2b80      	cmp	r3, #128	; 0x80
 8005780:	d827      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005782:	2b60      	cmp	r3, #96	; 0x60
 8005784:	d02e      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005786:	2b60      	cmp	r3, #96	; 0x60
 8005788:	d823      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800578a:	2b40      	cmp	r3, #64	; 0x40
 800578c:	d006      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x318>
 800578e:	2b40      	cmp	r3, #64	; 0x40
 8005790:	d81f      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d009      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005796:	2b20      	cmp	r3, #32
 8005798:	d011      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800579a:	e01a      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800579c:	4b10      	ldr	r3, [pc, #64]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	4a0f      	ldr	r2, [pc, #60]	; (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057a8:	e01d      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80057aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057ae:	3308      	adds	r3, #8
 80057b0:	4618      	mov	r0, r3
 80057b2:	f002 fa41 	bl	8007c38 <RCCEx_PLL2_Config>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057bc:	e013      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80057be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057c2:	332c      	adds	r3, #44	; 0x2c
 80057c4:	4618      	mov	r0, r3
 80057c6:	f002 facf 	bl	8007d68 <RCCEx_PLL3_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80057d0:	e009      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80057d8:	e005      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80057da:	bf00      	nop
 80057dc:	e003      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80057de:	bf00      	nop
 80057e0:	46020c00 	.word	0x46020c00
        break;
 80057e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10d      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80057ee:	4bb6      	ldr	r3, [pc, #728]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80057f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80057f4:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80057f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005800:	4ab1      	ldr	r2, [pc, #708]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005802:	430b      	orrs	r3, r1
 8005804:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005808:	e003      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800580e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800581e:	673b      	str	r3, [r7, #112]	; 0x70
 8005820:	2300      	movs	r3, #0
 8005822:	677b      	str	r3, [r7, #116]	; 0x74
 8005824:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005828:	460b      	mov	r3, r1
 800582a:	4313      	orrs	r3, r2
 800582c:	d053      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800582e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800583a:	d033      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800583c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005840:	d82c      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005846:	d02f      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8005848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800584c:	d826      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800584e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005852:	d008      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005858:	d820      	bhi.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x418>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00a      	beq.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800585e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005862:	d011      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005864:	e01a      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005866:	4b98      	ldr	r3, [pc, #608]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	4a97      	ldr	r2, [pc, #604]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800586c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005870:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005872:	e01a      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005874:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005878:	3308      	adds	r3, #8
 800587a:	4618      	mov	r0, r3
 800587c:	f002 f9dc 	bl	8007c38 <RCCEx_PLL2_Config>
 8005880:	4603      	mov	r3, r0
 8005882:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005886:	e010      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800588c:	332c      	adds	r3, #44	; 0x2c
 800588e:	4618      	mov	r0, r3
 8005890:	f002 fa6a 	bl	8007d68 <RCCEx_PLL3_Config>
 8005894:	4603      	mov	r3, r0
 8005896:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800589a:	e006      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80058a2:	e002      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80058a4:	bf00      	nop
 80058a6:	e000      	b.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80058a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058aa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d10d      	bne.n	80058ce <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80058b2:	4b85      	ldr	r3, [pc, #532]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80058b4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80058b8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80058bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058c4:	4a80      	ldr	r2, [pc, #512]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80058c6:	430b      	orrs	r3, r1
 80058c8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80058cc:	e003      	b.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80058d2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80058d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058de:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80058e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058e4:	2300      	movs	r3, #0
 80058e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058e8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80058ec:	460b      	mov	r3, r1
 80058ee:	4313      	orrs	r3, r2
 80058f0:	d046      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 80058f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80058fa:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80058fe:	d028      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005900:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005904:	d821      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005906:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800590a:	d022      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800590c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005910:	d81b      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005912:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005916:	d01c      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005918:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800591c:	d815      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800591e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005922:	d008      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005924:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005928:	d80f      	bhi.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800592a:	2b00      	cmp	r3, #0
 800592c:	d011      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800592e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005932:	d00e      	beq.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005934:	e009      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005936:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800593a:	3308      	adds	r3, #8
 800593c:	4618      	mov	r0, r3
 800593e:	f002 f97b 	bl	8007c38 <RCCEx_PLL2_Config>
 8005942:	4603      	mov	r3, r0
 8005944:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005948:	e004      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005950:	e000      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8005952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005954:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10d      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800595c:	4b5a      	ldr	r3, [pc, #360]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800595e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005962:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800596a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800596e:	4a56      	ldr	r2, [pc, #344]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005970:	430b      	orrs	r3, r1
 8005972:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005976:	e003      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005978:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800597c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005980:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800598c:	663b      	str	r3, [r7, #96]	; 0x60
 800598e:	2300      	movs	r3, #0
 8005990:	667b      	str	r3, [r7, #100]	; 0x64
 8005992:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005996:	460b      	mov	r3, r1
 8005998:	4313      	orrs	r3, r2
 800599a:	d03f      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800599c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d81e      	bhi.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x562>
 80059a8:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80059aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ae:	bf00      	nop
 80059b0:	080059ef 	.word	0x080059ef
 80059b4:	080059c5 	.word	0x080059c5
 80059b8:	080059d3 	.word	0x080059d3
 80059bc:	080059ef 	.word	0x080059ef
 80059c0:	080059ef 	.word	0x080059ef
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059c4:	4b40      	ldr	r3, [pc, #256]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c8:	4a3f      	ldr	r2, [pc, #252]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ce:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80059d0:	e00e      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059d6:	332c      	adds	r3, #44	; 0x2c
 80059d8:	4618      	mov	r0, r3
 80059da:	f002 f9c5 	bl	8007d68 <RCCEx_PLL3_Config>
 80059de:	4603      	mov	r3, r0
 80059e0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80059e4:	e004      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80059ec:	e000      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80059ee:	bf00      	nop
    }
    if (ret == HAL_OK)
 80059f0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10d      	bne.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 80059f8:	4b33      	ldr	r3, [pc, #204]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80059fe:	f023 0107 	bic.w	r1, r3, #7
 8005a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0a:	4a2f      	ldr	r2, [pc, #188]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005a12:	e003      	b.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a14:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a18:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005a1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a24:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005a28:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a2e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005a32:	460b      	mov	r3, r1
 8005a34:	4313      	orrs	r3, r2
 8005a36:	d04d      	beq.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005a38:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a44:	d028      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005a46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a4a:	d821      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005a4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a50:	d024      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005a52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005a56:	d81b      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a5c:	d00e      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8005a5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a62:	d815      	bhi.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d01b      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6c:	d110      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a6e:	4b16      	ldr	r3, [pc, #88]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a72:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a78:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005a7a:	e012      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a80:	332c      	adds	r3, #44	; 0x2c
 8005a82:	4618      	mov	r0, r3
 8005a84:	f002 f970 	bl	8007d68 <RCCEx_PLL3_Config>
 8005a88:	4603      	mov	r3, r0
 8005a8a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005a8e:	e008      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005a96:	e004      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005a98:	bf00      	nop
 8005a9a:	e002      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005a9c:	bf00      	nop
 8005a9e:	e000      	b.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005aa0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005aa2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d110      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005aaa:	4b07      	ldr	r3, [pc, #28]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005aac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ab0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005ab4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005abc:	4a02      	ldr	r2, [pc, #8]	; (8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005abe:	430b      	orrs	r3, r1
 8005ac0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ac4:	e006      	b.n	8005ad4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005ac6:	bf00      	nop
 8005ac8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005acc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ad0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ad4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005ae0:	653b      	str	r3, [r7, #80]	; 0x50
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ae6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005aea:	460b      	mov	r3, r1
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f000 80b5 	beq.w	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005af2:	2300      	movs	r3, #0
 8005af4:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005af8:	4b9d      	ldr	r3, [pc, #628]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005afe:	f003 0304 	and.w	r3, r3, #4
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d113      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b06:	4b9a      	ldr	r3, [pc, #616]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b0c:	4a98      	ldr	r2, [pc, #608]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b0e:	f043 0304 	orr.w	r3, r3, #4
 8005b12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005b16:	4b96      	ldr	r3, [pc, #600]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b1c:	f003 0304 	and.w	r3, r3, #4
 8005b20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005b2e:	4b91      	ldr	r3, [pc, #580]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	4a90      	ldr	r2, [pc, #576]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b3a:	f7fb fdcb 	bl	80016d4 <HAL_GetTick>
 8005b3e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005b42:	e00b      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b44:	f7fb fdc6 	bl	80016d4 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	2b02      	cmp	r3, #2
 8005b52:	d903      	bls.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005b54:	2303      	movs	r3, #3
 8005b56:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005b5a:	e005      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005b5c:	4b85      	ldr	r3, [pc, #532]	; (8005d74 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0ed      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005b68:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d165      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005b70:	4b7f      	ldr	r3, [pc, #508]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d023      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d01b      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b96:	4b76      	ldr	r3, [pc, #472]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ba0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ba4:	4b72      	ldr	r3, [pc, #456]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ba6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005baa:	4a71      	ldr	r2, [pc, #452]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bb4:	4b6e      	ldr	r3, [pc, #440]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005bb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bba:	4a6d      	ldr	r2, [pc, #436]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bc0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bc4:	4a6a      	ldr	r2, [pc, #424]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d019      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bda:	f7fb fd7b 	bl	80016d4 <HAL_GetTick>
 8005bde:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005be2:	e00d      	b.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005be4:	f7fb fd76 	bl	80016d4 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bee:	1ad2      	subs	r2, r2, r3
 8005bf0:	f241 3388 	movw	r3, #5000	; 0x1388
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d903      	bls.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8005bfe:	e006      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c00:	4b5b      	ldr	r3, [pc, #364]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0ea      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005c0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d10d      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005c16:	4b56      	ldr	r3, [pc, #344]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005c20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c28:	4a51      	ldr	r2, [pc, #324]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005c30:	e008      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c32:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c36:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8005c3a:	e003      	b.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c40:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c44:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d107      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c4c:	4b48      	ldr	r3, [pc, #288]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c52:	4a47      	ldr	r2, [pc, #284]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c54:	f023 0304 	bic.w	r3, r3, #4
 8005c58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005c5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c64:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005c68:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c6e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005c72:	460b      	mov	r3, r1
 8005c74:	4313      	orrs	r3, r2
 8005c76:	d042      	beq.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005c78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005c80:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005c84:	d022      	beq.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005c86:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005c8a:	d81b      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005c8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c90:	d011      	beq.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005c92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c96:	d815      	bhi.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d019      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005c9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ca0:	d110      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ca6:	3308      	adds	r3, #8
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f001 ffc5 	bl	8007c38 <RCCEx_PLL2_Config>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005cb4:	e00d      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cb6:	4b2e      	ldr	r3, [pc, #184]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	4a2d      	ldr	r2, [pc, #180]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cc0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005cc2:	e006      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005cca:	e002      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005ccc:	bf00      	nop
 8005cce:	e000      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005cd0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005cd2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10d      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005cda:	4b25      	ldr	r3, [pc, #148]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ce0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005ce4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ce8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005cec:	4a20      	ldr	r2, [pc, #128]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005cf4:	e003      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005cfa:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005cfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005d0a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005d14:	460b      	mov	r3, r1
 8005d16:	4313      	orrs	r3, r2
 8005d18:	d032      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d26:	d00b      	beq.n	8005d40 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005d28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d2c:	d804      	bhi.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d008      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d36:	d007      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005d3e:	e004      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005d40:	bf00      	nop
 8005d42:	e002      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005d44:	bf00      	nop
 8005d46:	e000      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005d48:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005d4a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d112      	bne.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005d52:	4b07      	ldr	r3, [pc, #28]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005d58:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d64:	4a02      	ldr	r2, [pc, #8]	; (8005d70 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d66:	430b      	orrs	r3, r1
 8005d68:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005d6c:	e008      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005d6e:	bf00      	nop
 8005d70:	46020c00 	.word	0x46020c00
 8005d74:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d78:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005d7c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005d80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d88:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005d8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d8e:	2300      	movs	r3, #0
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d92:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005d96:	460b      	mov	r3, r1
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	d00c      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005d9c:	4b98      	ldr	r3, [pc, #608]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005d9e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005da2:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005da6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dae:	4a94      	ldr	r2, [pc, #592]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005db0:	430b      	orrs	r3, r1
 8005db2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005dc2:	633b      	str	r3, [r7, #48]	; 0x30
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8005dc8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005dcc:	460b      	mov	r3, r1
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	d019      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dd6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005dde:	d105      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005de0:	4b87      	ldr	r3, [pc, #540]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de4:	4a86      	ldr	r2, [pc, #536]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dea:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005dec:	4b84      	ldr	r3, [pc, #528]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005dee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005df2:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005df6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005dfe:	4a80      	ldr	r2, [pc, #512]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e00:	430b      	orrs	r3, r1
 8005e02:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005e06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e14:	2300      	movs	r3, #0
 8005e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e18:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	d00c      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005e22:	4b77      	ldr	r3, [pc, #476]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005e34:	4972      	ldr	r1, [pc, #456]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e36:	4313      	orrs	r3, r2
 8005e38:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005e3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005e48:	623b      	str	r3, [r7, #32]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e4e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005e52:	460b      	mov	r3, r1
 8005e54:	4313      	orrs	r3, r2
 8005e56:	d00c      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005e58:	4b69      	ldr	r3, [pc, #420]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e66:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005e6a:	4965      	ldr	r1, [pc, #404]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005e72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e7a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	2300      	movs	r3, #0
 8005e82:	61fb      	str	r3, [r7, #28]
 8005e84:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	d00c      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005e8e:	4b5c      	ldr	r3, [pc, #368]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005e90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005e94:	f023 0218 	bic.w	r2, r3, #24
 8005e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005ea0:	4957      	ldr	r1, [pc, #348]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005ea8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8005eb4:	613b      	str	r3, [r7, #16]
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	617b      	str	r3, [r7, #20]
 8005eba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	d032      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005ec4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ec8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ecc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ed0:	d105      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ed2:	4b4b      	ldr	r3, [pc, #300]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed6:	4a4a      	ldr	r2, [pc, #296]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ed8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005edc:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8005ede:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ee2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ee6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005eea:	d108      	bne.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005eec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ef0:	3308      	adds	r3, #8
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 fea0 	bl	8007c38 <RCCEx_PLL2_Config>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8005efe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10d      	bne.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8005f06:	4b3e      	ldr	r3, [pc, #248]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005f18:	4939      	ldr	r1, [pc, #228]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8005f20:	e003      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f22:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005f26:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8005f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8005f36:	60bb      	str	r3, [r7, #8]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]
 8005f3c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005f40:	460b      	mov	r3, r1
 8005f42:	4313      	orrs	r3, r2
 8005f44:	d03a      	beq.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8005f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f52:	d00e      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8005f54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005f58:	d815      	bhi.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d017      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005f5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f62:	d110      	bne.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005f64:	4b26      	ldr	r3, [pc, #152]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	4a25      	ldr	r2, [pc, #148]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f6e:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005f70:	e00e      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f76:	3308      	adds	r3, #8
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f001 fe5d 	bl	8007c38 <RCCEx_PLL2_Config>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005f84:	e004      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005f8c:	e000      	b.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8005f8e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005f90:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d10d      	bne.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8005f98:	4b19      	ldr	r3, [pc, #100]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005fa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005faa:	4915      	ldr	r1, [pc, #84]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8005fb2:	e003      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005fb8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005fbc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	607b      	str	r3, [r7, #4]
 8005fce:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	d00c      	beq.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005fd8:	4b09      	ldr	r3, [pc, #36]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fda:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fde:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005fe2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fe6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fea:	4905      	ldr	r1, [pc, #20]	; (8006000 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fec:	4313      	orrs	r3, r2
 8005fee:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005ff2:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	37e8      	adds	r7, #232	; 0xe8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006000:	46020c00 	.word	0x46020c00

08006004 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006004:	b480      	push	{r7}
 8006006:	b089      	sub	sp, #36	; 0x24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 800600c:	4bad      	ldr	r3, [pc, #692]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800600e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006010:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006014:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006016:	4bab      	ldr	r3, [pc, #684]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601a:	f003 0303 	and.w	r3, r3, #3
 800601e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006020:	4ba8      	ldr	r3, [pc, #672]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006024:	0a1b      	lsrs	r3, r3, #8
 8006026:	f003 030f 	and.w	r3, r3, #15
 800602a:	3301      	adds	r3, #1
 800602c:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800602e:	4ba5      	ldr	r3, [pc, #660]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	091b      	lsrs	r3, r3, #4
 8006034:	f003 0301 	and.w	r3, r3, #1
 8006038:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800603a:	4ba2      	ldr	r3, [pc, #648]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800603c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603e:	08db      	lsrs	r3, r3, #3
 8006040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	fb02 f303 	mul.w	r3, r2, r3
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006052:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 8123 	beq.w	80062a4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b03      	cmp	r3, #3
 8006062:	d062      	beq.n	800612a <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2b03      	cmp	r3, #3
 8006068:	f200 8081 	bhi.w	800616e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d024      	beq.n	80060bc <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b02      	cmp	r3, #2
 8006076:	d17a      	bne.n	800616e <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006082:	eddf 6a91 	vldr	s13, [pc, #580]	; 80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800608a:	4b8e      	ldr	r3, [pc, #568]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800608c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006092:	ee07 3a90 	vmov	s15, r3
 8006096:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800609a:	ed97 6a02 	vldr	s12, [r7, #8]
 800609e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 80062cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80060a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80060aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ba:	e08f      	b.n	80061dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80060bc:	4b81      	ldr	r3, [pc, #516]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d005      	beq.n	80060d4 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 80060c8:	4b7e      	ldr	r3, [pc, #504]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	0f1b      	lsrs	r3, r3, #28
 80060ce:	f003 030f 	and.w	r3, r3, #15
 80060d2:	e006      	b.n	80060e2 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 80060d4:	4b7b      	ldr	r3, [pc, #492]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80060d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80060da:	041b      	lsls	r3, r3, #16
 80060dc:	0f1b      	lsrs	r3, r3, #28
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	4a7b      	ldr	r2, [pc, #492]	; (80062d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80060e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060e8:	ee07 3a90 	vmov	s15, r3
 80060ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	ee07 3a90 	vmov	s15, r3
 80060f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	ee07 3a90 	vmov	s15, r3
 8006104:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006108:	ed97 6a02 	vldr	s12, [r7, #8]
 800610c:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80062cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006110:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006114:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006118:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800611c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006124:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006128:	e058      	b.n	80061dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	ee07 3a90 	vmov	s15, r3
 8006130:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006134:	eddf 6a64 	vldr	s13, [pc, #400]	; 80062c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006138:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800613c:	4b61      	ldr	r3, [pc, #388]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800613e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006144:	ee07 3a90 	vmov	s15, r3
 8006148:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800614c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006150:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80062cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8006154:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006158:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800615c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006160:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006168:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800616c:	e036      	b.n	80061dc <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800616e:	4b55      	ldr	r3, [pc, #340]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d005      	beq.n	8006186 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 800617a:	4b52      	ldr	r3, [pc, #328]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	0f1b      	lsrs	r3, r3, #28
 8006180:	f003 030f 	and.w	r3, r3, #15
 8006184:	e006      	b.n	8006194 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 8006186:	4b4f      	ldr	r3, [pc, #316]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006188:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800618c:	041b      	lsls	r3, r3, #16
 800618e:	0f1b      	lsrs	r3, r3, #28
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	4a4e      	ldr	r2, [pc, #312]	; (80062d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8006196:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	ee07 3a90 	vmov	s15, r3
 80061a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80061b0:	69bb      	ldr	r3, [r7, #24]
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80061be:	eddf 5a43 	vldr	s11, [pc, #268]	; 80062cc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80061c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80061d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061da:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80061dc:	4b39      	ldr	r3, [pc, #228]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80061de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d017      	beq.n	8006218 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80061e8:	4b36      	ldr	r3, [pc, #216]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80061ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ec:	0a5b      	lsrs	r3, r3, #9
 80061ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80061fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061fe:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006202:	edd7 6a07 	vldr	s13, [r7, #28]
 8006206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800620a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800620e:	ee17 2a90 	vmov	r2, s15
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	601a      	str	r2, [r3, #0]
 8006216:	e002      	b.n	800621e <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800621e:	4b29      	ldr	r3, [pc, #164]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d017      	beq.n	800625a <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800622a:	4b26      	ldr	r3, [pc, #152]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800622c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622e:	0c1b      	lsrs	r3, r3, #16
 8006230:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006234:	ee07 3a90 	vmov	s15, r3
 8006238:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800623c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006240:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006244:	edd7 6a07 	vldr	s13, [r7, #28]
 8006248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800624c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006250:	ee17 2a90 	vmov	r2, s15
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	605a      	str	r2, [r3, #4]
 8006258:	e002      	b.n	8006260 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006260:	4b18      	ldr	r3, [pc, #96]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8006262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d017      	beq.n	800629c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800626c:	4b15      	ldr	r3, [pc, #84]	; (80062c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800626e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006270:	0e1b      	lsrs	r3, r3, #24
 8006272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006276:	ee07 3a90 	vmov	s15, r3
 800627a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800627e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006282:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006286:	edd7 6a07 	vldr	s13, [r7, #28]
 800628a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800628e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006292:	ee17 2a90 	vmov	r2, s15
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800629a:	e00c      	b.n	80062b6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	609a      	str	r2, [r3, #8]
}
 80062a2:	e008      	b.n	80062b6 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	609a      	str	r2, [r3, #8]
}
 80062b6:	bf00      	nop
 80062b8:	3724      	adds	r7, #36	; 0x24
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	46020c00 	.word	0x46020c00
 80062c8:	4b742400 	.word	0x4b742400
 80062cc:	46000000 	.word	0x46000000
 80062d0:	08009d30 	.word	0x08009d30

080062d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b089      	sub	sp, #36	; 0x24
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80062dc:	4bad      	ldr	r3, [pc, #692]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e4:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80062e6:	4bab      	ldr	r3, [pc, #684]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ea:	f003 0303 	and.w	r3, r3, #3
 80062ee:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80062f0:	4ba8      	ldr	r3, [pc, #672]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	0a1b      	lsrs	r3, r3, #8
 80062f6:	f003 030f 	and.w	r3, r3, #15
 80062fa:	3301      	adds	r3, #1
 80062fc:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80062fe:	4ba5      	ldr	r3, [pc, #660]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006302:	091b      	lsrs	r3, r3, #4
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 800630a:	4ba2      	ldr	r3, [pc, #648]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	08db      	lsrs	r3, r3, #3
 8006310:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	fb02 f303 	mul.w	r3, r2, r3
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006322:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	f000 8123 	beq.w	8006574 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	2b03      	cmp	r3, #3
 8006332:	d062      	beq.n	80063fa <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	2b03      	cmp	r3, #3
 8006338:	f200 8081 	bhi.w	800643e <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	2b01      	cmp	r3, #1
 8006340:	d024      	beq.n	800638c <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b02      	cmp	r3, #2
 8006346:	d17a      	bne.n	800643e <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	ee07 3a90 	vmov	s15, r3
 800634e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006352:	eddf 6a91 	vldr	s13, [pc, #580]	; 8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006356:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800635a:	4b8e      	ldr	r3, [pc, #568]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800635c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800636a:	ed97 6a02 	vldr	s12, [r7, #8]
 800636e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800659c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006372:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006376:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800637a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800637e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006382:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006386:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800638a:	e08f      	b.n	80064ac <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800638c:	4b81      	ldr	r3, [pc, #516]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8006398:	4b7e      	ldr	r3, [pc, #504]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	0f1b      	lsrs	r3, r3, #28
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	e006      	b.n	80063b2 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 80063a4:	4b7b      	ldr	r3, [pc, #492]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80063a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80063aa:	041b      	lsls	r3, r3, #16
 80063ac:	0f1b      	lsrs	r3, r3, #28
 80063ae:	f003 030f 	and.w	r3, r3, #15
 80063b2:	4a7b      	ldr	r2, [pc, #492]	; (80065a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 80063b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063b8:	ee07 3a90 	vmov	s15, r3
 80063bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	ee07 3a90 	vmov	s15, r3
 80063c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	ee07 3a90 	vmov	s15, r3
 80063d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80063dc:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800659c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 80063e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80063f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063f8:	e058      	b.n	80064ac <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	ee07 3a90 	vmov	s15, r3
 8006400:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006404:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006598 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006408:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800640c:	4b61      	ldr	r3, [pc, #388]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800640e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006414:	ee07 3a90 	vmov	s15, r3
 8006418:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800641c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006420:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800659c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006424:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006428:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 800642c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006430:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006434:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006438:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800643c:	e036      	b.n	80064ac <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800643e:	4b55      	ldr	r3, [pc, #340]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d005      	beq.n	8006456 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 800644a:	4b52      	ldr	r3, [pc, #328]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	0f1b      	lsrs	r3, r3, #28
 8006450:	f003 030f 	and.w	r3, r3, #15
 8006454:	e006      	b.n	8006464 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8006456:	4b4f      	ldr	r3, [pc, #316]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006458:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800645c:	041b      	lsls	r3, r3, #16
 800645e:	0f1b      	lsrs	r3, r3, #28
 8006460:	f003 030f 	and.w	r3, r3, #15
 8006464:	4a4e      	ldr	r2, [pc, #312]	; (80065a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8006466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800646a:	ee07 3a90 	vmov	s15, r3
 800646e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800648a:	ed97 6a02 	vldr	s12, [r7, #8]
 800648e:	eddf 5a43 	vldr	s11, [pc, #268]	; 800659c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8006492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800649a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800649e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80064a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064aa:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80064ac:	4b39      	ldr	r3, [pc, #228]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d017      	beq.n	80064e8 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064b8:	4b36      	ldr	r3, [pc, #216]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80064ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064bc:	0a5b      	lsrs	r3, r3, #9
 80064be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c2:	ee07 3a90 	vmov	s15, r3
 80064c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80064ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064ce:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80064d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064de:	ee17 2a90 	vmov	r2, s15
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	601a      	str	r2, [r3, #0]
 80064e6:	e002      	b.n	80064ee <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80064ee:	4b29      	ldr	r3, [pc, #164]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d017      	beq.n	800652a <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80064fa:	4b26      	ldr	r3, [pc, #152]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 80064fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064fe:	0c1b      	lsrs	r3, r3, #16
 8006500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006504:	ee07 3a90 	vmov	s15, r3
 8006508:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 800650c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006510:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006514:	edd7 6a07 	vldr	s13, [r7, #28]
 8006518:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800651c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006520:	ee17 2a90 	vmov	r2, s15
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	605a      	str	r2, [r3, #4]
 8006528:	e002      	b.n	8006530 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006530:	4b18      	ldr	r3, [pc, #96]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d017      	beq.n	800656c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800653c:	4b15      	ldr	r3, [pc, #84]	; (8006594 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 800653e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006540:	0e1b      	lsrs	r3, r3, #24
 8006542:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006546:	ee07 3a90 	vmov	s15, r3
 800654a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 800654e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006552:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006556:	edd7 6a07 	vldr	s13, [r7, #28]
 800655a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800655e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006562:	ee17 2a90 	vmov	r2, s15
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800656a:	e00c      	b.n	8006586 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	609a      	str	r2, [r3, #8]
}
 8006572:	e008      	b.n	8006586 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	609a      	str	r2, [r3, #8]
}
 8006586:	bf00      	nop
 8006588:	3724      	adds	r7, #36	; 0x24
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	46020c00 	.word	0x46020c00
 8006598:	4b742400 	.word	0x4b742400
 800659c:	46000000 	.word	0x46000000
 80065a0:	08009d30 	.word	0x08009d30

080065a4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b089      	sub	sp, #36	; 0x24
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80065ac:	4bad      	ldr	r3, [pc, #692]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b4:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80065b6:	4bab      	ldr	r3, [pc, #684]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ba:	f003 0303 	and.w	r3, r3, #3
 80065be:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80065c0:	4ba8      	ldr	r3, [pc, #672]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	0a1b      	lsrs	r3, r3, #8
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	3301      	adds	r3, #1
 80065cc:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 80065ce:	4ba5      	ldr	r3, [pc, #660]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d2:	091b      	lsrs	r3, r3, #4
 80065d4:	f003 0301 	and.w	r3, r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80065da:	4ba2      	ldr	r3, [pc, #648]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80065dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065de:	08db      	lsrs	r3, r3, #3
 80065e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	fb02 f303 	mul.w	r3, r2, r3
 80065ea:	ee07 3a90 	vmov	s15, r3
 80065ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065f2:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f000 8123 	beq.w	8006844 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b03      	cmp	r3, #3
 8006602:	d062      	beq.n	80066ca <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2b03      	cmp	r3, #3
 8006608:	f200 8081 	bhi.w	800670e <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d024      	beq.n	800665c <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b02      	cmp	r3, #2
 8006616:	d17a      	bne.n	800670e <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	ee07 3a90 	vmov	s15, r3
 800661e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006622:	eddf 6a91 	vldr	s13, [pc, #580]	; 8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006626:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800662a:	4b8e      	ldr	r3, [pc, #568]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800662c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800662e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006632:	ee07 3a90 	vmov	s15, r3
 8006636:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800663a:	ed97 6a02 	vldr	s12, [r7, #8]
 800663e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800686c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006642:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006646:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800664a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800664e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006652:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006656:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 800665a:	e08f      	b.n	800677c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800665c:	4b81      	ldr	r3, [pc, #516]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8006668:	4b7e      	ldr	r3, [pc, #504]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	0f1b      	lsrs	r3, r3, #28
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	e006      	b.n	8006682 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8006674:	4b7b      	ldr	r3, [pc, #492]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006676:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800667a:	041b      	lsls	r3, r3, #16
 800667c:	0f1b      	lsrs	r3, r3, #28
 800667e:	f003 030f 	and.w	r3, r3, #15
 8006682:	4a7b      	ldr	r2, [pc, #492]	; (8006870 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8006684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006688:	ee07 3a90 	vmov	s15, r3
 800668c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	ee07 3a90 	vmov	s15, r3
 8006696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800669a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	ee07 3a90 	vmov	s15, r3
 80066a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ac:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800686c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80066b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80066c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80066c8:	e058      	b.n	800677c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	ee07 3a90 	vmov	s15, r3
 80066d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066d4:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006868 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80066d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066dc:	4b61      	ldr	r3, [pc, #388]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80066de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066e4:	ee07 3a90 	vmov	s15, r3
 80066e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80066ec:	ed97 6a02 	vldr	s12, [r7, #8]
 80066f0:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800686c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 80066f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80066f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80066fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006700:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006708:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800670c:	e036      	b.n	800677c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800670e:	4b55      	ldr	r3, [pc, #340]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 800671a:	4b52      	ldr	r3, [pc, #328]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	0f1b      	lsrs	r3, r3, #28
 8006720:	f003 030f 	and.w	r3, r3, #15
 8006724:	e006      	b.n	8006734 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8006726:	4b4f      	ldr	r3, [pc, #316]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006728:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800672c:	041b      	lsls	r3, r3, #16
 800672e:	0f1b      	lsrs	r3, r3, #28
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	4a4e      	ldr	r2, [pc, #312]	; (8006870 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8006736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800673a:	ee07 3a90 	vmov	s15, r3
 800673e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	ee07 3a90 	vmov	s15, r3
 8006748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	ee07 3a90 	vmov	s15, r3
 8006756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800675a:	ed97 6a02 	vldr	s12, [r7, #8]
 800675e:	eddf 5a43 	vldr	s11, [pc, #268]	; 800686c <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8006762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800676a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800676e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006776:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800677a:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 800677c:	4b39      	ldr	r3, [pc, #228]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800677e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d017      	beq.n	80067b8 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006788:	4b36      	ldr	r3, [pc, #216]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800678a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800678c:	0a5b      	lsrs	r3, r3, #9
 800678e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006792:	ee07 3a90 	vmov	s15, r3
 8006796:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 800679a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800679e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80067a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067ae:	ee17 2a90 	vmov	r2, s15
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	e002      	b.n	80067be <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80067be:	4b29      	ldr	r3, [pc, #164]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d017      	beq.n	80067fa <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067ca:	4b26      	ldr	r3, [pc, #152]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 80067cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ce:	0c1b      	lsrs	r3, r3, #16
 80067d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067d4:	ee07 3a90 	vmov	s15, r3
 80067d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80067dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80067e0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80067e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80067e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80067ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80067f0:	ee17 2a90 	vmov	r2, s15
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	605a      	str	r2, [r3, #4]
 80067f8:	e002      	b.n	8006800 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006800:	4b18      	ldr	r3, [pc, #96]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8006802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d017      	beq.n	800683c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800680c:	4b15      	ldr	r3, [pc, #84]	; (8006864 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 800680e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006810:	0e1b      	lsrs	r3, r3, #24
 8006812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006816:	ee07 3a90 	vmov	s15, r3
 800681a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 800681e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006822:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006826:	edd7 6a07 	vldr	s13, [r7, #28]
 800682a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800682e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006832:	ee17 2a90 	vmov	r2, s15
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800683a:	e00c      	b.n	8006856 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	609a      	str	r2, [r3, #8]
}
 8006842:	e008      	b.n	8006856 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	609a      	str	r2, [r3, #8]
}
 8006856:	bf00      	nop
 8006858:	3724      	adds	r7, #36	; 0x24
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	46020c00 	.word	0x46020c00
 8006868:	4b742400 	.word	0x4b742400
 800686c:	46000000 	.word	0x46000000
 8006870:	08009d30 	.word	0x08009d30

08006874 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08e      	sub	sp, #56	; 0x38
 8006878:	af00      	add	r7, sp, #0
 800687a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 800687e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006882:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8006886:	430b      	orrs	r3, r1
 8006888:	d145      	bne.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800688a:	4ba7      	ldr	r3, [pc, #668]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800688c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006894:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006896:	4ba4      	ldr	r3, [pc, #656]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006898:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800689c:	f003 0302 	and.w	r3, r3, #2
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d108      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80068a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068aa:	d104      	bne.n	80068b6 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80068ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b0:	637b      	str	r3, [r7, #52]	; 0x34
 80068b2:	f001 b9b3 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80068b6:	4b9c      	ldr	r3, [pc, #624]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068c4:	d114      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80068c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068cc:	d110      	bne.n	80068f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068ce:	4b96      	ldr	r3, [pc, #600]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068dc:	d103      	bne.n	80068e6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80068de:	23fa      	movs	r3, #250	; 0xfa
 80068e0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068e2:	f001 b99b 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80068e6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80068ec:	f001 b996 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80068f0:	4b8d      	ldr	r3, [pc, #564]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068fc:	d107      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006904:	d103      	bne.n	800690e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006906:	4b89      	ldr	r3, [pc, #548]	; (8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006908:	637b      	str	r3, [r7, #52]	; 0x34
 800690a:	f001 b987 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	637b      	str	r3, [r7, #52]	; 0x34
 8006912:	f001 b983 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800691a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800691e:	430b      	orrs	r3, r1
 8006920:	d151      	bne.n	80069c6 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006922:	4b81      	ldr	r3, [pc, #516]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006924:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006928:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800692c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800692e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006930:	2b80      	cmp	r3, #128	; 0x80
 8006932:	d035      	beq.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006936:	2b80      	cmp	r3, #128	; 0x80
 8006938:	d841      	bhi.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	2b60      	cmp	r3, #96	; 0x60
 800693e:	d02a      	beq.n	8006996 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006942:	2b60      	cmp	r3, #96	; 0x60
 8006944:	d83b      	bhi.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006948:	2b40      	cmp	r3, #64	; 0x40
 800694a:	d009      	beq.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	2b40      	cmp	r3, #64	; 0x40
 8006950:	d835      	bhi.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00c      	beq.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695a:	2b20      	cmp	r3, #32
 800695c:	d012      	beq.n	8006984 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800695e:	e02e      	b.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006960:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff fb4d 	bl	8006004 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800696e:	f001 b955 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006972:	f107 0318 	add.w	r3, r7, #24
 8006976:	4618      	mov	r0, r3
 8006978:	f7ff fcac 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006980:	f001 b94c 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006984:	f107 030c 	add.w	r3, r7, #12
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff fe0b 	bl	80065a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006992:	f001 b943 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006996:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800699a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800699c:	f001 b93e 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80069a0:	4b61      	ldr	r3, [pc, #388]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ac:	d103      	bne.n	80069b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80069ae:	4b60      	ldr	r3, [pc, #384]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80069b0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069b2:	f001 b933 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069ba:	f001 b92f 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80069c2:	f001 b92b 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80069c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ca:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80069ce:	430b      	orrs	r3, r1
 80069d0:	d158      	bne.n	8006a84 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80069d2:	4b55      	ldr	r3, [pc, #340]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80069d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80069de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e4:	d03b      	beq.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ec:	d846      	bhi.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069f4:	d02e      	beq.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069fc:	d83e      	bhi.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a04:	d00b      	beq.n	8006a1e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a0c:	d836      	bhi.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00d      	beq.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1a:	d012      	beq.n	8006a42 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006a1c:	e02e      	b.n	8006a7c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff faee 	bl	8006004 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a2c:	f001 b8f6 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a30:	f107 0318 	add.w	r3, r7, #24
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7ff fc4d 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a3e:	f001 b8ed 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a42:	f107 030c 	add.w	r3, r7, #12
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7ff fdac 	bl	80065a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a50:	f001 b8e4 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006a54:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a5a:	f001 b8df 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a5e:	4b32      	ldr	r3, [pc, #200]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a6a:	d103      	bne.n	8006a74 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006a6c:	4b30      	ldr	r3, [pc, #192]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006a6e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006a70:	f001 b8d4 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a78:	f001 b8d0 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006a80:	f001 b8cc 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a88:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	d126      	bne.n	8006ade <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006a90:	4b25      	ldr	r3, [pc, #148]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a92:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a9a:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006a9c:	4b22      	ldr	r3, [pc, #136]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa8:	d106      	bne.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d103      	bne.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006ab0:	4b1f      	ldr	r3, [pc, #124]	; (8006b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab4:	f001 b8b2 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006ab8:	4b1b      	ldr	r3, [pc, #108]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ac0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ac4:	d107      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006acc:	d103      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006ace:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ad2:	f001 b8a3 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8006ada:	f001 b89f 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006ade:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ae2:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8006ae6:	430b      	orrs	r3, r1
 8006ae8:	d16e      	bne.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006aea:	4b0f      	ldr	r3, [pc, #60]	; (8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006af0:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006af4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006afc:	d03d      	beq.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006b04:	d85c      	bhi.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b0c:	d014      	beq.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b14:	d854      	bhi.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d01f      	beq.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b22:	d012      	beq.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006b24:	e04c      	b.n	8006bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006b26:	bf00      	nop
 8006b28:	46020c00 	.word	0x46020c00
 8006b2c:	0007a120 	.word	0x0007a120
 8006b30:	00f42400 	.word	0x00f42400
 8006b34:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f7ff fa61 	bl	8006004 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b46:	f001 b869 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b4a:	f107 0318 	add.w	r3, r7, #24
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7ff fbc0 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b58:	f001 b860 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006b5c:	4ba7      	ldr	r3, [pc, #668]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b68:	d103      	bne.n	8006b72 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006b6a:	4ba5      	ldr	r3, [pc, #660]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006b6c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b6e:	f001 b855 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006b72:	2300      	movs	r3, #0
 8006b74:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b76:	f001 b851 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006b7a:	4ba0      	ldr	r3, [pc, #640]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0320 	and.w	r3, r3, #32
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d118      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006b86:	4b9d      	ldr	r3, [pc, #628]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d005      	beq.n	8006b9e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006b92:	4b9a      	ldr	r3, [pc, #616]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	0e1b      	lsrs	r3, r3, #24
 8006b98:	f003 030f 	and.w	r3, r3, #15
 8006b9c:	e006      	b.n	8006bac <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006b9e:	4b97      	ldr	r3, [pc, #604]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ba0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ba4:	041b      	lsls	r3, r3, #16
 8006ba6:	0e1b      	lsrs	r3, r3, #24
 8006ba8:	f003 030f 	and.w	r3, r3, #15
 8006bac:	4a95      	ldr	r2, [pc, #596]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006bae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bb2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bb4:	f001 b832 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bbc:	f001 b82e 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bc4:	f001 b82a 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006bc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bcc:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	d17f      	bne.n	8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006bd4:	4b89      	ldr	r3, [pc, #548]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006bd6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bde:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d165      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006be6:	4b85      	ldr	r3, [pc, #532]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bec:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006bf0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006bf8:	d034      	beq.n	8006c64 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006c00:	d853      	bhi.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c08:	d00b      	beq.n	8006c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c10:	d84b      	bhi.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d016      	beq.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8006c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c1e:	d009      	beq.n	8006c34 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8006c20:	e043      	b.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7ff f9ec 	bl	8006004 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006c30:	f000 bff4 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006c34:	f107 0318 	add.w	r3, r7, #24
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff fb4b 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006c42:	f000 bfeb 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006c46:	4b6d      	ldr	r3, [pc, #436]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c52:	d103      	bne.n	8006c5c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006c54:	4b6a      	ldr	r3, [pc, #424]	; (8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006c56:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006c58:	f000 bfe0 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006c60:	f000 bfdc 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c64:	4b65      	ldr	r3, [pc, #404]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b20      	cmp	r3, #32
 8006c6e:	d118      	bne.n	8006ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c70:	4b62      	ldr	r3, [pc, #392]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d005      	beq.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8006c7c:	4b5f      	ldr	r3, [pc, #380]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	0e1b      	lsrs	r3, r3, #24
 8006c82:	f003 030f 	and.w	r3, r3, #15
 8006c86:	e006      	b.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006c88:	4b5c      	ldr	r3, [pc, #368]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006c8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c8e:	041b      	lsls	r3, r3, #16
 8006c90:	0e1b      	lsrs	r3, r3, #24
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	4a5b      	ldr	r2, [pc, #364]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c9c:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006c9e:	f000 bfbd 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006ca6:	f000 bfb9 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006cae:	f000 bfb5 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cb8:	d108      	bne.n	8006ccc <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7ff f9a0 	bl	8006004 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	637b      	str	r3, [r7, #52]	; 0x34
 8006cc8:	f000 bfa8 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	637b      	str	r3, [r7, #52]	; 0x34
 8006cd0:	f000 bfa4 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd8:	1e51      	subs	r1, r2, #1
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	d136      	bne.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006cde:	4b47      	ldr	r3, [pc, #284]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ce4:	f003 0303 	and.w	r3, r3, #3
 8006ce8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d104      	bne.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006cf0:	f7fe fb1a 	bl	8005328 <HAL_RCC_GetPCLK2Freq>
 8006cf4:	6378      	str	r0, [r7, #52]	; 0x34
 8006cf6:	f000 bf91 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d104      	bne.n	8006d0a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d00:	f7fe f9dc 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 8006d04:	6378      	str	r0, [r7, #52]	; 0x34
 8006d06:	f000 bf89 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006d0a:	4b3c      	ldr	r3, [pc, #240]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d16:	d106      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8006d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1a:	2b02      	cmp	r3, #2
 8006d1c:	d103      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 8006d1e:	4b3a      	ldr	r3, [pc, #232]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006d20:	637b      	str	r3, [r7, #52]	; 0x34
 8006d22:	f000 bf7b 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006d26:	4b35      	ldr	r3, [pc, #212]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d2c:	f003 0302 	and.w	r3, r3, #2
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d107      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8006d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d104      	bne.n	8006d44 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8006d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d40:	f000 bf6c 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
 8006d48:	f000 bf68 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d50:	1e91      	subs	r1, r2, #2
 8006d52:	430b      	orrs	r3, r1
 8006d54:	d136      	bne.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006d56:	4b29      	ldr	r3, [pc, #164]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d5c:	f003 030c 	and.w	r3, r3, #12
 8006d60:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d104      	bne.n	8006d72 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006d68:	f7fe faca 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 8006d6c:	6378      	str	r0, [r7, #52]	; 0x34
 8006d6e:	f000 bf55 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d104      	bne.n	8006d82 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006d78:	f7fe f9a0 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 8006d7c:	6378      	str	r0, [r7, #52]	; 0x34
 8006d7e:	f000 bf4d 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006d82:	4b1e      	ldr	r3, [pc, #120]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d8e:	d106      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	2b08      	cmp	r3, #8
 8006d94:	d103      	bne.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006d96:	4b1c      	ldr	r3, [pc, #112]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006d98:	637b      	str	r3, [r7, #52]	; 0x34
 8006d9a:	f000 bf3f 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006d9e:	4b17      	ldr	r3, [pc, #92]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006da0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b02      	cmp	r3, #2
 8006daa:	d107      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	2b0c      	cmp	r3, #12
 8006db0:	d104      	bne.n	8006dbc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006db6:	637b      	str	r3, [r7, #52]	; 0x34
 8006db8:	f000 bf30 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc0:	f000 bf2c 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dc8:	1f11      	subs	r1, r2, #4
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	d13f      	bne.n	8006e4e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006dce:	4b0b      	ldr	r3, [pc, #44]	; (8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006dd8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d104      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006de0:	f7fe fa8e 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 8006de4:	6378      	str	r0, [r7, #52]	; 0x34
 8006de6:	f000 bf19 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	2b10      	cmp	r3, #16
 8006dee:	d10d      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006df0:	f7fe f964 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 8006df4:	6378      	str	r0, [r7, #52]	; 0x34
 8006df6:	f000 bf11 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8006dfa:	bf00      	nop
 8006dfc:	46020c00 	.word	0x46020c00
 8006e00:	02dc6c00 	.word	0x02dc6c00
 8006e04:	08009d30 	.word	0x08009d30
 8006e08:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006e0c:	4ba6      	ldr	r3, [pc, #664]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e18:	d106      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e1c:	2b20      	cmp	r3, #32
 8006e1e:	d103      	bne.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 8006e20:	4ba2      	ldr	r3, [pc, #648]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006e22:	637b      	str	r3, [r7, #52]	; 0x34
 8006e24:	f000 befa 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006e28:	4b9f      	ldr	r3, [pc, #636]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d107      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	2b30      	cmp	r3, #48	; 0x30
 8006e3a:	d104      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8006e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e40:	637b      	str	r3, [r7, #52]	; 0x34
 8006e42:	f000 beeb 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	637b      	str	r3, [r7, #52]	; 0x34
 8006e4a:	f000 bee7 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e52:	f1a2 0108 	sub.w	r1, r2, #8
 8006e56:	430b      	orrs	r3, r1
 8006e58:	d136      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006e5a:	4b93      	ldr	r3, [pc, #588]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e64:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d104      	bne.n	8006e76 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006e6c:	f7fe fa48 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 8006e70:	6378      	str	r0, [r7, #52]	; 0x34
 8006e72:	f000 bed3 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e78:	2b40      	cmp	r3, #64	; 0x40
 8006e7a:	d104      	bne.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e7c:	f7fe f91e 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 8006e80:	6378      	str	r0, [r7, #52]	; 0x34
 8006e82:	f000 becb 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006e86:	4b88      	ldr	r3, [pc, #544]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e92:	d106      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e96:	2b80      	cmp	r3, #128	; 0x80
 8006e98:	d103      	bne.n	8006ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 8006e9a:	4b84      	ldr	r3, [pc, #528]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006e9e:	f000 bebd 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006ea2:	4b81      	ldr	r3, [pc, #516]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ea4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ea8:	f003 0302 	and.w	r3, r3, #2
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d107      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8006eb4:	d104      	bne.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eba:	637b      	str	r3, [r7, #52]	; 0x34
 8006ebc:	f000 beae 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec4:	f000 beaa 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ecc:	f1a2 0110 	sub.w	r1, r2, #16
 8006ed0:	430b      	orrs	r3, r1
 8006ed2:	d139      	bne.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006ed4:	4b74      	ldr	r3, [pc, #464]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006ed6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ede:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8006ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d104      	bne.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ee6:	f7fe fa0b 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 8006eea:	6378      	str	r0, [r7, #52]	; 0x34
 8006eec:	f000 be96 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8006ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef6:	d104      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ef8:	f7fe f8e0 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 8006efc:	6378      	str	r0, [r7, #52]	; 0x34
 8006efe:	f000 be8d 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8006f02:	4b69      	ldr	r3, [pc, #420]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0e:	d107      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8006f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f16:	d103      	bne.n	8006f20 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8006f18:	4b64      	ldr	r3, [pc, #400]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1c:	f000 be7e 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8006f20:	4b61      	ldr	r3, [pc, #388]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f26:	f003 0302 	and.w	r3, r3, #2
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d108      	bne.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006f34:	d104      	bne.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8006f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006f3c:	f000 be6e 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	637b      	str	r3, [r7, #52]	; 0x34
 8006f44:	f000 be6a 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006f48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f4c:	f1a2 0120 	sub.w	r1, r2, #32
 8006f50:	430b      	orrs	r3, r1
 8006f52:	d158      	bne.n	8007006 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006f54:	4b54      	ldr	r3, [pc, #336]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d104      	bne.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8006f66:	f7fe f9f3 	bl	8005350 <HAL_RCC_GetPCLK3Freq>
 8006f6a:	6378      	str	r0, [r7, #52]	; 0x34
 8006f6c:	f000 be56 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	2b01      	cmp	r3, #1
 8006f74:	d104      	bne.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f76:	f7fe f8a1 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 8006f7a:	6378      	str	r0, [r7, #52]	; 0x34
 8006f7c:	f000 be4e 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8006f80:	4b49      	ldr	r3, [pc, #292]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f8c:	d106      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	2b02      	cmp	r3, #2
 8006f92:	d103      	bne.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8006f94:	4b45      	ldr	r3, [pc, #276]	; (80070ac <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8006f96:	637b      	str	r3, [r7, #52]	; 0x34
 8006f98:	f000 be40 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8006f9c:	4b42      	ldr	r3, [pc, #264]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006f9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d107      	bne.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8006faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fac:	2b03      	cmp	r3, #3
 8006fae:	d104      	bne.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8006fb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb6:	f000 be31 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8006fba:	4b3b      	ldr	r3, [pc, #236]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b20      	cmp	r3, #32
 8006fc4:	d11b      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8006fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d118      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fcc:	4b36      	ldr	r3, [pc, #216]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8006fd8:	4b33      	ldr	r3, [pc, #204]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	0e1b      	lsrs	r3, r3, #24
 8006fde:	f003 030f 	and.w	r3, r3, #15
 8006fe2:	e006      	b.n	8006ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8006fe4:	4b30      	ldr	r3, [pc, #192]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8006fe6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fea:	041b      	lsls	r3, r3, #16
 8006fec:	0e1b      	lsrs	r3, r3, #24
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	4a2f      	ldr	r2, [pc, #188]	; (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8006ffa:	f000 be0f 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	637b      	str	r3, [r7, #52]	; 0x34
 8007002:	f000 be0b 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800700a:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800700e:	430b      	orrs	r3, r1
 8007010:	d172      	bne.n	80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007012:	4b25      	ldr	r3, [pc, #148]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007014:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007018:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800701c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007024:	d104      	bne.n	8007030 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007026:	f7fe f849 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 800702a:	6378      	str	r0, [r7, #52]	; 0x34
 800702c:	f000 bdf6 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007036:	d108      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007038:	f107 0318 	add.w	r3, r7, #24
 800703c:	4618      	mov	r0, r3
 800703e:	f7ff f949 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007042:	6a3b      	ldr	r3, [r7, #32]
 8007044:	637b      	str	r3, [r7, #52]	; 0x34
 8007046:	f000 bde9 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 800704a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704c:	2b00      	cmp	r3, #0
 800704e:	d104      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007050:	f7fe f93c 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 8007054:	6378      	str	r0, [r7, #52]	; 0x34
 8007056:	f000 bde1 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 800705a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007060:	d128      	bne.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007062:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b20      	cmp	r3, #32
 800706c:	d118      	bne.n	80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800706e:	4b0e      	ldr	r3, [pc, #56]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d005      	beq.n	8007086 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800707a:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	0e1b      	lsrs	r3, r3, #24
 8007080:	f003 030f 	and.w	r3, r3, #15
 8007084:	e006      	b.n	8007094 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8007086:	4b08      	ldr	r3, [pc, #32]	; (80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8007088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800708c:	041b      	lsls	r3, r3, #16
 800708e:	0e1b      	lsrs	r3, r3, #24
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	4a06      	ldr	r2, [pc, #24]	; (80070b0 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800709a:	637b      	str	r3, [r7, #52]	; 0x34
 800709c:	f000 bdbe 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	637b      	str	r3, [r7, #52]	; 0x34
 80070a4:	f000 bdba 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80070a8:	46020c00 	.word	0x46020c00
 80070ac:	00f42400 	.word	0x00f42400
 80070b0:	08009d30 	.word	0x08009d30
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80070b4:	4baf      	ldr	r3, [pc, #700]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80070c0:	d107      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 80070c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070c8:	d103      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 80070ca:	4bab      	ldr	r3, [pc, #684]	; (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80070cc:	637b      	str	r3, [r7, #52]	; 0x34
 80070ce:	f000 bda5 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80070d2:	4ba8      	ldr	r3, [pc, #672]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070de:	d107      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070e6:	d103      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 80070e8:	4ba3      	ldr	r3, [pc, #652]	; (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80070ea:	637b      	str	r3, [r7, #52]	; 0x34
 80070ec:	f000 bd96 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	637b      	str	r3, [r7, #52]	; 0x34
 80070f4:	f000 bd92 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 80070f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070fc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007100:	430b      	orrs	r3, r1
 8007102:	d158      	bne.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007104:	4b9b      	ldr	r3, [pc, #620]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007106:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800710a:	f003 0307 	and.w	r3, r3, #7
 800710e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	2b04      	cmp	r3, #4
 8007114:	d84b      	bhi.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8007116:	a201      	add	r2, pc, #4	; (adr r2, 800711c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8007118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711c:	08007155 	.word	0x08007155
 8007120:	08007131 	.word	0x08007131
 8007124:	08007143 	.word	0x08007143
 8007128:	0800715f 	.word	0x0800715f
 800712c:	08007169 	.word	0x08007169
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007134:	4618      	mov	r0, r3
 8007136:	f7fe ff65 	bl	8006004 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800713a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800713e:	f000 bd6d 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007142:	f107 030c 	add.w	r3, r7, #12
 8007146:	4618      	mov	r0, r3
 8007148:	f7ff fa2c 	bl	80065a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007150:	f000 bd64 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007154:	f7fe f8ba 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 8007158:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800715a:	f000 bd5f 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800715e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007162:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007164:	f000 bd5a 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007168:	4b82      	ldr	r3, [pc, #520]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0320 	and.w	r3, r3, #32
 8007170:	2b20      	cmp	r3, #32
 8007172:	d118      	bne.n	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007174:	4b7f      	ldr	r3, [pc, #508]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8007180:	4b7c      	ldr	r3, [pc, #496]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	0e1b      	lsrs	r3, r3, #24
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	e006      	b.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800718c:	4b79      	ldr	r3, [pc, #484]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800718e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007192:	041b      	lsls	r3, r3, #16
 8007194:	0e1b      	lsrs	r3, r3, #24
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	4a78      	ldr	r2, [pc, #480]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 800719c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071a2:	f000 bd3b 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071aa:	f000 bd37 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80071ae:	2300      	movs	r3, #0
 80071b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80071b2:	f000 bd33 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80071b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071ba:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80071be:	430b      	orrs	r3, r1
 80071c0:	d167      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80071c2:	4b6c      	ldr	r3, [pc, #432]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80071c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071c8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80071cc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80071ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071d4:	d036      	beq.n	8007244 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071dc:	d855      	bhi.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80071de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071e4:	d029      	beq.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 80071e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071ec:	d84d      	bhi.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80071ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071f4:	d013      	beq.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071fc:	d845      	bhi.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 80071fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007200:	2b00      	cmp	r3, #0
 8007202:	d015      	beq.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8007204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800720a:	d13e      	bne.n	800728a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800720c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007210:	4618      	mov	r0, r3
 8007212:	f7fe fef7 	bl	8006004 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800721a:	f000 bcff 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800721e:	f107 030c 	add.w	r3, r7, #12
 8007222:	4618      	mov	r0, r3
 8007224:	f7ff f9be 	bl	80065a4 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800722c:	f000 bcf6 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007230:	f7fe f84c 	bl	80052cc <HAL_RCC_GetHCLKFreq>
 8007234:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007236:	f000 bcf1 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800723a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800723e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007240:	f000 bcec 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007244:	4b4b      	ldr	r3, [pc, #300]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0320 	and.w	r3, r3, #32
 800724c:	2b20      	cmp	r3, #32
 800724e:	d118      	bne.n	8007282 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007250:	4b48      	ldr	r3, [pc, #288]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d005      	beq.n	8007268 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 800725c:	4b45      	ldr	r3, [pc, #276]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	0e1b      	lsrs	r3, r3, #24
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	e006      	b.n	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8007268:	4b42      	ldr	r3, [pc, #264]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800726a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	0e1b      	lsrs	r3, r3, #24
 8007272:	f003 030f 	and.w	r3, r3, #15
 8007276:	4a41      	ldr	r2, [pc, #260]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800727c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800727e:	f000 bccd 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007282:	2300      	movs	r3, #0
 8007284:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007286:	f000 bcc9 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800728e:	f000 bcc5 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007296:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800729a:	430b      	orrs	r3, r1
 800729c:	d14c      	bne.n	8007338 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800729e:	4b35      	ldr	r3, [pc, #212]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80072aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d104      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80072b0:	f7fe f826 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 80072b4:	6378      	str	r0, [r7, #52]	; 0x34
 80072b6:	f000 bcb1 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80072ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072c0:	d104      	bne.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80072c2:	f7fd fefb 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 80072c6:	6378      	str	r0, [r7, #52]	; 0x34
 80072c8:	f000 bca8 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80072cc:	4b29      	ldr	r3, [pc, #164]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072d8:	d107      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 80072da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072e0:	d103      	bne.n	80072ea <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 80072e2:	4b25      	ldr	r3, [pc, #148]	; (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 80072e4:	637b      	str	r3, [r7, #52]	; 0x34
 80072e6:	f000 bc99 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80072ea:	4b22      	ldr	r3, [pc, #136]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b20      	cmp	r3, #32
 80072f4:	d11c      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072fc:	d118      	bne.n	8007330 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072fe:	4b1d      	ldr	r3, [pc, #116]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 800730a:	4b1a      	ldr	r3, [pc, #104]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	0e1b      	lsrs	r3, r3, #24
 8007310:	f003 030f 	and.w	r3, r3, #15
 8007314:	e006      	b.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8007316:	4b17      	ldr	r3, [pc, #92]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007318:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800731c:	041b      	lsls	r3, r3, #16
 800731e:	0e1b      	lsrs	r3, r3, #24
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	4a15      	ldr	r2, [pc, #84]	; (800737c <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8007326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800732a:	637b      	str	r3, [r7, #52]	; 0x34
 800732c:	f000 bc76 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	637b      	str	r3, [r7, #52]	; 0x34
 8007334:	f000 bc72 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800733c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007340:	430b      	orrs	r3, r1
 8007342:	d153      	bne.n	80073ec <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007344:	4b0b      	ldr	r3, [pc, #44]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007346:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800734a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800734e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007352:	2b00      	cmp	r3, #0
 8007354:	d104      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007356:	f7fd ffd3 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 800735a:	6378      	str	r0, [r7, #52]	; 0x34
 800735c:	f000 bc5e 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007366:	d10b      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007368:	f7fd fea8 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 800736c:	6378      	str	r0, [r7, #52]	; 0x34
 800736e:	f000 bc55 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007372:	bf00      	nop
 8007374:	46020c00 	.word	0x46020c00
 8007378:	00f42400 	.word	0x00f42400
 800737c:	08009d30 	.word	0x08009d30
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007380:	4ba1      	ldr	r3, [pc, #644]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007388:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800738c:	d107      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007394:	d103      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8007396:	4b9d      	ldr	r3, [pc, #628]	; (800760c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007398:	637b      	str	r3, [r7, #52]	; 0x34
 800739a:	f000 bc3f 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 800739e:	4b9a      	ldr	r3, [pc, #616]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b20      	cmp	r3, #32
 80073a8:	d11c      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 80073aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073b0:	d118      	bne.n	80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073b2:	4b95      	ldr	r3, [pc, #596]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d005      	beq.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 80073be:	4b92      	ldr	r3, [pc, #584]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073c0:	689b      	ldr	r3, [r3, #8]
 80073c2:	0e1b      	lsrs	r3, r3, #24
 80073c4:	f003 030f 	and.w	r3, r3, #15
 80073c8:	e006      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80073ca:	4b8f      	ldr	r3, [pc, #572]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073d0:	041b      	lsls	r3, r3, #16
 80073d2:	0e1b      	lsrs	r3, r3, #24
 80073d4:	f003 030f 	and.w	r3, r3, #15
 80073d8:	4a8d      	ldr	r2, [pc, #564]	; (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 80073da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073de:	637b      	str	r3, [r7, #52]	; 0x34
 80073e0:	f000 bc1c 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80073e4:	2300      	movs	r3, #0
 80073e6:	637b      	str	r3, [r7, #52]	; 0x34
 80073e8:	f000 bc18 	b.w	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80073ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f0:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80073f4:	430b      	orrs	r3, r1
 80073f6:	d151      	bne.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80073f8:	4b83      	ldr	r3, [pc, #524]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80073fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80073fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007402:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	2bc0      	cmp	r3, #192	; 0xc0
 8007408:	d024      	beq.n	8007454 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 800740a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800740c:	2bc0      	cmp	r3, #192	; 0xc0
 800740e:	d842      	bhi.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	d00d      	beq.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	2b80      	cmp	r3, #128	; 0x80
 800741a:	d83c      	bhi.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 800741c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8007422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	d011      	beq.n	800744c <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8007428:	e035      	b.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800742a:	f7fd ff91 	bl	8005350 <HAL_RCC_GetPCLK3Freq>
 800742e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007430:	e3f4      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007432:	4b75      	ldr	r3, [pc, #468]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800743a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743e:	d102      	bne.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8007440:	4b72      	ldr	r3, [pc, #456]	; (800760c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8007442:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007444:	e3ea      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800744a:	e3e7      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800744c:	f7fd fe36 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 8007450:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007452:	e3e3      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007454:	4b6c      	ldr	r3, [pc, #432]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0320 	and.w	r3, r3, #32
 800745c:	2b20      	cmp	r3, #32
 800745e:	d117      	bne.n	8007490 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007460:	4b69      	ldr	r3, [pc, #420]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007468:	2b00      	cmp	r3, #0
 800746a:	d005      	beq.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 800746c:	4b66      	ldr	r3, [pc, #408]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	0e1b      	lsrs	r3, r3, #24
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	e006      	b.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8007478:	4b63      	ldr	r3, [pc, #396]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800747a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800747e:	041b      	lsls	r3, r3, #16
 8007480:	0e1b      	lsrs	r3, r3, #24
 8007482:	f003 030f 	and.w	r3, r3, #15
 8007486:	4a62      	ldr	r2, [pc, #392]	; (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8007488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800748c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800748e:	e3c5      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007490:	2300      	movs	r3, #0
 8007492:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007494:	e3c2      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800749a:	e3bf      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800749c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074a0:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80074a4:	430b      	orrs	r3, r1
 80074a6:	d147      	bne.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80074a8:	4b57      	ldr	r3, [pc, #348]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80074b2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d103      	bne.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80074ba:	f7fd ff21 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 80074be:	6378      	str	r0, [r7, #52]	; 0x34
 80074c0:	e3ac      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074c8:	d103      	bne.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80074ca:	f7fd fdf7 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 80074ce:	6378      	str	r0, [r7, #52]	; 0x34
 80074d0:	e3a4      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80074d2:	4b4d      	ldr	r3, [pc, #308]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074de:	d106      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074e6:	d102      	bne.n	80074ee <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 80074e8:	4b48      	ldr	r3, [pc, #288]	; (800760c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80074ea:	637b      	str	r3, [r7, #52]	; 0x34
 80074ec:	e396      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80074ee:	4b46      	ldr	r3, [pc, #280]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0320 	and.w	r3, r3, #32
 80074f6:	2b20      	cmp	r3, #32
 80074f8:	d11b      	bne.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007500:	d117      	bne.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007502:	4b41      	ldr	r3, [pc, #260]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 800750e:	4b3e      	ldr	r3, [pc, #248]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	0e1b      	lsrs	r3, r3, #24
 8007514:	f003 030f 	and.w	r3, r3, #15
 8007518:	e006      	b.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 800751a:	4b3b      	ldr	r3, [pc, #236]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800751c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007520:	041b      	lsls	r3, r3, #16
 8007522:	0e1b      	lsrs	r3, r3, #24
 8007524:	f003 030f 	and.w	r3, r3, #15
 8007528:	4a39      	ldr	r2, [pc, #228]	; (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800752a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800752e:	637b      	str	r3, [r7, #52]	; 0x34
 8007530:	e374      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	637b      	str	r3, [r7, #52]	; 0x34
 8007536:	e371      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800753c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007540:	430b      	orrs	r3, r1
 8007542:	d16a      	bne.n	800761a <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007544:	4b30      	ldr	r3, [pc, #192]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007546:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800754a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800754e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	2b00      	cmp	r3, #0
 8007554:	d120      	bne.n	8007598 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007556:	4b2c      	ldr	r3, [pc, #176]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0320 	and.w	r3, r3, #32
 800755e:	2b20      	cmp	r3, #32
 8007560:	d117      	bne.n	8007592 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007562:	4b29      	ldr	r3, [pc, #164]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 800756e:	4b26      	ldr	r3, [pc, #152]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	0e1b      	lsrs	r3, r3, #24
 8007574:	f003 030f 	and.w	r3, r3, #15
 8007578:	e006      	b.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 800757a:	4b23      	ldr	r3, [pc, #140]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800757c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007580:	041b      	lsls	r3, r3, #16
 8007582:	0e1b      	lsrs	r3, r3, #24
 8007584:	f003 030f 	and.w	r3, r3, #15
 8007588:	4a21      	ldr	r2, [pc, #132]	; (8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 800758a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800758e:	637b      	str	r3, [r7, #52]	; 0x34
 8007590:	e344      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	637b      	str	r3, [r7, #52]	; 0x34
 8007596:	e341      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007598:	4b1b      	ldr	r3, [pc, #108]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 800759a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800759e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075a6:	d112      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 80075a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ae:	d10e      	bne.n	80075ce <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075b0:	4b15      	ldr	r3, [pc, #84]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075be:	d102      	bne.n	80075c6 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 80075c0:	23fa      	movs	r3, #250	; 0xfa
 80075c2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075c4:	e32a      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80075c6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80075ca:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80075cc:	e326      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80075ce:	4b0e      	ldr	r3, [pc, #56]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075da:	d106      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075e2:	d102      	bne.n	80075ea <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 80075e4:	4b09      	ldr	r3, [pc, #36]	; (800760c <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 80075e6:	637b      	str	r3, [r7, #52]	; 0x34
 80075e8:	e318      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80075ea:	4b07      	ldr	r3, [pc, #28]	; (8007608 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 80075ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d10d      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 80075f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075fe:	d109      	bne.n	8007614 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8007600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007604:	637b      	str	r3, [r7, #52]	; 0x34
 8007606:	e309      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007608:	46020c00 	.word	0x46020c00
 800760c:	00f42400 	.word	0x00f42400
 8007610:	08009d30 	.word	0x08009d30
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
 8007618:	e300      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800761a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800761e:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007622:	430b      	orrs	r3, r1
 8007624:	d164      	bne.n	80076f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007626:	4ba2      	ldr	r3, [pc, #648]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007628:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800762c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007630:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	2b00      	cmp	r3, #0
 8007636:	d120      	bne.n	800767a <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007638:	4b9d      	ldr	r3, [pc, #628]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b20      	cmp	r3, #32
 8007642:	d117      	bne.n	8007674 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007644:	4b9a      	ldr	r3, [pc, #616]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d005      	beq.n	800765c <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8007650:	4b97      	ldr	r3, [pc, #604]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	0e1b      	lsrs	r3, r3, #24
 8007656:	f003 030f 	and.w	r3, r3, #15
 800765a:	e006      	b.n	800766a <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 800765c:	4b94      	ldr	r3, [pc, #592]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800765e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007662:	041b      	lsls	r3, r3, #16
 8007664:	0e1b      	lsrs	r3, r3, #24
 8007666:	f003 030f 	and.w	r3, r3, #15
 800766a:	4a92      	ldr	r2, [pc, #584]	; (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800766c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007670:	637b      	str	r3, [r7, #52]	; 0x34
 8007672:	e2d3      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	637b      	str	r3, [r7, #52]	; 0x34
 8007678:	e2d0      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800767a:	4b8d      	ldr	r3, [pc, #564]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800767c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007684:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007688:	d112      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007690:	d10e      	bne.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007692:	4b87      	ldr	r3, [pc, #540]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007694:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800769c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076a0:	d102      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 80076a2:	23fa      	movs	r3, #250	; 0xfa
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076a6:	e2b9      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80076a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076ae:	e2b5      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80076b0:	4b7f      	ldr	r3, [pc, #508]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076bc:	d106      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 80076be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076c4:	d102      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 80076c6:	4b7c      	ldr	r3, [pc, #496]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80076c8:	637b      	str	r3, [r7, #52]	; 0x34
 80076ca:	e2a7      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80076cc:	4b78      	ldr	r3, [pc, #480]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076d2:	f003 0302 	and.w	r3, r3, #2
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d107      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 80076da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80076e0:	d103      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 80076e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076e6:	637b      	str	r3, [r7, #52]	; 0x34
 80076e8:	e298      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	637b      	str	r3, [r7, #52]	; 0x34
 80076ee:	e295      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80076f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076f4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80076f8:	430b      	orrs	r3, r1
 80076fa:	d147      	bne.n	800778c <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80076fc:	4b6c      	ldr	r3, [pc, #432]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80076fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007702:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007706:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	2b00      	cmp	r3, #0
 800770c:	d103      	bne.n	8007716 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800770e:	f7fd fdf7 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 8007712:	6378      	str	r0, [r7, #52]	; 0x34
 8007714:	e282      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007716:	4b66      	ldr	r3, [pc, #408]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800771c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007724:	d112      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8007726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007728:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800772c:	d10e      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800772e:	4b60      	ldr	r3, [pc, #384]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007730:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800773c:	d102      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 800773e:	23fa      	movs	r3, #250	; 0xfa
 8007740:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007742:	e26b      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007744:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007748:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800774a:	e267      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800774c:	4b58      	ldr	r3, [pc, #352]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007754:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007758:	d106      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007760:	d102      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8007762:	4b55      	ldr	r3, [pc, #340]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
 8007766:	e259      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007768:	4b51      	ldr	r3, [pc, #324]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800776a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800776e:	f003 0302 	and.w	r3, r3, #2
 8007772:	2b02      	cmp	r3, #2
 8007774:	d107      	bne.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800777c:	d103      	bne.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 800777e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007782:	637b      	str	r3, [r7, #52]	; 0x34
 8007784:	e24a      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	637b      	str	r3, [r7, #52]	; 0x34
 800778a:	e247      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800778c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007790:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007794:	430b      	orrs	r3, r1
 8007796:	d12d      	bne.n	80077f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007798:	4b45      	ldr	r3, [pc, #276]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800779a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800779e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80077a2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80077a4:	4b42      	ldr	r3, [pc, #264]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077b0:	d105      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80077b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d102      	bne.n	80077be <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 80077b8:	4b3f      	ldr	r3, [pc, #252]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 80077ba:	637b      	str	r3, [r7, #52]	; 0x34
 80077bc:	e22e      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077c4:	d107      	bne.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077ca:	4618      	mov	r0, r3
 80077cc:	f7fe fc1a 	bl	8006004 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	637b      	str	r3, [r7, #52]	; 0x34
 80077d4:	e222      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80077d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077dc:	d107      	bne.n	80077ee <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077de:	f107 0318 	add.w	r3, r7, #24
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fd76 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34
 80077ec:	e216      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	637b      	str	r3, [r7, #52]	; 0x34
 80077f2:	e213      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80077f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80077fc:	430b      	orrs	r3, r1
 80077fe:	d15d      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007800:	4b2b      	ldr	r3, [pc, #172]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007806:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800780a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800780c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007812:	d028      	beq.n	8007866 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800781a:	d845      	bhi.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007822:	d013      	beq.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800782a:	d83d      	bhi.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 800782c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782e:	2b00      	cmp	r3, #0
 8007830:	d004      	beq.n	800783c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8007832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007834:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007838:	d004      	beq.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800783a:	e035      	b.n	80078a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800783c:	f7fd fd74 	bl	8005328 <HAL_RCC_GetPCLK2Freq>
 8007840:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007842:	e1eb      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007844:	f7fd fc3a 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 8007848:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800784a:	e1e7      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800784c:	4b18      	ldr	r3, [pc, #96]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007858:	d102      	bne.n	8007860 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800785a:	4b17      	ldr	r3, [pc, #92]	; (80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800785e:	e1dd      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007864:	e1da      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007866:	4b12      	ldr	r3, [pc, #72]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0320 	and.w	r3, r3, #32
 800786e:	2b20      	cmp	r3, #32
 8007870:	d117      	bne.n	80078a2 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007872:	4b0f      	ldr	r3, [pc, #60]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800787a:	2b00      	cmp	r3, #0
 800787c:	d005      	beq.n	800788a <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800787e:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	0e1b      	lsrs	r3, r3, #24
 8007884:	f003 030f 	and.w	r3, r3, #15
 8007888:	e006      	b.n	8007898 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 800788a:	4b09      	ldr	r3, [pc, #36]	; (80078b0 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800788c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007890:	041b      	lsls	r3, r3, #16
 8007892:	0e1b      	lsrs	r3, r3, #24
 8007894:	f003 030f 	and.w	r3, r3, #15
 8007898:	4a06      	ldr	r2, [pc, #24]	; (80078b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800789a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800789e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078a0:	e1bc      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078a6:	e1b9      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80078a8:	2300      	movs	r3, #0
 80078aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078ac:	e1b6      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80078ae:	bf00      	nop
 80078b0:	46020c00 	.word	0x46020c00
 80078b4:	08009d30 	.word	0x08009d30
 80078b8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80078bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078c0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80078c4:	430b      	orrs	r3, r1
 80078c6:	d156      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80078c8:	4ba5      	ldr	r3, [pc, #660]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80078ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80078d2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80078d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078da:	d028      	beq.n	800792e <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078e2:	d845      	bhi.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078ea:	d013      	beq.n	8007914 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 80078ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078f2:	d83d      	bhi.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d004      	beq.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007900:	d004      	beq.n	800790c <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 8007902:	e035      	b.n	8007970 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8007904:	f7fd fcfc 	bl	8005300 <HAL_RCC_GetPCLK1Freq>
 8007908:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800790a:	e187      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800790c:	f7fd fbd6 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 8007910:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007912:	e183      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007914:	4b92      	ldr	r3, [pc, #584]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800791c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007920:	d102      	bne.n	8007928 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 8007922:	4b90      	ldr	r3, [pc, #576]	; (8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007924:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007926:	e179      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800792c:	e176      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800792e:	4b8c      	ldr	r3, [pc, #560]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b20      	cmp	r3, #32
 8007938:	d117      	bne.n	800796a <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800793a:	4b89      	ldr	r3, [pc, #548]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007942:	2b00      	cmp	r3, #0
 8007944:	d005      	beq.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 8007946:	4b86      	ldr	r3, [pc, #536]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	0e1b      	lsrs	r3, r3, #24
 800794c:	f003 030f 	and.w	r3, r3, #15
 8007950:	e006      	b.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 8007952:	4b83      	ldr	r3, [pc, #524]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007958:	041b      	lsls	r3, r3, #16
 800795a:	0e1b      	lsrs	r3, r3, #24
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	4a81      	ldr	r2, [pc, #516]	; (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007966:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007968:	e158      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800796a:	2300      	movs	r3, #0
 800796c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800796e:	e155      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007974:	e152      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007976:	e9d7 2300 	ldrd	r2, r3, [r7]
 800797a:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800797e:	430b      	orrs	r3, r1
 8007980:	d177      	bne.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007982:	4b77      	ldr	r3, [pc, #476]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007984:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007988:	f003 0318 	and.w	r3, r3, #24
 800798c:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	2b18      	cmp	r3, #24
 8007992:	d86b      	bhi.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 8007994:	a201      	add	r2, pc, #4	; (adr r2, 800799c <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 8007996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799a:	bf00      	nop
 800799c:	08007a01 	.word	0x08007a01
 80079a0:	08007a6d 	.word	0x08007a6d
 80079a4:	08007a6d 	.word	0x08007a6d
 80079a8:	08007a6d 	.word	0x08007a6d
 80079ac:	08007a6d 	.word	0x08007a6d
 80079b0:	08007a6d 	.word	0x08007a6d
 80079b4:	08007a6d 	.word	0x08007a6d
 80079b8:	08007a6d 	.word	0x08007a6d
 80079bc:	08007a09 	.word	0x08007a09
 80079c0:	08007a6d 	.word	0x08007a6d
 80079c4:	08007a6d 	.word	0x08007a6d
 80079c8:	08007a6d 	.word	0x08007a6d
 80079cc:	08007a6d 	.word	0x08007a6d
 80079d0:	08007a6d 	.word	0x08007a6d
 80079d4:	08007a6d 	.word	0x08007a6d
 80079d8:	08007a6d 	.word	0x08007a6d
 80079dc:	08007a11 	.word	0x08007a11
 80079e0:	08007a6d 	.word	0x08007a6d
 80079e4:	08007a6d 	.word	0x08007a6d
 80079e8:	08007a6d 	.word	0x08007a6d
 80079ec:	08007a6d 	.word	0x08007a6d
 80079f0:	08007a6d 	.word	0x08007a6d
 80079f4:	08007a6d 	.word	0x08007a6d
 80079f8:	08007a6d 	.word	0x08007a6d
 80079fc:	08007a2b 	.word	0x08007a2b
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007a00:	f7fd fca6 	bl	8005350 <HAL_RCC_GetPCLK3Freq>
 8007a04:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a06:	e109      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007a08:	f7fd fb58 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 8007a0c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a0e:	e105      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a10:	4b53      	ldr	r3, [pc, #332]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a1c:	d102      	bne.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 8007a1e:	4b51      	ldr	r3, [pc, #324]	; (8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a22:	e0fb      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a28:	e0f8      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007a2a:	4b4d      	ldr	r3, [pc, #308]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	d117      	bne.n	8007a66 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a36:	4b4a      	ldr	r3, [pc, #296]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d005      	beq.n	8007a4e <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 8007a42:	4b47      	ldr	r3, [pc, #284]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	0e1b      	lsrs	r3, r3, #24
 8007a48:	f003 030f 	and.w	r3, r3, #15
 8007a4c:	e006      	b.n	8007a5c <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 8007a4e:	4b44      	ldr	r3, [pc, #272]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a54:	041b      	lsls	r3, r3, #16
 8007a56:	0e1b      	lsrs	r3, r3, #24
 8007a58:	f003 030f 	and.w	r3, r3, #15
 8007a5c:	4a42      	ldr	r2, [pc, #264]	; (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a62:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a64:	e0da      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007a66:	2300      	movs	r3, #0
 8007a68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a6a:	e0d7      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a70:	e0d4      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007a72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a76:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8007a7a:	430b      	orrs	r3, r1
 8007a7c:	d155      	bne.n	8007b2a <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007a7e:	4b38      	ldr	r3, [pc, #224]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007a80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a84:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007a88:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a90:	d013      	beq.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007a98:	d844      	bhi.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aa0:	d013      	beq.n	8007aca <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007aa8:	d83c      	bhi.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8007aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d014      	beq.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 8007ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ab6:	d014      	beq.n	8007ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8007ab8:	e034      	b.n	8007b24 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007aba:	f107 0318 	add.w	r3, r7, #24
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe fc08 	bl	80062d4 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ac8:	e0a8      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7fe fa98 	bl	8006004 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ad6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ad8:	e0a0      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007ada:	f7fd faef 	bl	80050bc <HAL_RCC_GetSysClockFreq>
 8007ade:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007ae0:	e09c      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8007ae2:	4b1f      	ldr	r3, [pc, #124]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 0320 	and.w	r3, r3, #32
 8007aea:	2b20      	cmp	r3, #32
 8007aec:	d117      	bne.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007aee:	4b1c      	ldr	r3, [pc, #112]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d005      	beq.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8007afa:	4b19      	ldr	r3, [pc, #100]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	0e1b      	lsrs	r3, r3, #24
 8007b00:	f003 030f 	and.w	r3, r3, #15
 8007b04:	e006      	b.n	8007b14 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8007b06:	4b16      	ldr	r3, [pc, #88]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b0c:	041b      	lsls	r3, r3, #16
 8007b0e:	0e1b      	lsrs	r3, r3, #24
 8007b10:	f003 030f 	and.w	r3, r3, #15
 8007b14:	4a14      	ldr	r2, [pc, #80]	; (8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8007b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b1a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007b1c:	e07e      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b22:	e07b      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b28:	e078      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b2e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8007b32:	430b      	orrs	r3, r1
 8007b34:	d138      	bne.n	8007ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007b36:	4b0a      	ldr	r3, [pc, #40]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b40:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007b42:	4b07      	ldr	r3, [pc, #28]	; (8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8007b44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d10d      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 8007b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10a      	bne.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 8007b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b5c:	e05e      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8007b5e:	bf00      	nop
 8007b60:	46020c00 	.word	0x46020c00
 8007b64:	00f42400 	.word	0x00f42400
 8007b68:	08009d30 	.word	0x08009d30
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007b6c:	4b2e      	ldr	r3, [pc, #184]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007b6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b7a:	d112      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 8007b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b82:	d10e      	bne.n	8007ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b84:	4b28      	ldr	r3, [pc, #160]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b92:	d102      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 8007b94:	23fa      	movs	r3, #250	; 0xfa
 8007b96:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007b98:	e040      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8007b9a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007b9e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007ba0:	e03c      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba6:	e039      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8007ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bac:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	d131      	bne.n	8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8007bb4:	4b1c      	ldr	r3, [pc, #112]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007bb6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007bba:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007bbe:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 8007bc0:	4b19      	ldr	r3, [pc, #100]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bcc:	d105      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d102      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8007bd4:	4b15      	ldr	r3, [pc, #84]	; (8007c2c <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8007bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd8:	e020      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8007bda:	4b13      	ldr	r3, [pc, #76]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007be6:	d106      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bee:	d102      	bne.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007bf0:	4b0f      	ldr	r3, [pc, #60]	; (8007c30 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 8007bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8007bf4:	e012      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c02:	d106      	bne.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8007c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c0a:	d102      	bne.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8007c0c:	4b09      	ldr	r3, [pc, #36]	; (8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 8007c0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c10:	e004      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	637b      	str	r3, [r7, #52]	; 0x34
 8007c16:	e001      	b.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8007c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3738      	adds	r7, #56	; 0x38
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	46020c00 	.word	0x46020c00
 8007c2c:	02dc6c00 	.word	0x02dc6c00
 8007c30:	016e3600 	.word	0x016e3600
 8007c34:	00f42400 	.word	0x00f42400

08007c38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007c40:	4b47      	ldr	r3, [pc, #284]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a46      	ldr	r2, [pc, #280]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007c46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c4a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c4c:	f7f9 fd42 	bl	80016d4 <HAL_GetTick>
 8007c50:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c52:	e008      	b.n	8007c66 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c54:	f7f9 fd3e 	bl	80016d4 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d901      	bls.n	8007c66 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007c62:	2303      	movs	r3, #3
 8007c64:	e077      	b.n	8007d56 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c66:	4b3e      	ldr	r3, [pc, #248]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1f0      	bne.n	8007c54 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007c72:	4b3b      	ldr	r3, [pc, #236]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c76:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007c7a:	f023 0303 	bic.w	r3, r3, #3
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6811      	ldr	r1, [r2, #0]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	6852      	ldr	r2, [r2, #4]
 8007c86:	3a01      	subs	r2, #1
 8007c88:	0212      	lsls	r2, r2, #8
 8007c8a:	430a      	orrs	r2, r1
 8007c8c:	4934      	ldr	r1, [pc, #208]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007c92:	4b33      	ldr	r3, [pc, #204]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007c94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c96:	4b33      	ldr	r3, [pc, #204]	; (8007d64 <RCCEx_PLL2_Config+0x12c>)
 8007c98:	4013      	ands	r3, r2
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	6892      	ldr	r2, [r2, #8]
 8007c9e:	3a01      	subs	r2, #1
 8007ca0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	68d2      	ldr	r2, [r2, #12]
 8007ca8:	3a01      	subs	r2, #1
 8007caa:	0252      	lsls	r2, r2, #9
 8007cac:	b292      	uxth	r2, r2
 8007cae:	4311      	orrs	r1, r2
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	6912      	ldr	r2, [r2, #16]
 8007cb4:	3a01      	subs	r2, #1
 8007cb6:	0412      	lsls	r2, r2, #16
 8007cb8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007cbc:	4311      	orrs	r1, r2
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	6952      	ldr	r2, [r2, #20]
 8007cc2:	3a01      	subs	r2, #1
 8007cc4:	0612      	lsls	r2, r2, #24
 8007cc6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	4924      	ldr	r1, [pc, #144]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007cd2:	4b23      	ldr	r3, [pc, #140]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd6:	f023 020c 	bic.w	r2, r3, #12
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	4920      	ldr	r1, [pc, #128]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007ce4:	4b1e      	ldr	r3, [pc, #120]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6a1b      	ldr	r3, [r3, #32]
 8007cec:	491c      	ldr	r1, [pc, #112]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007cf2:	4b1b      	ldr	r3, [pc, #108]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf6:	4a1a      	ldr	r2, [pc, #104]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007cf8:	f023 0310 	bic.w	r3, r3, #16
 8007cfc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cfe:	4b18      	ldr	r3, [pc, #96]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	69d2      	ldr	r2, [r2, #28]
 8007d0e:	00d2      	lsls	r2, r2, #3
 8007d10:	4913      	ldr	r1, [pc, #76]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007d12:	4313      	orrs	r3, r2
 8007d14:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007d16:	4b12      	ldr	r3, [pc, #72]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1a:	4a11      	ldr	r2, [pc, #68]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007d1c:	f043 0310 	orr.w	r3, r3, #16
 8007d20:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007d22:	4b0f      	ldr	r3, [pc, #60]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a0e      	ldr	r2, [pc, #56]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007d28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d2c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d2e:	f7f9 fcd1 	bl	80016d4 <HAL_GetTick>
 8007d32:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d34:	e008      	b.n	8007d48 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d36:	f7f9 fccd 	bl	80016d4 <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d901      	bls.n	8007d48 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e006      	b.n	8007d56 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <RCCEx_PLL2_Config+0x128>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0f0      	beq.n	8007d36 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0

}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	46020c00 	.word	0x46020c00
 8007d64:	80800000 	.word	0x80800000

08007d68 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b084      	sub	sp, #16
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007d70:	4b47      	ldr	r3, [pc, #284]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a46      	ldr	r2, [pc, #280]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007d76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d7a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d7c:	f7f9 fcaa 	bl	80016d4 <HAL_GetTick>
 8007d80:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d82:	e008      	b.n	8007d96 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d84:	f7f9 fca6 	bl	80016d4 <HAL_GetTick>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	1ad3      	subs	r3, r2, r3
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d901      	bls.n	8007d96 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e077      	b.n	8007e86 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d96:	4b3e      	ldr	r3, [pc, #248]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1f0      	bne.n	8007d84 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007da2:	4b3b      	ldr	r3, [pc, #236]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007daa:	f023 0303 	bic.w	r3, r3, #3
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	6811      	ldr	r1, [r2, #0]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	6852      	ldr	r2, [r2, #4]
 8007db6:	3a01      	subs	r2, #1
 8007db8:	0212      	lsls	r2, r2, #8
 8007dba:	430a      	orrs	r2, r1
 8007dbc:	4934      	ldr	r1, [pc, #208]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	630b      	str	r3, [r1, #48]	; 0x30
 8007dc2:	4b33      	ldr	r3, [pc, #204]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dc6:	4b33      	ldr	r3, [pc, #204]	; (8007e94 <RCCEx_PLL3_Config+0x12c>)
 8007dc8:	4013      	ands	r3, r2
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	6892      	ldr	r2, [r2, #8]
 8007dce:	3a01      	subs	r2, #1
 8007dd0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	68d2      	ldr	r2, [r2, #12]
 8007dd8:	3a01      	subs	r2, #1
 8007dda:	0252      	lsls	r2, r2, #9
 8007ddc:	b292      	uxth	r2, r2
 8007dde:	4311      	orrs	r1, r2
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6912      	ldr	r2, [r2, #16]
 8007de4:	3a01      	subs	r2, #1
 8007de6:	0412      	lsls	r2, r2, #16
 8007de8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007dec:	4311      	orrs	r1, r2
 8007dee:	687a      	ldr	r2, [r7, #4]
 8007df0:	6952      	ldr	r2, [r2, #20]
 8007df2:	3a01      	subs	r2, #1
 8007df4:	0612      	lsls	r2, r2, #24
 8007df6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007dfa:	430a      	orrs	r2, r1
 8007dfc:	4924      	ldr	r1, [pc, #144]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007e02:	4b23      	ldr	r3, [pc, #140]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e06:	f023 020c 	bic.w	r2, r3, #12
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	4920      	ldr	r1, [pc, #128]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007e10:	4313      	orrs	r3, r2
 8007e12:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007e14:	4b1e      	ldr	r3, [pc, #120]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	491c      	ldr	r1, [pc, #112]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007e22:	4b1b      	ldr	r3, [pc, #108]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e26:	4a1a      	ldr	r2, [pc, #104]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007e28:	f023 0310 	bic.w	r3, r3, #16
 8007e2c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e2e:	4b18      	ldr	r3, [pc, #96]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e36:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	69d2      	ldr	r2, [r2, #28]
 8007e3e:	00d2      	lsls	r2, r2, #3
 8007e40:	4913      	ldr	r1, [pc, #76]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007e46:	4b12      	ldr	r3, [pc, #72]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4a:	4a11      	ldr	r2, [pc, #68]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007e4c:	f043 0310 	orr.w	r3, r3, #16
 8007e50:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007e52:	4b0f      	ldr	r3, [pc, #60]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a0e      	ldr	r2, [pc, #56]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e5c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e5e:	f7f9 fc39 	bl	80016d4 <HAL_GetTick>
 8007e62:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e64:	e008      	b.n	8007e78 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e66:	f7f9 fc35 	bl	80016d4 <HAL_GetTick>
 8007e6a:	4602      	mov	r2, r0
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	d901      	bls.n	8007e78 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e006      	b.n	8007e86 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e78:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <RCCEx_PLL3_Config+0x128>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0f0      	beq.n	8007e66 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	46020c00 	.word	0x46020c00
 8007e94:	80800000 	.word	0x80800000

08007e98 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d071      	beq.n	8007f8e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d106      	bne.n	8007ec4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f7f9 f926 	bl	8001110 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2202      	movs	r2, #2
 8007ec8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007ecc:	4b32      	ldr	r3, [pc, #200]	; (8007f98 <HAL_RTC_Init+0x100>)
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f003 0310 	and.w	r3, r3, #16
 8007ed4:	2b10      	cmp	r3, #16
 8007ed6:	d051      	beq.n	8007f7c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ed8:	4b2f      	ldr	r3, [pc, #188]	; (8007f98 <HAL_RTC_Init+0x100>)
 8007eda:	22ca      	movs	r2, #202	; 0xca
 8007edc:	625a      	str	r2, [r3, #36]	; 0x24
 8007ede:	4b2e      	ldr	r3, [pc, #184]	; (8007f98 <HAL_RTC_Init+0x100>)
 8007ee0:	2253      	movs	r2, #83	; 0x53
 8007ee2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f9ad 	bl	8008244 <RTC_EnterInitMode>
 8007eea:	4603      	mov	r3, r0
 8007eec:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d13f      	bne.n	8007f74 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007ef4:	4b28      	ldr	r3, [pc, #160]	; (8007f98 <HAL_RTC_Init+0x100>)
 8007ef6:	699b      	ldr	r3, [r3, #24]
 8007ef8:	4a27      	ldr	r2, [pc, #156]	; (8007f98 <HAL_RTC_Init+0x100>)
 8007efa:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8007efe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f02:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007f04:	4b24      	ldr	r3, [pc, #144]	; (8007f98 <HAL_RTC_Init+0x100>)
 8007f06:	699a      	ldr	r2, [r3, #24]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6859      	ldr	r1, [r3, #4]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	4319      	orrs	r1, r3
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	699b      	ldr	r3, [r3, #24]
 8007f16:	430b      	orrs	r3, r1
 8007f18:	491f      	ldr	r1, [pc, #124]	; (8007f98 <HAL_RTC_Init+0x100>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	041b      	lsls	r3, r3, #16
 8007f28:	491b      	ldr	r1, [pc, #108]	; (8007f98 <HAL_RTC_Init+0x100>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8007f2e:	4b1a      	ldr	r3, [pc, #104]	; (8007f98 <HAL_RTC_Init+0x100>)
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	430b      	orrs	r3, r1
 8007f40:	4915      	ldr	r1, [pc, #84]	; (8007f98 <HAL_RTC_Init+0x100>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 f9b8 	bl	80082bc <RTC_ExitInitMode>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8007f50:	7bfb      	ldrb	r3, [r7, #15]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10e      	bne.n	8007f74 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8007f56:	4b10      	ldr	r3, [pc, #64]	; (8007f98 <HAL_RTC_Init+0x100>)
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a19      	ldr	r1, [r3, #32]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	69db      	ldr	r3, [r3, #28]
 8007f66:	4319      	orrs	r1, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	695b      	ldr	r3, [r3, #20]
 8007f6c:	430b      	orrs	r3, r1
 8007f6e:	490a      	ldr	r1, [pc, #40]	; (8007f98 <HAL_RTC_Init+0x100>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f74:	4b08      	ldr	r3, [pc, #32]	; (8007f98 <HAL_RTC_Init+0x100>)
 8007f76:	22ff      	movs	r2, #255	; 0xff
 8007f78:	625a      	str	r2, [r3, #36]	; 0x24
 8007f7a:	e001      	b.n	8007f80 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007f80:	7bfb      	ldrb	r3, [r7, #15]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d103      	bne.n	8007f8e <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}
 8007f98:	46007800 	.word	0x46007800

08007f9c <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007f9c:	b590      	push	{r4, r7, lr}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif /* USE_FULL_ASSERT */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007fae:	2b01      	cmp	r3, #1
 8007fb0:	d101      	bne.n	8007fb6 <HAL_RTC_SetTime+0x1a>
 8007fb2:	2302      	movs	r3, #2
 8007fb4:	e088      	b.n	80080c8 <HAL_RTC_SetTime+0x12c>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2201      	movs	r2, #1
 8007fba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2202      	movs	r2, #2
 8007fc2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007fc6:	4b42      	ldr	r3, [pc, #264]	; (80080d0 <HAL_RTC_SetTime+0x134>)
 8007fc8:	22ca      	movs	r2, #202	; 0xca
 8007fca:	625a      	str	r2, [r3, #36]	; 0x24
 8007fcc:	4b40      	ldr	r3, [pc, #256]	; (80080d0 <HAL_RTC_SetTime+0x134>)
 8007fce:	2253      	movs	r2, #83	; 0x53
 8007fd0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	f000 f936 	bl	8008244 <RTC_EnterInitMode>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007fdc:	7cfb      	ldrb	r3, [r7, #19]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d163      	bne.n	80080aa <HAL_RTC_SetTime+0x10e>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8007fe2:	4b3b      	ldr	r3, [pc, #236]	; (80080d0 <HAL_RTC_SetTime+0x134>)
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fee:	d057      	beq.n	80080a0 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d125      	bne.n	8008042 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007ff6:	4b36      	ldr	r3, [pc, #216]	; (80080d0 <HAL_RTC_SetTime+0x134>)
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d102      	bne.n	8008008 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	2200      	movs	r2, #0
 8008006:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	4618      	mov	r0, r3
 800800e:	f000 f993 	bl	8008338 <RTC_ByteToBcd2>
 8008012:	4603      	mov	r3, r0
 8008014:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	785b      	ldrb	r3, [r3, #1]
 800801a:	4618      	mov	r0, r3
 800801c:	f000 f98c 	bl	8008338 <RTC_ByteToBcd2>
 8008020:	4603      	mov	r3, r0
 8008022:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008024:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	789b      	ldrb	r3, [r3, #2]
 800802a:	4618      	mov	r0, r3
 800802c:	f000 f984 	bl	8008338 <RTC_ByteToBcd2>
 8008030:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008032:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	78db      	ldrb	r3, [r3, #3]
 800803a:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800803c:	4313      	orrs	r3, r2
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	e017      	b.n	8008072 <HAL_RTC_SetTime+0xd6>
      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8008042:	4b23      	ldr	r3, [pc, #140]	; (80080d0 <HAL_RTC_SetTime+0x134>)
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804a:	2b00      	cmp	r3, #0
 800804c:	d102      	bne.n	8008054 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	2200      	movs	r2, #0
 8008052:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	785b      	ldrb	r3, [r3, #1]
 800805e:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008060:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008066:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	78db      	ldrb	r3, [r3, #3]
 800806c:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800806e:	4313      	orrs	r3, r2
 8008070:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8008072:	4a17      	ldr	r2, [pc, #92]	; (80080d0 <HAL_RTC_SetTime+0x134>)
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800807a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800807e:	6013      	str	r3, [r2, #0]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8008080:	4b13      	ldr	r3, [pc, #76]	; (80080d0 <HAL_RTC_SetTime+0x134>)
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	4a12      	ldr	r2, [pc, #72]	; (80080d0 <HAL_RTC_SetTime+0x134>)
 8008086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800808a:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800808c:	4b10      	ldr	r3, [pc, #64]	; (80080d0 <HAL_RTC_SetTime+0x134>)
 800808e:	699a      	ldr	r2, [r3, #24]
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	68d9      	ldr	r1, [r3, #12]
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	430b      	orrs	r3, r1
 800809a:	490d      	ldr	r1, [pc, #52]	; (80080d0 <HAL_RTC_SetTime+0x134>)
 800809c:	4313      	orrs	r3, r2
 800809e:	618b      	str	r3, [r1, #24]
    }

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 f90b 	bl	80082bc <RTC_ExitInitMode>
 80080a6:	4603      	mov	r3, r0
 80080a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080aa:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <HAL_RTC_SetTime+0x134>)
 80080ac:	22ff      	movs	r2, #255	; 0xff
 80080ae:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80080b0:	7cfb      	ldrb	r3, [r7, #19]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d103      	bne.n	80080be <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80080c6:	7cfb      	ldrb	r3, [r7, #19]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	371c      	adds	r7, #28
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd90      	pop	{r4, r7, pc}
 80080d0:	46007800 	.word	0x46007800

080080d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80080d4:	b590      	push	{r4, r7, lr}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	60f8      	str	r0, [r7, #12]
 80080dc:	60b9      	str	r1, [r7, #8]
 80080de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d101      	bne.n	80080ee <HAL_RTC_SetDate+0x1a>
 80080ea:	2302      	movs	r3, #2
 80080ec:	e071      	b.n	80081d2 <HAL_RTC_SetDate+0xfe>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2202      	movs	r2, #2
 80080fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10e      	bne.n	8008122 <HAL_RTC_SetDate+0x4e>
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	785b      	ldrb	r3, [r3, #1]
 8008108:	f003 0310 	and.w	r3, r3, #16
 800810c:	2b00      	cmp	r3, #0
 800810e:	d008      	beq.n	8008122 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	785b      	ldrb	r3, [r3, #1]
 8008114:	f023 0310 	bic.w	r3, r3, #16
 8008118:	b2db      	uxtb	r3, r3
 800811a:	330a      	adds	r3, #10
 800811c:	b2da      	uxtb	r2, r3
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d11c      	bne.n	8008162 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	78db      	ldrb	r3, [r3, #3]
 800812c:	4618      	mov	r0, r3
 800812e:	f000 f903 	bl	8008338 <RTC_ByteToBcd2>
 8008132:	4603      	mov	r3, r0
 8008134:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	785b      	ldrb	r3, [r3, #1]
 800813a:	4618      	mov	r0, r3
 800813c:	f000 f8fc 	bl	8008338 <RTC_ByteToBcd2>
 8008140:	4603      	mov	r3, r0
 8008142:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8008144:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	789b      	ldrb	r3, [r3, #2]
 800814a:	4618      	mov	r0, r3
 800814c:	f000 f8f4 	bl	8008338 <RTC_ByteToBcd2>
 8008150:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008152:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800815c:	4313      	orrs	r3, r2
 800815e:	617b      	str	r3, [r7, #20]
 8008160:	e00e      	b.n	8008180 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	78db      	ldrb	r3, [r3, #3]
 8008166:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	785b      	ldrb	r3, [r3, #1]
 800816c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800816e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8008170:	68ba      	ldr	r2, [r7, #8]
 8008172:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8008174:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	781b      	ldrb	r3, [r3, #0]
 800817a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800817c:	4313      	orrs	r3, r2
 800817e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008180:	4b16      	ldr	r3, [pc, #88]	; (80081dc <HAL_RTC_SetDate+0x108>)
 8008182:	22ca      	movs	r2, #202	; 0xca
 8008184:	625a      	str	r2, [r3, #36]	; 0x24
 8008186:	4b15      	ldr	r3, [pc, #84]	; (80081dc <HAL_RTC_SetDate+0x108>)
 8008188:	2253      	movs	r2, #83	; 0x53
 800818a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 f859 	bl	8008244 <RTC_EnterInitMode>
 8008192:	4603      	mov	r3, r0
 8008194:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008196:	7cfb      	ldrb	r3, [r7, #19]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10b      	bne.n	80081b4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800819c:	4a0f      	ldr	r2, [pc, #60]	; (80081dc <HAL_RTC_SetDate+0x108>)
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80081a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80081a8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	f000 f886 	bl	80082bc <RTC_ExitInitMode>
 80081b0:	4603      	mov	r3, r0
 80081b2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081b4:	4b09      	ldr	r3, [pc, #36]	; (80081dc <HAL_RTC_SetDate+0x108>)
 80081b6:	22ff      	movs	r2, #255	; 0xff
 80081b8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80081ba:	7cfb      	ldrb	r3, [r7, #19]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d103      	bne.n	80081c8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80081d0:	7cfb      	ldrb	r3, [r7, #19]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd90      	pop	{r4, r7, pc}
 80081da:	bf00      	nop
 80081dc:	46007800 	.word	0x46007800

080081e0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80081e8:	4b15      	ldr	r3, [pc, #84]	; (8008240 <HAL_RTC_WaitForSynchro+0x60>)
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	4a14      	ldr	r2, [pc, #80]	; (8008240 <HAL_RTC_WaitForSynchro+0x60>)
 80081ee:	f023 0320 	bic.w	r3, r3, #32
 80081f2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 80081f4:	f7f9 fa6e 	bl	80016d4 <HAL_GetTick>
 80081f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80081fa:	e013      	b.n	8008224 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80081fc:	f7f9 fa6a 	bl	80016d4 <HAL_GetTick>
 8008200:	4602      	mov	r2, r0
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	1ad3      	subs	r3, r2, r3
 8008206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800820a:	d90b      	bls.n	8008224 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800820c:	4b0c      	ldr	r3, [pc, #48]	; (8008240 <HAL_RTC_WaitForSynchro+0x60>)
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	f003 0320 	and.w	r3, r3, #32
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10c      	bne.n	8008232 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2203      	movs	r2, #3
 800821c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e008      	b.n	8008236 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008224:	4b06      	ldr	r3, [pc, #24]	; (8008240 <HAL_RTC_WaitForSynchro+0x60>)
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	f003 0320 	and.w	r3, r3, #32
 800822c:	2b00      	cmp	r3, #0
 800822e:	d0e5      	beq.n	80081fc <HAL_RTC_WaitForSynchro+0x1c>
 8008230:	e000      	b.n	8008234 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8008232:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 8008234:	2300      	movs	r3, #0
}
 8008236:	4618      	mov	r0, r3
 8008238:	3710      	adds	r7, #16
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	46007800 	.word	0x46007800

08008244 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800824c:	2300      	movs	r3, #0
 800824e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008250:	4b19      	ldr	r3, [pc, #100]	; (80082b8 <RTC_EnterInitMode+0x74>)
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008258:	2b00      	cmp	r3, #0
 800825a:	d128      	bne.n	80082ae <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800825c:	4b16      	ldr	r3, [pc, #88]	; (80082b8 <RTC_EnterInitMode+0x74>)
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	4a15      	ldr	r2, [pc, #84]	; (80082b8 <RTC_EnterInitMode+0x74>)
 8008262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008266:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8008268:	f7f9 fa34 	bl	80016d4 <HAL_GetTick>
 800826c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800826e:	e013      	b.n	8008298 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008270:	f7f9 fa30 	bl	80016d4 <HAL_GetTick>
 8008274:	4602      	mov	r2, r0
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	1ad3      	subs	r3, r2, r3
 800827a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800827e:	d90b      	bls.n	8008298 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008280:	4b0d      	ldr	r3, [pc, #52]	; (80082b8 <RTC_EnterInitMode+0x74>)
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10f      	bne.n	80082ac <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2203      	movs	r2, #3
 8008294:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008298:	4b07      	ldr	r3, [pc, #28]	; (80082b8 <RTC_EnterInitMode+0x74>)
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d104      	bne.n	80082ae <RTC_EnterInitMode+0x6a>
 80082a4:	7bfb      	ldrb	r3, [r7, #15]
 80082a6:	2b03      	cmp	r3, #3
 80082a8:	d1e2      	bne.n	8008270 <RTC_EnterInitMode+0x2c>
 80082aa:	e000      	b.n	80082ae <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 80082ac:	bf00      	nop
        }
      }
    }
  }

  return status;
 80082ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3710      	adds	r7, #16
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	46007800 	.word	0x46007800

080082bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80082c8:	4b1a      	ldr	r3, [pc, #104]	; (8008334 <RTC_ExitInitMode+0x78>)
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	4a19      	ldr	r2, [pc, #100]	; (8008334 <RTC_ExitInitMode+0x78>)
 80082ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082d2:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80082d4:	4b17      	ldr	r3, [pc, #92]	; (8008334 <RTC_ExitInitMode+0x78>)
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	f003 0320 	and.w	r3, r3, #32
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10c      	bne.n	80082fa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f7ff ff7d 	bl	80081e0 <HAL_RTC_WaitForSynchro>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d01e      	beq.n	800832a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2203      	movs	r2, #3
 80082f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	73fb      	strb	r3, [r7, #15]
 80082f8:	e017      	b.n	800832a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80082fa:	4b0e      	ldr	r3, [pc, #56]	; (8008334 <RTC_ExitInitMode+0x78>)
 80082fc:	699b      	ldr	r3, [r3, #24]
 80082fe:	4a0d      	ldr	r2, [pc, #52]	; (8008334 <RTC_ExitInitMode+0x78>)
 8008300:	f023 0320 	bic.w	r3, r3, #32
 8008304:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f7ff ff6a 	bl	80081e0 <HAL_RTC_WaitForSynchro>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2203      	movs	r2, #3
 8008316:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800831e:	4b05      	ldr	r3, [pc, #20]	; (8008334 <RTC_ExitInitMode+0x78>)
 8008320:	699b      	ldr	r3, [r3, #24]
 8008322:	4a04      	ldr	r2, [pc, #16]	; (8008334 <RTC_ExitInitMode+0x78>)
 8008324:	f043 0320 	orr.w	r3, r3, #32
 8008328:	6193      	str	r3, [r2, #24]
  }
  return status;
 800832a:	7bfb      	ldrb	r3, [r7, #15]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	46007800 	.word	0x46007800

08008338 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	4603      	mov	r3, r0
 8008340:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8008346:	79fb      	ldrb	r3, [r7, #7]
 8008348:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800834a:	e005      	b.n	8008358 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	3301      	adds	r3, #1
 8008350:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008352:	7afb      	ldrb	r3, [r7, #11]
 8008354:	3b0a      	subs	r3, #10
 8008356:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	2b09      	cmp	r3, #9
 800835c:	d8f6      	bhi.n	800834c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	b2db      	uxtb	r3, r3
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	b2da      	uxtb	r2, r3
 8008366:	7afb      	ldrb	r3, [r7, #11]
 8008368:	4313      	orrs	r3, r2
 800836a:	b2db      	uxtb	r3, r3
}
 800836c:	4618      	mov	r0, r3
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <HAL_RTCEx_SetWakeUpTimer_IT>:
  *                         after Wake Up.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock,
                                              uint32_t WakeUpAutoClr)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b086      	sub	sp, #24
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_RTCEx_SetWakeUpTimer_IT+0x1c>
 8008390:	2302      	movs	r3, #2
 8008392:	e063      	b.n	800845c <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2202      	movs	r2, #2
 80083a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80083a4:	4b2f      	ldr	r3, [pc, #188]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80083a6:	22ca      	movs	r2, #202	; 0xca
 80083a8:	625a      	str	r2, [r3, #36]	; 0x24
 80083aa:	4b2e      	ldr	r3, [pc, #184]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80083ac:	2253      	movs	r2, #83	; 0x53
 80083ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(RTC->CR, RTC_CR_WUTE);
 80083b0:	4b2c      	ldr	r3, [pc, #176]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	4a2b      	ldr	r2, [pc, #172]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80083b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083ba:	6193      	str	r3, [r2, #24]

  /* Clear flag Wake-Up */
  WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 80083bc:	4b29      	ldr	r3, [pc, #164]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80083be:	2204      	movs	r2, #4
 80083c0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80083c2:	4b28      	ldr	r3, [pc, #160]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80083c4:	68db      	ldr	r3, [r3, #12]
 80083c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d126      	bne.n	800841c <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
  {
    tickstart = HAL_GetTick();
 80083ce:	f7f9 f981 	bl	80016d4 <HAL_GetTick>
 80083d2:	6178      	str	r0, [r7, #20]
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80083d4:	e01a      	b.n	800840c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80083d6:	f7f9 f97d 	bl	80016d4 <HAL_GetTick>
 80083da:	4602      	mov	r2, r0
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	1ad3      	subs	r3, r2, r3
 80083e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80083e4:	d912      	bls.n	800840c <HAL_RTCEx_SetWakeUpTimer_IT+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 80083e6:	4b1f      	ldr	r3, [pc, #124]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	f003 0304 	and.w	r3, r3, #4
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d113      	bne.n	800841a <HAL_RTCEx_SetWakeUpTimer_IT+0xa2>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80083f2:	4b1c      	ldr	r3, [pc, #112]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 80083f4:	22ff      	movs	r2, #255	; 0xff
 80083f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2203      	movs	r2, #3
 80083fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	2200      	movs	r2, #0
 8008404:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          return HAL_TIMEOUT;
 8008408:	2303      	movs	r3, #3
 800840a:	e027      	b.n	800845c <HAL_RTCEx_SetWakeUpTimer_IT+0xe4>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_WUTWF) == 0U)
 800840c:	4b15      	ldr	r3, [pc, #84]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f003 0304 	and.w	r3, r3, #4
 8008414:	2b00      	cmp	r3, #0
 8008416:	d0de      	beq.n	80083d6 <HAL_RTCEx_SetWakeUpTimer_IT+0x5e>
 8008418:	e000      	b.n	800841c <HAL_RTCEx_SetWakeUpTimer_IT+0xa4>
        }
        else
        {
          break;
 800841a:	bf00      	nop
      }
    }
  }

  /* Configure the Wakeup Timer counter and auto clear value */
  WRITE_REG(RTC->WUTR, (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos)));
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	041a      	lsls	r2, r3, #16
 8008420:	4910      	ldr	r1, [pc, #64]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	4313      	orrs	r3, r2
 8008426:	614b      	str	r3, [r1, #20]

  /* Configure the clock source */
  MODIFY_REG(RTC->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008428:	4b0e      	ldr	r3, [pc, #56]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	f023 0207 	bic.w	r2, r3, #7
 8008430:	490c      	ldr	r1, [pc, #48]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4313      	orrs	r3, r2
 8008436:	618b      	str	r3, [r1, #24]

  /* Configure the Interrupt in the RTC_CR register and Enable the Wakeup Timer*/
  SET_BIT(RTC->CR, (RTC_CR_WUTIE | RTC_CR_WUTE));
 8008438:	4b0a      	ldr	r3, [pc, #40]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800843a:	699b      	ldr	r3, [r3, #24]
 800843c:	4a09      	ldr	r2, [pc, #36]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 800843e:	f443 4388 	orr.w	r3, r3, #17408	; 0x4400
 8008442:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008444:	4b07      	ldr	r3, [pc, #28]	; (8008464 <HAL_RTCEx_SetWakeUpTimer_IT+0xec>)
 8008446:	22ff      	movs	r2, #255	; 0xff
 8008448:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2201      	movs	r2, #1
 800844e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3718      	adds	r7, #24
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	46007800 	.word	0x46007800

08008468 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Get the pending status of the Wake-Up Timer Interrupt */
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if (READ_BIT(RTC->SMISR, RTC_SMISR_WUTMF) != 0U)
#else
  if (READ_BIT(RTC->MISR, RTC_MISR_WUTMF) != 0U)
 8008470:	4b09      	ldr	r3, [pc, #36]	; (8008498 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8008472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008474:	f003 0304 	and.w	r3, r3, #4
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <HAL_RTCEx_WakeUpTimerIRQHandler+0x20>
#endif /* #if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CWUTF);
 800847c:	4b06      	ldr	r3, [pc, #24]	; (8008498 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 800847e:	2204      	movs	r2, #4
 8008480:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    /* WAKEUPTIMER callback */
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f80a 	bl	800849c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2201      	movs	r2, #1
 800848c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	46007800 	.word	0x46007800

0800849c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	4910      	ldr	r1, [pc, #64]	; (8008504 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80084c4:	4313      	orrs	r3, r2
 80084c6:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	689a      	ldr	r2, [r3, #8]
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	431a      	orrs	r2, r3
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	699b      	ldr	r3, [r3, #24]
 80084d6:	490c      	ldr	r1, [pc, #48]	; (8008508 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80084d8:	4313      	orrs	r3, r2
 80084da:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 80084dc:	4b0a      	ldr	r3, [pc, #40]	; (8008508 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80084de:	6a1b      	ldr	r3, [r3, #32]
 80084e0:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	6919      	ldr	r1, [r3, #16]
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	695b      	ldr	r3, [r3, #20]
 80084ec:	041b      	lsls	r3, r3, #16
 80084ee:	430b      	orrs	r3, r1
 80084f0:	4905      	ldr	r1, [pc, #20]	; (8008508 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	46007800 	.word	0x46007800
 8008508:	46007c00 	.word	0x46007c00

0800850c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e0fb      	b.n	8008716 <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a7f      	ldr	r2, [pc, #508]	; (8008720 <HAL_SPI_Init+0x214>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d004      	beq.n	8008532 <HAL_SPI_Init+0x26>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a7d      	ldr	r2, [pc, #500]	; (8008724 <HAL_SPI_Init+0x218>)
 800852e:	4293      	cmp	r3, r2
 8008530:	e000      	b.n	8008534 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008532:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2200      	movs	r2, #0
 8008538:	629a      	str	r2, [r3, #40]	; 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a78      	ldr	r2, [pc, #480]	; (8008720 <HAL_SPI_Init+0x214>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d004      	beq.n	800854e <HAL_SPI_Init+0x42>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a76      	ldr	r2, [pc, #472]	; (8008724 <HAL_SPI_Init+0x218>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d105      	bne.n	800855a <HAL_SPI_Init+0x4e>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	2b0f      	cmp	r3, #15
 8008554:	d901      	bls.n	800855a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e0dd      	b.n	8008716 <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f8ec 	bl	8008738 <SPI_GetPacketSize>
 8008560:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a6e      	ldr	r2, [pc, #440]	; (8008720 <HAL_SPI_Init+0x214>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d004      	beq.n	8008576 <HAL_SPI_Init+0x6a>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a6c      	ldr	r2, [pc, #432]	; (8008724 <HAL_SPI_Init+0x218>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d102      	bne.n	800857c <HAL_SPI_Init+0x70>
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b08      	cmp	r3, #8
 800857a:	d816      	bhi.n	80085aa <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008580:	4a69      	ldr	r2, [pc, #420]	; (8008728 <HAL_SPI_Init+0x21c>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d00e      	beq.n	80085a4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a68      	ldr	r2, [pc, #416]	; (800872c <HAL_SPI_Init+0x220>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d009      	beq.n	80085a4 <HAL_SPI_Init+0x98>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a66      	ldr	r2, [pc, #408]	; (8008730 <HAL_SPI_Init+0x224>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d004      	beq.n	80085a4 <HAL_SPI_Init+0x98>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a65      	ldr	r2, [pc, #404]	; (8008734 <HAL_SPI_Init+0x228>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d104      	bne.n	80085ae <HAL_SPI_Init+0xa2>
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b10      	cmp	r3, #16
 80085a8:	d901      	bls.n	80085ae <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80085aa:	2301      	movs	r3, #1
 80085ac:	e0b3      	b.n	8008716 <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d106      	bne.n	80085c8 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7f8 fdf8 	bl	80011b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2202      	movs	r2, #2
 80085cc:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0201 	bic.w	r2, r2, #1
 80085de:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80085ea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085f4:	d119      	bne.n	800862a <HAL_SPI_Init+0x11e>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085fe:	d103      	bne.n	8008608 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008604:	2b00      	cmp	r3, #0
 8008606:	d008      	beq.n	800861a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10c      	bne.n	800862a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008614:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008618:	d107      	bne.n	800862a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008628:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00f      	beq.n	8008656 <HAL_SPI_Init+0x14a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	2b06      	cmp	r3, #6
 800863c:	d90b      	bls.n	8008656 <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	430a      	orrs	r2, r1
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	e007      	b.n	8008666 <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008664:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	69da      	ldr	r2, [r3, #28]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800866e:	431a      	orrs	r2, r3
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	431a      	orrs	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008678:	ea42 0103 	orr.w	r1, r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	68da      	ldr	r2, [r3, #12]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	431a      	orrs	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008696:	431a      	orrs	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	431a      	orrs	r2, r3
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	431a      	orrs	r2, r3
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	431a      	orrs	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	431a      	orrs	r2, r3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	431a      	orrs	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ba:	431a      	orrs	r2, r3
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	431a      	orrs	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086c6:	431a      	orrs	r2, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086cc:	431a      	orrs	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086d2:	ea42 0103 	orr.w	r1, r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	430a      	orrs	r2, r1
 80086e0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00a      	beq.n	8008704 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68db      	ldr	r3, [r3, #12]
 80086f4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	46002000 	.word	0x46002000
 8008724:	56002000 	.word	0x56002000
 8008728:	40013000 	.word	0x40013000
 800872c:	50013000 	.word	0x50013000
 8008730:	40003800 	.word	0x40003800
 8008734:	50003800 	.word	0x50003800

08008738 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008744:	095b      	lsrs	r3, r3, #5
 8008746:	3301      	adds	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	3301      	adds	r3, #1
 8008750:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	3307      	adds	r3, #7
 8008756:	08db      	lsrs	r3, r3, #3
 8008758:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	68fa      	ldr	r2, [r7, #12]
 800875e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800876e:	b480      	push	{r7}
 8008770:	b083      	sub	sp, #12
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b01      	cmp	r3, #1
 8008782:	d12e      	bne.n	80087e2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800878a:	2b01      	cmp	r3, #1
 800878c:	d101      	bne.n	8008792 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800878e:	2302      	movs	r3, #2
 8008790:	e028      	b.n	80087e4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2201      	movs	r2, #1
 8008796:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2202      	movs	r2, #2
 800879e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f022 0201 	bic.w	r2, r2, #1
 80087b0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80087be:	ea42 0103 	orr.w	r1, r2, r3
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	689a      	ldr	r2, [r3, #8]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2201      	movs	r2, #1
 80087d2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80087de:	2300      	movs	r3, #0
 80087e0:	e000      	b.n	80087e4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
  }
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d101      	bne.n	8008802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	e042      	b.n	8008888 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008808:	2b00      	cmp	r3, #0
 800880a:	d106      	bne.n	800881a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7f8 fd39 	bl	800128c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2224      	movs	r2, #36	; 0x24
 800881e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0201 	bic.w	r2, r2, #1
 8008830:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f8ca 	bl	80089cc <UART_SetConfig>
 8008838:	4603      	mov	r3, r0
 800883a:	2b01      	cmp	r3, #1
 800883c:	d101      	bne.n	8008842 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e022      	b.n	8008888 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008846:	2b00      	cmp	r3, #0
 8008848:	d002      	beq.n	8008850 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 fa60 	bl	8008d10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	685a      	ldr	r2, [r3, #4]
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800885e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	689a      	ldr	r2, [r3, #8]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800886e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f042 0201 	orr.w	r2, r2, #1
 800887e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fae7 	bl	8008e54 <UART_CheckIdleState>
 8008886:	4603      	mov	r3, r0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b08a      	sub	sp, #40	; 0x28
 8008894:	af02      	add	r7, sp, #8
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	60b9      	str	r1, [r7, #8]
 800889a:	603b      	str	r3, [r7, #0]
 800889c:	4613      	mov	r3, r2
 800889e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088a6:	2b20      	cmp	r3, #32
 80088a8:	f040 808b 	bne.w	80089c2 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d002      	beq.n	80088b8 <HAL_UART_Transmit+0x28>
 80088b2:	88fb      	ldrh	r3, [r7, #6]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d101      	bne.n	80088bc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e083      	b.n	80089c4 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088c6:	2b80      	cmp	r3, #128	; 0x80
 80088c8:	d107      	bne.n	80088da <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088d8:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2221      	movs	r2, #33	; 0x21
 80088e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088ea:	f7f8 fef3 	bl	80016d4 <HAL_GetTick>
 80088ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	88fa      	ldrh	r2, [r7, #6]
 80088f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	88fa      	ldrh	r2, [r7, #6]
 80088fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	689b      	ldr	r3, [r3, #8]
 8008904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008908:	d108      	bne.n	800891c <HAL_UART_Transmit+0x8c>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d104      	bne.n	800891c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 8008912:	2300      	movs	r3, #0
 8008914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	61bb      	str	r3, [r7, #24]
 800891a:	e003      	b.n	8008924 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008920:	2300      	movs	r3, #0
 8008922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008924:	e030      	b.n	8008988 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2200      	movs	r2, #0
 800892e:	2180      	movs	r1, #128	; 0x80
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 fb39 	bl	8008fa8 <UART_WaitOnFlagUntilTimeout>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d005      	beq.n	8008948 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2220      	movs	r2, #32
 8008940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008944:	2303      	movs	r3, #3
 8008946:	e03d      	b.n	80089c4 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10b      	bne.n	8008966 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	881b      	ldrh	r3, [r3, #0]
 8008952:	461a      	mov	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800895c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	3302      	adds	r3, #2
 8008962:	61bb      	str	r3, [r7, #24]
 8008964:	e007      	b.n	8008976 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008966:	69fb      	ldr	r3, [r7, #28]
 8008968:	781a      	ldrb	r2, [r3, #0]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	3301      	adds	r3, #1
 8008974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800897c:	b29b      	uxth	r3, r3
 800897e:	3b01      	subs	r3, #1
 8008980:	b29a      	uxth	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800898e:	b29b      	uxth	r3, r3
 8008990:	2b00      	cmp	r3, #0
 8008992:	d1c8      	bne.n	8008926 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	2200      	movs	r2, #0
 800899c:	2140      	movs	r1, #64	; 0x40
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 fb02 	bl	8008fa8 <UART_WaitOnFlagUntilTimeout>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d005      	beq.n	80089b6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2220      	movs	r2, #32
 80089ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80089b2:	2303      	movs	r3, #3
 80089b4:	e006      	b.n	80089c4 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80089be:	2300      	movs	r3, #0
 80089c0:	e000      	b.n	80089c4 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 80089c2:	2302      	movs	r3, #2
  }
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3720      	adds	r7, #32
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089d0:	b094      	sub	sp, #80	; 0x50
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80089dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	4b7e      	ldr	r3, [pc, #504]	; (8008bdc <UART_SetConfig+0x210>)
 80089e2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	431a      	orrs	r2, r3
 80089ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	431a      	orrs	r2, r3
 80089f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4977      	ldr	r1, [pc, #476]	; (8008be0 <UART_SetConfig+0x214>)
 8008a04:	4019      	ands	r1, r3
 8008a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a0c:	430b      	orrs	r3, r1
 8008a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1c:	68d9      	ldr	r1, [r3, #12]
 8008a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a20:	681a      	ldr	r2, [r3, #0]
 8008a22:	ea40 0301 	orr.w	r3, r0, r1
 8008a26:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2a:	699b      	ldr	r3, [r3, #24]
 8008a2c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	4b6a      	ldr	r3, [pc, #424]	; (8008bdc <UART_SetConfig+0x210>)
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d009      	beq.n	8008a4c <UART_SetConfig+0x80>
 8008a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	4b69      	ldr	r3, [pc, #420]	; (8008be4 <UART_SetConfig+0x218>)
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d004      	beq.n	8008a4c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a44:	6a1a      	ldr	r2, [r3, #32]
 8008a46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008a56:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a60:	430b      	orrs	r3, r1
 8008a62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6a:	f023 000f 	bic.w	r0, r3, #15
 8008a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a70:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	ea40 0301 	orr.w	r3, r0, r1
 8008a7a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7e:	681a      	ldr	r2, [r3, #0]
 8008a80:	4b59      	ldr	r3, [pc, #356]	; (8008be8 <UART_SetConfig+0x21c>)
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d102      	bne.n	8008a8c <UART_SetConfig+0xc0>
 8008a86:	2301      	movs	r3, #1
 8008a88:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a8a:	e029      	b.n	8008ae0 <UART_SetConfig+0x114>
 8008a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	4b56      	ldr	r3, [pc, #344]	; (8008bec <UART_SetConfig+0x220>)
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d102      	bne.n	8008a9c <UART_SetConfig+0xd0>
 8008a96:	2302      	movs	r3, #2
 8008a98:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a9a:	e021      	b.n	8008ae0 <UART_SetConfig+0x114>
 8008a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	4b53      	ldr	r3, [pc, #332]	; (8008bf0 <UART_SetConfig+0x224>)
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d102      	bne.n	8008aac <UART_SetConfig+0xe0>
 8008aa6:	2304      	movs	r3, #4
 8008aa8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008aaa:	e019      	b.n	8008ae0 <UART_SetConfig+0x114>
 8008aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	4b50      	ldr	r3, [pc, #320]	; (8008bf4 <UART_SetConfig+0x228>)
 8008ab2:	429a      	cmp	r2, r3
 8008ab4:	d102      	bne.n	8008abc <UART_SetConfig+0xf0>
 8008ab6:	2308      	movs	r3, #8
 8008ab8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008aba:	e011      	b.n	8008ae0 <UART_SetConfig+0x114>
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	4b4d      	ldr	r3, [pc, #308]	; (8008bf8 <UART_SetConfig+0x22c>)
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	d102      	bne.n	8008acc <UART_SetConfig+0x100>
 8008ac6:	2310      	movs	r3, #16
 8008ac8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008aca:	e009      	b.n	8008ae0 <UART_SetConfig+0x114>
 8008acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	4b42      	ldr	r3, [pc, #264]	; (8008bdc <UART_SetConfig+0x210>)
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d102      	bne.n	8008adc <UART_SetConfig+0x110>
 8008ad6:	2320      	movs	r3, #32
 8008ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ada:	e001      	b.n	8008ae0 <UART_SetConfig+0x114>
 8008adc:	2300      	movs	r3, #0
 8008ade:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	4b3d      	ldr	r3, [pc, #244]	; (8008bdc <UART_SetConfig+0x210>)
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d005      	beq.n	8008af6 <UART_SetConfig+0x12a>
 8008aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	4b3d      	ldr	r3, [pc, #244]	; (8008be4 <UART_SetConfig+0x218>)
 8008af0:	429a      	cmp	r2, r3
 8008af2:	f040 8085 	bne.w	8008c00 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008af8:	2200      	movs	r2, #0
 8008afa:	623b      	str	r3, [r7, #32]
 8008afc:	627a      	str	r2, [r7, #36]	; 0x24
 8008afe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008b02:	f7fd feb7 	bl	8006874 <HAL_RCCEx_GetPeriphCLKFreq>
 8008b06:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f000 80e8 	beq.w	8008ce0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	4a39      	ldr	r2, [pc, #228]	; (8008bfc <UART_SetConfig+0x230>)
 8008b16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b22:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	005b      	lsls	r3, r3, #1
 8008b2c:	4413      	add	r3, r2
 8008b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d305      	bcc.n	8008b40 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d903      	bls.n	8008b48 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008b46:	e048      	b.n	8008bda <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	61bb      	str	r3, [r7, #24]
 8008b4e:	61fa      	str	r2, [r7, #28]
 8008b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b54:	4a29      	ldr	r2, [pc, #164]	; (8008bfc <UART_SetConfig+0x230>)
 8008b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	613b      	str	r3, [r7, #16]
 8008b60:	617a      	str	r2, [r7, #20]
 8008b62:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008b66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008b6a:	f7f7 fb85 	bl	8000278 <__aeabi_uldivmod>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	4610      	mov	r0, r2
 8008b74:	4619      	mov	r1, r3
 8008b76:	f04f 0200 	mov.w	r2, #0
 8008b7a:	f04f 0300 	mov.w	r3, #0
 8008b7e:	020b      	lsls	r3, r1, #8
 8008b80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008b84:	0202      	lsls	r2, r0, #8
 8008b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b88:	6849      	ldr	r1, [r1, #4]
 8008b8a:	0849      	lsrs	r1, r1, #1
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	460c      	mov	r4, r1
 8008b90:	4605      	mov	r5, r0
 8008b92:	eb12 0804 	adds.w	r8, r2, r4
 8008b96:	eb43 0905 	adc.w	r9, r3, r5
 8008b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	60bb      	str	r3, [r7, #8]
 8008ba2:	60fa      	str	r2, [r7, #12]
 8008ba4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ba8:	4640      	mov	r0, r8
 8008baa:	4649      	mov	r1, r9
 8008bac:	f7f7 fb64 	bl	8000278 <__aeabi_uldivmod>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bbe:	d308      	bcc.n	8008bd2 <UART_SetConfig+0x206>
 8008bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bc6:	d204      	bcs.n	8008bd2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008bce:	60da      	str	r2, [r3, #12]
 8008bd0:	e003      	b.n	8008bda <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008bd8:	e082      	b.n	8008ce0 <UART_SetConfig+0x314>
 8008bda:	e081      	b.n	8008ce0 <UART_SetConfig+0x314>
 8008bdc:	46002400 	.word	0x46002400
 8008be0:	cfff69f3 	.word	0xcfff69f3
 8008be4:	56002400 	.word	0x56002400
 8008be8:	40013800 	.word	0x40013800
 8008bec:	40004400 	.word	0x40004400
 8008bf0:	40004800 	.word	0x40004800
 8008bf4:	40004c00 	.word	0x40004c00
 8008bf8:	40005000 	.word	0x40005000
 8008bfc:	08009df0 	.word	0x08009df0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c02:	69db      	ldr	r3, [r3, #28]
 8008c04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c08:	d13c      	bne.n	8008c84 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	603b      	str	r3, [r7, #0]
 8008c10:	607a      	str	r2, [r7, #4]
 8008c12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008c16:	f7fd fe2d 	bl	8006874 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c1a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d05e      	beq.n	8008ce0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	4a39      	ldr	r2, [pc, #228]	; (8008d0c <UART_SetConfig+0x340>)
 8008c28:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c30:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c34:	005a      	lsls	r2, r3, #1
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	085b      	lsrs	r3, r3, #1
 8008c3c:	441a      	add	r2, r3
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c46:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c4a:	2b0f      	cmp	r3, #15
 8008c4c:	d916      	bls.n	8008c7c <UART_SetConfig+0x2b0>
 8008c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c54:	d212      	bcs.n	8008c7c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	f023 030f 	bic.w	r3, r3, #15
 8008c5e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c62:	085b      	lsrs	r3, r3, #1
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008c78:	60da      	str	r2, [r3, #12]
 8008c7a:	e031      	b.n	8008ce0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008c82:	e02d      	b.n	8008ce0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c86:	2200      	movs	r2, #0
 8008c88:	469a      	mov	sl, r3
 8008c8a:	4693      	mov	fp, r2
 8008c8c:	4650      	mov	r0, sl
 8008c8e:	4659      	mov	r1, fp
 8008c90:	f7fd fdf0 	bl	8006874 <HAL_RCCEx_GetPeriphCLKFreq>
 8008c94:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008c96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d021      	beq.n	8008ce0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	4a1a      	ldr	r2, [pc, #104]	; (8008d0c <UART_SetConfig+0x340>)
 8008ca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008caa:	fbb3 f2f2 	udiv	r2, r3, r2
 8008cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	085b      	lsrs	r3, r3, #1
 8008cb4:	441a      	add	r2, r3
 8008cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc2:	2b0f      	cmp	r3, #15
 8008cc4:	d909      	bls.n	8008cda <UART_SetConfig+0x30e>
 8008cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ccc:	d205      	bcs.n	8008cda <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	60da      	str	r2, [r3, #12]
 8008cd8:	e002      	b.n	8008ce0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cea:	2201      	movs	r2, #1
 8008cec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008cfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3750      	adds	r7, #80	; 0x50
 8008d04:	46bd      	mov	sp, r7
 8008d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d0a:	bf00      	nop
 8008d0c:	08009df0 	.word	0x08009df0

08008d10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00a      	beq.n	8008d3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00a      	beq.n	8008d5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00a      	beq.n	8008d7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d82:	f003 0308 	and.w	r3, r3, #8
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	430a      	orrs	r2, r1
 8008d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da4:	f003 0310 	and.w	r3, r3, #16
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d00a      	beq.n	8008dc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	430a      	orrs	r2, r1
 8008dc0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc6:	f003 0320 	and.w	r3, r3, #32
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d00a      	beq.n	8008de4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	689b      	ldr	r3, [r3, #8]
 8008dd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	430a      	orrs	r2, r1
 8008de2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d01a      	beq.n	8008e26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	430a      	orrs	r2, r1
 8008e04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e0e:	d10a      	bne.n	8008e26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	430a      	orrs	r2, r1
 8008e24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00a      	beq.n	8008e48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	430a      	orrs	r2, r1
 8008e46:	605a      	str	r2, [r3, #4]
  }
}
 8008e48:	bf00      	nop
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b098      	sub	sp, #96	; 0x60
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008e64:	f7f8 fc36 	bl	80016d4 <HAL_GetTick>
 8008e68:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f003 0308 	and.w	r3, r3, #8
 8008e74:	2b08      	cmp	r3, #8
 8008e76:	d12f      	bne.n	8008ed8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e7c:	9300      	str	r3, [sp, #0]
 8008e7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e80:	2200      	movs	r2, #0
 8008e82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f88e 	bl	8008fa8 <UART_WaitOnFlagUntilTimeout>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d022      	beq.n	8008ed8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e9a:	e853 3f00 	ldrex	r3, [r3]
 8008e9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ea6:	653b      	str	r3, [r7, #80]	; 0x50
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	461a      	mov	r2, r3
 8008eae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8008eb2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008eb8:	e841 2300 	strex	r3, r2, [r1]
 8008ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d1e6      	bne.n	8008e92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ed4:	2303      	movs	r3, #3
 8008ed6:	e063      	b.n	8008fa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0304 	and.w	r3, r3, #4
 8008ee2:	2b04      	cmp	r3, #4
 8008ee4:	d149      	bne.n	8008f7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ee6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008eea:	9300      	str	r3, [sp, #0]
 8008eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f857 	bl	8008fa8 <UART_WaitOnFlagUntilTimeout>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d03c      	beq.n	8008f7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	e853 3f00 	ldrex	r3, [r3]
 8008f0c:	623b      	str	r3, [r7, #32]
   return(result);
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8008f20:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f26:	e841 2300 	strex	r3, r2, [r1]
 8008f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d1e6      	bne.n	8008f00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	3308      	adds	r3, #8
 8008f38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	e853 3f00 	ldrex	r3, [r3]
 8008f40:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f023 0301 	bic.w	r3, r3, #1
 8008f48:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	3308      	adds	r3, #8
 8008f50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f52:	61fa      	str	r2, [r7, #28]
 8008f54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f56:	69b9      	ldr	r1, [r7, #24]
 8008f58:	69fa      	ldr	r2, [r7, #28]
 8008f5a:	e841 2300 	strex	r3, r2, [r1]
 8008f5e:	617b      	str	r3, [r7, #20]
   return(result);
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1e5      	bne.n	8008f32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2220      	movs	r2, #32
 8008f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f76:	2303      	movs	r3, #3
 8008f78:	e012      	b.n	8008fa0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2220      	movs	r2, #32
 8008f7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2200      	movs	r2, #0
 8008f94:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3758      	adds	r7, #88	; 0x58
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b084      	sub	sp, #16
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	60b9      	str	r1, [r7, #8]
 8008fb2:	603b      	str	r3, [r7, #0]
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fb8:	e049      	b.n	800904e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc0:	d045      	beq.n	800904e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fc2:	f7f8 fb87 	bl	80016d4 <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	69ba      	ldr	r2, [r7, #24]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d302      	bcc.n	8008fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d101      	bne.n	8008fdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e048      	b.n	800906e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d031      	beq.n	800904e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	f003 0308 	and.w	r3, r3, #8
 8008ff4:	2b08      	cmp	r3, #8
 8008ff6:	d110      	bne.n	800901a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2208      	movs	r2, #8
 8008ffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f000 f838 	bl	8009076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2208      	movs	r2, #8
 800900a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e029      	b.n	800906e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	69db      	ldr	r3, [r3, #28]
 8009020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009024:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009028:	d111      	bne.n	800904e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009034:	68f8      	ldr	r0, [r7, #12]
 8009036:	f000 f81e 	bl	8009076 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2220      	movs	r2, #32
 800903e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	2200      	movs	r2, #0
 8009046:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800904a:	2303      	movs	r3, #3
 800904c:	e00f      	b.n	800906e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	69da      	ldr	r2, [r3, #28]
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	4013      	ands	r3, r2
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	429a      	cmp	r2, r3
 800905c:	bf0c      	ite	eq
 800905e:	2301      	moveq	r3, #1
 8009060:	2300      	movne	r3, #0
 8009062:	b2db      	uxtb	r3, r3
 8009064:	461a      	mov	r2, r3
 8009066:	79fb      	ldrb	r3, [r7, #7]
 8009068:	429a      	cmp	r2, r3
 800906a:	d0a6      	beq.n	8008fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009076:	b480      	push	{r7}
 8009078:	b095      	sub	sp, #84	; 0x54
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009086:	e853 3f00 	ldrex	r3, [r3]
 800908a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009092:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	461a      	mov	r2, r3
 800909a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800909c:	643b      	str	r3, [r7, #64]	; 0x40
 800909e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80090a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80090a4:	e841 2300 	strex	r3, r2, [r1]
 80090a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1e6      	bne.n	800907e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	3308      	adds	r3, #8
 80090b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	e853 3f00 	ldrex	r3, [r3]
 80090be:	61fb      	str	r3, [r7, #28]
   return(result);
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090c6:	f023 0301 	bic.w	r3, r3, #1
 80090ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	3308      	adds	r3, #8
 80090d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80090d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80090d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090dc:	e841 2300 	strex	r3, r2, [r1]
 80090e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d1e3      	bne.n	80090b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d118      	bne.n	8009122 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	e853 3f00 	ldrex	r3, [r3]
 80090fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	f023 0310 	bic.w	r3, r3, #16
 8009104:	647b      	str	r3, [r7, #68]	; 0x44
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800910e:	61bb      	str	r3, [r7, #24]
 8009110:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6979      	ldr	r1, [r7, #20]
 8009114:	69ba      	ldr	r2, [r7, #24]
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	613b      	str	r3, [r7, #16]
   return(result);
 800911c:	693b      	ldr	r3, [r7, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e6      	bne.n	80090f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2220      	movs	r2, #32
 8009126:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009136:	bf00      	nop
 8009138:	3754      	adds	r7, #84	; 0x54
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009150:	2b01      	cmp	r3, #1
 8009152:	d101      	bne.n	8009158 <HAL_UARTEx_DisableFifoMode+0x16>
 8009154:	2302      	movs	r3, #2
 8009156:	e027      	b.n	80091a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2224      	movs	r2, #36	; 0x24
 8009164:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0201 	bic.w	r2, r2, #1
 800917e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009186:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2220      	movs	r2, #32
 800919a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d101      	bne.n	80091cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091c8:	2302      	movs	r3, #2
 80091ca:	e02d      	b.n	8009228 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2224      	movs	r2, #36	; 0x24
 80091d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 0201 	bic.w	r2, r2, #1
 80091f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	430a      	orrs	r2, r1
 8009206:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f84f 	bl	80092ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2220      	movs	r2, #32
 800921a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009240:	2b01      	cmp	r3, #1
 8009242:	d101      	bne.n	8009248 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009244:	2302      	movs	r3, #2
 8009246:	e02d      	b.n	80092a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2224      	movs	r2, #36	; 0x24
 8009254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f022 0201 	bic.w	r2, r2, #1
 800926e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f811 	bl	80092ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2220      	movs	r2, #32
 8009296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d108      	bne.n	80092ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092cc:	e031      	b.n	8009332 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092ce:	2308      	movs	r3, #8
 80092d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092d2:	2308      	movs	r3, #8
 80092d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	0e5b      	lsrs	r3, r3, #25
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	f003 0307 	and.w	r3, r3, #7
 80092e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	0f5b      	lsrs	r3, r3, #29
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	f003 0307 	and.w	r3, r3, #7
 80092f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
 80092f8:	7b3a      	ldrb	r2, [r7, #12]
 80092fa:	4911      	ldr	r1, [pc, #68]	; (8009340 <UARTEx_SetNbDataToProcess+0x94>)
 80092fc:	5c8a      	ldrb	r2, [r1, r2]
 80092fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009302:	7b3a      	ldrb	r2, [r7, #12]
 8009304:	490f      	ldr	r1, [pc, #60]	; (8009344 <UARTEx_SetNbDataToProcess+0x98>)
 8009306:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009308:	fb93 f3f2 	sdiv	r3, r3, r2
 800930c:	b29a      	uxth	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	7b7a      	ldrb	r2, [r7, #13]
 8009318:	4909      	ldr	r1, [pc, #36]	; (8009340 <UARTEx_SetNbDataToProcess+0x94>)
 800931a:	5c8a      	ldrb	r2, [r1, r2]
 800931c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009320:	7b7a      	ldrb	r2, [r7, #13]
 8009322:	4908      	ldr	r1, [pc, #32]	; (8009344 <UARTEx_SetNbDataToProcess+0x98>)
 8009324:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009326:	fb93 f3f2 	sdiv	r3, r3, r2
 800932a:	b29a      	uxth	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009332:	bf00      	nop
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	08009e08 	.word	0x08009e08
 8009344:	08009e10 	.word	0x08009e10

08009348 <sniprintf>:
 8009348:	b40c      	push	{r2, r3}
 800934a:	4b18      	ldr	r3, [pc, #96]	; (80093ac <sniprintf+0x64>)
 800934c:	b530      	push	{r4, r5, lr}
 800934e:	1e0c      	subs	r4, r1, #0
 8009350:	b09d      	sub	sp, #116	; 0x74
 8009352:	681d      	ldr	r5, [r3, #0]
 8009354:	da08      	bge.n	8009368 <sniprintf+0x20>
 8009356:	238b      	movs	r3, #139	; 0x8b
 8009358:	f04f 30ff 	mov.w	r0, #4294967295
 800935c:	602b      	str	r3, [r5, #0]
 800935e:	b01d      	add	sp, #116	; 0x74
 8009360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009364:	b002      	add	sp, #8
 8009366:	4770      	bx	lr
 8009368:	f44f 7302 	mov.w	r3, #520	; 0x208
 800936c:	9002      	str	r0, [sp, #8]
 800936e:	9006      	str	r0, [sp, #24]
 8009370:	a902      	add	r1, sp, #8
 8009372:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009376:	bf14      	ite	ne
 8009378:	f104 33ff 	addne.w	r3, r4, #4294967295
 800937c:	4623      	moveq	r3, r4
 800937e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009380:	4628      	mov	r0, r5
 8009382:	9304      	str	r3, [sp, #16]
 8009384:	9307      	str	r3, [sp, #28]
 8009386:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800938a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800938e:	ab21      	add	r3, sp, #132	; 0x84
 8009390:	9301      	str	r3, [sp, #4]
 8009392:	f000 f993 	bl	80096bc <_svfiprintf_r>
 8009396:	1c43      	adds	r3, r0, #1
 8009398:	bfbc      	itt	lt
 800939a:	238b      	movlt	r3, #139	; 0x8b
 800939c:	602b      	strlt	r3, [r5, #0]
 800939e:	2c00      	cmp	r4, #0
 80093a0:	d0dd      	beq.n	800935e <sniprintf+0x16>
 80093a2:	9b02      	ldr	r3, [sp, #8]
 80093a4:	2200      	movs	r2, #0
 80093a6:	701a      	strb	r2, [r3, #0]
 80093a8:	e7d9      	b.n	800935e <sniprintf+0x16>
 80093aa:	bf00      	nop
 80093ac:	20000058 	.word	0x20000058

080093b0 <memset>:
 80093b0:	4402      	add	r2, r0
 80093b2:	4603      	mov	r3, r0
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d100      	bne.n	80093ba <memset+0xa>
 80093b8:	4770      	bx	lr
 80093ba:	f803 1b01 	strb.w	r1, [r3], #1
 80093be:	e7f9      	b.n	80093b4 <memset+0x4>

080093c0 <__errno>:
 80093c0:	4b01      	ldr	r3, [pc, #4]	; (80093c8 <__errno+0x8>)
 80093c2:	6818      	ldr	r0, [r3, #0]
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	20000058 	.word	0x20000058

080093cc <__libc_init_array>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	4d0d      	ldr	r5, [pc, #52]	; (8009404 <__libc_init_array+0x38>)
 80093d0:	2600      	movs	r6, #0
 80093d2:	4c0d      	ldr	r4, [pc, #52]	; (8009408 <__libc_init_array+0x3c>)
 80093d4:	1b64      	subs	r4, r4, r5
 80093d6:	10a4      	asrs	r4, r4, #2
 80093d8:	42a6      	cmp	r6, r4
 80093da:	d109      	bne.n	80093f0 <__libc_init_array+0x24>
 80093dc:	4d0b      	ldr	r5, [pc, #44]	; (800940c <__libc_init_array+0x40>)
 80093de:	2600      	movs	r6, #0
 80093e0:	4c0b      	ldr	r4, [pc, #44]	; (8009410 <__libc_init_array+0x44>)
 80093e2:	f000 fc77 	bl	8009cd4 <_init>
 80093e6:	1b64      	subs	r4, r4, r5
 80093e8:	10a4      	asrs	r4, r4, #2
 80093ea:	42a6      	cmp	r6, r4
 80093ec:	d105      	bne.n	80093fa <__libc_init_array+0x2e>
 80093ee:	bd70      	pop	{r4, r5, r6, pc}
 80093f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80093f4:	3601      	adds	r6, #1
 80093f6:	4798      	blx	r3
 80093f8:	e7ee      	b.n	80093d8 <__libc_init_array+0xc>
 80093fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80093fe:	3601      	adds	r6, #1
 8009400:	4798      	blx	r3
 8009402:	e7f2      	b.n	80093ea <__libc_init_array+0x1e>
 8009404:	08009e54 	.word	0x08009e54
 8009408:	08009e54 	.word	0x08009e54
 800940c:	08009e54 	.word	0x08009e54
 8009410:	08009e58 	.word	0x08009e58

08009414 <__retarget_lock_acquire_recursive>:
 8009414:	4770      	bx	lr

08009416 <__retarget_lock_release_recursive>:
 8009416:	4770      	bx	lr

08009418 <_free_r>:
 8009418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800941a:	2900      	cmp	r1, #0
 800941c:	d043      	beq.n	80094a6 <_free_r+0x8e>
 800941e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009422:	1f0c      	subs	r4, r1, #4
 8009424:	9001      	str	r0, [sp, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	bfb8      	it	lt
 800942a:	18e4      	addlt	r4, r4, r3
 800942c:	f000 f8e0 	bl	80095f0 <__malloc_lock>
 8009430:	4a1e      	ldr	r2, [pc, #120]	; (80094ac <_free_r+0x94>)
 8009432:	9801      	ldr	r0, [sp, #4]
 8009434:	6813      	ldr	r3, [r2, #0]
 8009436:	b933      	cbnz	r3, 8009446 <_free_r+0x2e>
 8009438:	6063      	str	r3, [r4, #4]
 800943a:	6014      	str	r4, [r2, #0]
 800943c:	b003      	add	sp, #12
 800943e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009442:	f000 b8db 	b.w	80095fc <__malloc_unlock>
 8009446:	42a3      	cmp	r3, r4
 8009448:	d908      	bls.n	800945c <_free_r+0x44>
 800944a:	6825      	ldr	r5, [r4, #0]
 800944c:	1961      	adds	r1, r4, r5
 800944e:	428b      	cmp	r3, r1
 8009450:	bf01      	itttt	eq
 8009452:	6819      	ldreq	r1, [r3, #0]
 8009454:	685b      	ldreq	r3, [r3, #4]
 8009456:	1949      	addeq	r1, r1, r5
 8009458:	6021      	streq	r1, [r4, #0]
 800945a:	e7ed      	b.n	8009438 <_free_r+0x20>
 800945c:	461a      	mov	r2, r3
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	b10b      	cbz	r3, 8009466 <_free_r+0x4e>
 8009462:	42a3      	cmp	r3, r4
 8009464:	d9fa      	bls.n	800945c <_free_r+0x44>
 8009466:	6811      	ldr	r1, [r2, #0]
 8009468:	1855      	adds	r5, r2, r1
 800946a:	42a5      	cmp	r5, r4
 800946c:	d10b      	bne.n	8009486 <_free_r+0x6e>
 800946e:	6824      	ldr	r4, [r4, #0]
 8009470:	4421      	add	r1, r4
 8009472:	1854      	adds	r4, r2, r1
 8009474:	6011      	str	r1, [r2, #0]
 8009476:	42a3      	cmp	r3, r4
 8009478:	d1e0      	bne.n	800943c <_free_r+0x24>
 800947a:	681c      	ldr	r4, [r3, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	440c      	add	r4, r1
 8009480:	6053      	str	r3, [r2, #4]
 8009482:	6014      	str	r4, [r2, #0]
 8009484:	e7da      	b.n	800943c <_free_r+0x24>
 8009486:	d902      	bls.n	800948e <_free_r+0x76>
 8009488:	230c      	movs	r3, #12
 800948a:	6003      	str	r3, [r0, #0]
 800948c:	e7d6      	b.n	800943c <_free_r+0x24>
 800948e:	6825      	ldr	r5, [r4, #0]
 8009490:	1961      	adds	r1, r4, r5
 8009492:	428b      	cmp	r3, r1
 8009494:	bf02      	ittt	eq
 8009496:	6819      	ldreq	r1, [r3, #0]
 8009498:	685b      	ldreq	r3, [r3, #4]
 800949a:	1949      	addeq	r1, r1, r5
 800949c:	6063      	str	r3, [r4, #4]
 800949e:	bf08      	it	eq
 80094a0:	6021      	streq	r1, [r4, #0]
 80094a2:	6054      	str	r4, [r2, #4]
 80094a4:	e7ca      	b.n	800943c <_free_r+0x24>
 80094a6:	b003      	add	sp, #12
 80094a8:	bd30      	pop	{r4, r5, pc}
 80094aa:	bf00      	nop
 80094ac:	20000528 	.word	0x20000528

080094b0 <sbrk_aligned>:
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	4e0e      	ldr	r6, [pc, #56]	; (80094ec <sbrk_aligned+0x3c>)
 80094b4:	460c      	mov	r4, r1
 80094b6:	4605      	mov	r5, r0
 80094b8:	6831      	ldr	r1, [r6, #0]
 80094ba:	b911      	cbnz	r1, 80094c2 <sbrk_aligned+0x12>
 80094bc:	f000 fba8 	bl	8009c10 <_sbrk_r>
 80094c0:	6030      	str	r0, [r6, #0]
 80094c2:	4621      	mov	r1, r4
 80094c4:	4628      	mov	r0, r5
 80094c6:	f000 fba3 	bl	8009c10 <_sbrk_r>
 80094ca:	1c43      	adds	r3, r0, #1
 80094cc:	d00a      	beq.n	80094e4 <sbrk_aligned+0x34>
 80094ce:	1cc4      	adds	r4, r0, #3
 80094d0:	f024 0403 	bic.w	r4, r4, #3
 80094d4:	42a0      	cmp	r0, r4
 80094d6:	d007      	beq.n	80094e8 <sbrk_aligned+0x38>
 80094d8:	1a21      	subs	r1, r4, r0
 80094da:	4628      	mov	r0, r5
 80094dc:	f000 fb98 	bl	8009c10 <_sbrk_r>
 80094e0:	3001      	adds	r0, #1
 80094e2:	d101      	bne.n	80094e8 <sbrk_aligned+0x38>
 80094e4:	f04f 34ff 	mov.w	r4, #4294967295
 80094e8:	4620      	mov	r0, r4
 80094ea:	bd70      	pop	{r4, r5, r6, pc}
 80094ec:	2000052c 	.word	0x2000052c

080094f0 <_malloc_r>:
 80094f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f4:	1ccd      	adds	r5, r1, #3
 80094f6:	4607      	mov	r7, r0
 80094f8:	f025 0503 	bic.w	r5, r5, #3
 80094fc:	3508      	adds	r5, #8
 80094fe:	2d0c      	cmp	r5, #12
 8009500:	bf38      	it	cc
 8009502:	250c      	movcc	r5, #12
 8009504:	2d00      	cmp	r5, #0
 8009506:	db01      	blt.n	800950c <_malloc_r+0x1c>
 8009508:	42a9      	cmp	r1, r5
 800950a:	d905      	bls.n	8009518 <_malloc_r+0x28>
 800950c:	230c      	movs	r3, #12
 800950e:	2600      	movs	r6, #0
 8009510:	603b      	str	r3, [r7, #0]
 8009512:	4630      	mov	r0, r6
 8009514:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009518:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80095ec <_malloc_r+0xfc>
 800951c:	f000 f868 	bl	80095f0 <__malloc_lock>
 8009520:	f8d8 3000 	ldr.w	r3, [r8]
 8009524:	461c      	mov	r4, r3
 8009526:	bb5c      	cbnz	r4, 8009580 <_malloc_r+0x90>
 8009528:	4629      	mov	r1, r5
 800952a:	4638      	mov	r0, r7
 800952c:	f7ff ffc0 	bl	80094b0 <sbrk_aligned>
 8009530:	1c43      	adds	r3, r0, #1
 8009532:	4604      	mov	r4, r0
 8009534:	d155      	bne.n	80095e2 <_malloc_r+0xf2>
 8009536:	f8d8 4000 	ldr.w	r4, [r8]
 800953a:	4626      	mov	r6, r4
 800953c:	2e00      	cmp	r6, #0
 800953e:	d145      	bne.n	80095cc <_malloc_r+0xdc>
 8009540:	2c00      	cmp	r4, #0
 8009542:	d048      	beq.n	80095d6 <_malloc_r+0xe6>
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	4631      	mov	r1, r6
 8009548:	4638      	mov	r0, r7
 800954a:	eb04 0903 	add.w	r9, r4, r3
 800954e:	f000 fb5f 	bl	8009c10 <_sbrk_r>
 8009552:	4581      	cmp	r9, r0
 8009554:	d13f      	bne.n	80095d6 <_malloc_r+0xe6>
 8009556:	6821      	ldr	r1, [r4, #0]
 8009558:	4638      	mov	r0, r7
 800955a:	1a6d      	subs	r5, r5, r1
 800955c:	4629      	mov	r1, r5
 800955e:	f7ff ffa7 	bl	80094b0 <sbrk_aligned>
 8009562:	3001      	adds	r0, #1
 8009564:	d037      	beq.n	80095d6 <_malloc_r+0xe6>
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	442b      	add	r3, r5
 800956a:	6023      	str	r3, [r4, #0]
 800956c:	f8d8 3000 	ldr.w	r3, [r8]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d038      	beq.n	80095e6 <_malloc_r+0xf6>
 8009574:	685a      	ldr	r2, [r3, #4]
 8009576:	42a2      	cmp	r2, r4
 8009578:	d12b      	bne.n	80095d2 <_malloc_r+0xe2>
 800957a:	2200      	movs	r2, #0
 800957c:	605a      	str	r2, [r3, #4]
 800957e:	e00f      	b.n	80095a0 <_malloc_r+0xb0>
 8009580:	6822      	ldr	r2, [r4, #0]
 8009582:	1b52      	subs	r2, r2, r5
 8009584:	d41f      	bmi.n	80095c6 <_malloc_r+0xd6>
 8009586:	2a0b      	cmp	r2, #11
 8009588:	d917      	bls.n	80095ba <_malloc_r+0xca>
 800958a:	1961      	adds	r1, r4, r5
 800958c:	42a3      	cmp	r3, r4
 800958e:	6025      	str	r5, [r4, #0]
 8009590:	bf18      	it	ne
 8009592:	6059      	strne	r1, [r3, #4]
 8009594:	6863      	ldr	r3, [r4, #4]
 8009596:	bf08      	it	eq
 8009598:	f8c8 1000 	streq.w	r1, [r8]
 800959c:	5162      	str	r2, [r4, r5]
 800959e:	604b      	str	r3, [r1, #4]
 80095a0:	f104 060b 	add.w	r6, r4, #11
 80095a4:	4638      	mov	r0, r7
 80095a6:	f000 f829 	bl	80095fc <__malloc_unlock>
 80095aa:	1d23      	adds	r3, r4, #4
 80095ac:	f026 0607 	bic.w	r6, r6, #7
 80095b0:	1af2      	subs	r2, r6, r3
 80095b2:	d0ae      	beq.n	8009512 <_malloc_r+0x22>
 80095b4:	1b9b      	subs	r3, r3, r6
 80095b6:	50a3      	str	r3, [r4, r2]
 80095b8:	e7ab      	b.n	8009512 <_malloc_r+0x22>
 80095ba:	42a3      	cmp	r3, r4
 80095bc:	6862      	ldr	r2, [r4, #4]
 80095be:	d1dd      	bne.n	800957c <_malloc_r+0x8c>
 80095c0:	f8c8 2000 	str.w	r2, [r8]
 80095c4:	e7ec      	b.n	80095a0 <_malloc_r+0xb0>
 80095c6:	4623      	mov	r3, r4
 80095c8:	6864      	ldr	r4, [r4, #4]
 80095ca:	e7ac      	b.n	8009526 <_malloc_r+0x36>
 80095cc:	4634      	mov	r4, r6
 80095ce:	6876      	ldr	r6, [r6, #4]
 80095d0:	e7b4      	b.n	800953c <_malloc_r+0x4c>
 80095d2:	4613      	mov	r3, r2
 80095d4:	e7cc      	b.n	8009570 <_malloc_r+0x80>
 80095d6:	230c      	movs	r3, #12
 80095d8:	4638      	mov	r0, r7
 80095da:	603b      	str	r3, [r7, #0]
 80095dc:	f000 f80e 	bl	80095fc <__malloc_unlock>
 80095e0:	e797      	b.n	8009512 <_malloc_r+0x22>
 80095e2:	6025      	str	r5, [r4, #0]
 80095e4:	e7dc      	b.n	80095a0 <_malloc_r+0xb0>
 80095e6:	605b      	str	r3, [r3, #4]
 80095e8:	deff      	udf	#255	; 0xff
 80095ea:	bf00      	nop
 80095ec:	20000528 	.word	0x20000528

080095f0 <__malloc_lock>:
 80095f0:	4801      	ldr	r0, [pc, #4]	; (80095f8 <__malloc_lock+0x8>)
 80095f2:	f7ff bf0f 	b.w	8009414 <__retarget_lock_acquire_recursive>
 80095f6:	bf00      	nop
 80095f8:	20000524 	.word	0x20000524

080095fc <__malloc_unlock>:
 80095fc:	4801      	ldr	r0, [pc, #4]	; (8009604 <__malloc_unlock+0x8>)
 80095fe:	f7ff bf0a 	b.w	8009416 <__retarget_lock_release_recursive>
 8009602:	bf00      	nop
 8009604:	20000524 	.word	0x20000524

08009608 <__ssputs_r>:
 8009608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800960c:	461f      	mov	r7, r3
 800960e:	688e      	ldr	r6, [r1, #8]
 8009610:	4682      	mov	sl, r0
 8009612:	460c      	mov	r4, r1
 8009614:	42be      	cmp	r6, r7
 8009616:	4690      	mov	r8, r2
 8009618:	680b      	ldr	r3, [r1, #0]
 800961a:	d82c      	bhi.n	8009676 <__ssputs_r+0x6e>
 800961c:	898a      	ldrh	r2, [r1, #12]
 800961e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009622:	d026      	beq.n	8009672 <__ssputs_r+0x6a>
 8009624:	6965      	ldr	r5, [r4, #20]
 8009626:	6909      	ldr	r1, [r1, #16]
 8009628:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800962c:	eba3 0901 	sub.w	r9, r3, r1
 8009630:	1c7b      	adds	r3, r7, #1
 8009632:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009636:	444b      	add	r3, r9
 8009638:	106d      	asrs	r5, r5, #1
 800963a:	429d      	cmp	r5, r3
 800963c:	bf38      	it	cc
 800963e:	461d      	movcc	r5, r3
 8009640:	0553      	lsls	r3, r2, #21
 8009642:	d527      	bpl.n	8009694 <__ssputs_r+0x8c>
 8009644:	4629      	mov	r1, r5
 8009646:	f7ff ff53 	bl	80094f0 <_malloc_r>
 800964a:	4606      	mov	r6, r0
 800964c:	b360      	cbz	r0, 80096a8 <__ssputs_r+0xa0>
 800964e:	464a      	mov	r2, r9
 8009650:	6921      	ldr	r1, [r4, #16]
 8009652:	f000 fafb 	bl	8009c4c <memcpy>
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800965c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009660:	81a3      	strh	r3, [r4, #12]
 8009662:	6126      	str	r6, [r4, #16]
 8009664:	444e      	add	r6, r9
 8009666:	6165      	str	r5, [r4, #20]
 8009668:	eba5 0509 	sub.w	r5, r5, r9
 800966c:	6026      	str	r6, [r4, #0]
 800966e:	463e      	mov	r6, r7
 8009670:	60a5      	str	r5, [r4, #8]
 8009672:	42be      	cmp	r6, r7
 8009674:	d900      	bls.n	8009678 <__ssputs_r+0x70>
 8009676:	463e      	mov	r6, r7
 8009678:	4632      	mov	r2, r6
 800967a:	4641      	mov	r1, r8
 800967c:	6820      	ldr	r0, [r4, #0]
 800967e:	f000 faad 	bl	8009bdc <memmove>
 8009682:	68a3      	ldr	r3, [r4, #8]
 8009684:	2000      	movs	r0, #0
 8009686:	1b9b      	subs	r3, r3, r6
 8009688:	60a3      	str	r3, [r4, #8]
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	4433      	add	r3, r6
 800968e:	6023      	str	r3, [r4, #0]
 8009690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009694:	462a      	mov	r2, r5
 8009696:	f000 fae6 	bl	8009c66 <_realloc_r>
 800969a:	4606      	mov	r6, r0
 800969c:	2800      	cmp	r0, #0
 800969e:	d1e0      	bne.n	8009662 <__ssputs_r+0x5a>
 80096a0:	6921      	ldr	r1, [r4, #16]
 80096a2:	4650      	mov	r0, sl
 80096a4:	f7ff feb8 	bl	8009418 <_free_r>
 80096a8:	230c      	movs	r3, #12
 80096aa:	f04f 30ff 	mov.w	r0, #4294967295
 80096ae:	f8ca 3000 	str.w	r3, [sl]
 80096b2:	89a3      	ldrh	r3, [r4, #12]
 80096b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096b8:	81a3      	strh	r3, [r4, #12]
 80096ba:	e7e9      	b.n	8009690 <__ssputs_r+0x88>

080096bc <_svfiprintf_r>:
 80096bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c0:	4698      	mov	r8, r3
 80096c2:	898b      	ldrh	r3, [r1, #12]
 80096c4:	b09d      	sub	sp, #116	; 0x74
 80096c6:	4607      	mov	r7, r0
 80096c8:	061b      	lsls	r3, r3, #24
 80096ca:	460d      	mov	r5, r1
 80096cc:	4614      	mov	r4, r2
 80096ce:	d50e      	bpl.n	80096ee <_svfiprintf_r+0x32>
 80096d0:	690b      	ldr	r3, [r1, #16]
 80096d2:	b963      	cbnz	r3, 80096ee <_svfiprintf_r+0x32>
 80096d4:	2140      	movs	r1, #64	; 0x40
 80096d6:	f7ff ff0b 	bl	80094f0 <_malloc_r>
 80096da:	6028      	str	r0, [r5, #0]
 80096dc:	6128      	str	r0, [r5, #16]
 80096de:	b920      	cbnz	r0, 80096ea <_svfiprintf_r+0x2e>
 80096e0:	230c      	movs	r3, #12
 80096e2:	603b      	str	r3, [r7, #0]
 80096e4:	f04f 30ff 	mov.w	r0, #4294967295
 80096e8:	e0d0      	b.n	800988c <_svfiprintf_r+0x1d0>
 80096ea:	2340      	movs	r3, #64	; 0x40
 80096ec:	616b      	str	r3, [r5, #20]
 80096ee:	2300      	movs	r3, #0
 80096f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80096f4:	f04f 0901 	mov.w	r9, #1
 80096f8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098a4 <_svfiprintf_r+0x1e8>
 80096fc:	9309      	str	r3, [sp, #36]	; 0x24
 80096fe:	2320      	movs	r3, #32
 8009700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009704:	2330      	movs	r3, #48	; 0x30
 8009706:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800970a:	4623      	mov	r3, r4
 800970c:	469a      	mov	sl, r3
 800970e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009712:	b10a      	cbz	r2, 8009718 <_svfiprintf_r+0x5c>
 8009714:	2a25      	cmp	r2, #37	; 0x25
 8009716:	d1f9      	bne.n	800970c <_svfiprintf_r+0x50>
 8009718:	ebba 0b04 	subs.w	fp, sl, r4
 800971c:	d00b      	beq.n	8009736 <_svfiprintf_r+0x7a>
 800971e:	465b      	mov	r3, fp
 8009720:	4622      	mov	r2, r4
 8009722:	4629      	mov	r1, r5
 8009724:	4638      	mov	r0, r7
 8009726:	f7ff ff6f 	bl	8009608 <__ssputs_r>
 800972a:	3001      	adds	r0, #1
 800972c:	f000 80a9 	beq.w	8009882 <_svfiprintf_r+0x1c6>
 8009730:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009732:	445a      	add	r2, fp
 8009734:	9209      	str	r2, [sp, #36]	; 0x24
 8009736:	f89a 3000 	ldrb.w	r3, [sl]
 800973a:	2b00      	cmp	r3, #0
 800973c:	f000 80a1 	beq.w	8009882 <_svfiprintf_r+0x1c6>
 8009740:	2300      	movs	r3, #0
 8009742:	f04f 32ff 	mov.w	r2, #4294967295
 8009746:	f10a 0a01 	add.w	sl, sl, #1
 800974a:	9304      	str	r3, [sp, #16]
 800974c:	9307      	str	r3, [sp, #28]
 800974e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009752:	931a      	str	r3, [sp, #104]	; 0x68
 8009754:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009758:	4654      	mov	r4, sl
 800975a:	2205      	movs	r2, #5
 800975c:	4851      	ldr	r0, [pc, #324]	; (80098a4 <_svfiprintf_r+0x1e8>)
 800975e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009762:	f000 fa65 	bl	8009c30 <memchr>
 8009766:	9a04      	ldr	r2, [sp, #16]
 8009768:	b9d8      	cbnz	r0, 80097a2 <_svfiprintf_r+0xe6>
 800976a:	06d0      	lsls	r0, r2, #27
 800976c:	bf44      	itt	mi
 800976e:	2320      	movmi	r3, #32
 8009770:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009774:	0711      	lsls	r1, r2, #28
 8009776:	bf44      	itt	mi
 8009778:	232b      	movmi	r3, #43	; 0x2b
 800977a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800977e:	f89a 3000 	ldrb.w	r3, [sl]
 8009782:	2b2a      	cmp	r3, #42	; 0x2a
 8009784:	d015      	beq.n	80097b2 <_svfiprintf_r+0xf6>
 8009786:	9a07      	ldr	r2, [sp, #28]
 8009788:	4654      	mov	r4, sl
 800978a:	2000      	movs	r0, #0
 800978c:	f04f 0c0a 	mov.w	ip, #10
 8009790:	4621      	mov	r1, r4
 8009792:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009796:	3b30      	subs	r3, #48	; 0x30
 8009798:	2b09      	cmp	r3, #9
 800979a:	d94d      	bls.n	8009838 <_svfiprintf_r+0x17c>
 800979c:	b1b0      	cbz	r0, 80097cc <_svfiprintf_r+0x110>
 800979e:	9207      	str	r2, [sp, #28]
 80097a0:	e014      	b.n	80097cc <_svfiprintf_r+0x110>
 80097a2:	eba0 0308 	sub.w	r3, r0, r8
 80097a6:	46a2      	mov	sl, r4
 80097a8:	fa09 f303 	lsl.w	r3, r9, r3
 80097ac:	4313      	orrs	r3, r2
 80097ae:	9304      	str	r3, [sp, #16]
 80097b0:	e7d2      	b.n	8009758 <_svfiprintf_r+0x9c>
 80097b2:	9b03      	ldr	r3, [sp, #12]
 80097b4:	1d19      	adds	r1, r3, #4
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	9103      	str	r1, [sp, #12]
 80097bc:	bfbb      	ittet	lt
 80097be:	425b      	neglt	r3, r3
 80097c0:	f042 0202 	orrlt.w	r2, r2, #2
 80097c4:	9307      	strge	r3, [sp, #28]
 80097c6:	9307      	strlt	r3, [sp, #28]
 80097c8:	bfb8      	it	lt
 80097ca:	9204      	strlt	r2, [sp, #16]
 80097cc:	7823      	ldrb	r3, [r4, #0]
 80097ce:	2b2e      	cmp	r3, #46	; 0x2e
 80097d0:	d10c      	bne.n	80097ec <_svfiprintf_r+0x130>
 80097d2:	7863      	ldrb	r3, [r4, #1]
 80097d4:	2b2a      	cmp	r3, #42	; 0x2a
 80097d6:	d134      	bne.n	8009842 <_svfiprintf_r+0x186>
 80097d8:	9b03      	ldr	r3, [sp, #12]
 80097da:	3402      	adds	r4, #2
 80097dc:	1d1a      	adds	r2, r3, #4
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	9203      	str	r2, [sp, #12]
 80097e4:	bfb8      	it	lt
 80097e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80097ea:	9305      	str	r3, [sp, #20]
 80097ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80098b4 <_svfiprintf_r+0x1f8>
 80097f0:	2203      	movs	r2, #3
 80097f2:	7821      	ldrb	r1, [r4, #0]
 80097f4:	4650      	mov	r0, sl
 80097f6:	f000 fa1b 	bl	8009c30 <memchr>
 80097fa:	b138      	cbz	r0, 800980c <_svfiprintf_r+0x150>
 80097fc:	eba0 000a 	sub.w	r0, r0, sl
 8009800:	2240      	movs	r2, #64	; 0x40
 8009802:	9b04      	ldr	r3, [sp, #16]
 8009804:	3401      	adds	r4, #1
 8009806:	4082      	lsls	r2, r0
 8009808:	4313      	orrs	r3, r2
 800980a:	9304      	str	r3, [sp, #16]
 800980c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009810:	2206      	movs	r2, #6
 8009812:	4825      	ldr	r0, [pc, #148]	; (80098a8 <_svfiprintf_r+0x1ec>)
 8009814:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009818:	f000 fa0a 	bl	8009c30 <memchr>
 800981c:	2800      	cmp	r0, #0
 800981e:	d038      	beq.n	8009892 <_svfiprintf_r+0x1d6>
 8009820:	4b22      	ldr	r3, [pc, #136]	; (80098ac <_svfiprintf_r+0x1f0>)
 8009822:	bb1b      	cbnz	r3, 800986c <_svfiprintf_r+0x1b0>
 8009824:	9b03      	ldr	r3, [sp, #12]
 8009826:	3307      	adds	r3, #7
 8009828:	f023 0307 	bic.w	r3, r3, #7
 800982c:	3308      	adds	r3, #8
 800982e:	9303      	str	r3, [sp, #12]
 8009830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009832:	4433      	add	r3, r6
 8009834:	9309      	str	r3, [sp, #36]	; 0x24
 8009836:	e768      	b.n	800970a <_svfiprintf_r+0x4e>
 8009838:	fb0c 3202 	mla	r2, ip, r2, r3
 800983c:	460c      	mov	r4, r1
 800983e:	2001      	movs	r0, #1
 8009840:	e7a6      	b.n	8009790 <_svfiprintf_r+0xd4>
 8009842:	2300      	movs	r3, #0
 8009844:	3401      	adds	r4, #1
 8009846:	f04f 0c0a 	mov.w	ip, #10
 800984a:	4619      	mov	r1, r3
 800984c:	9305      	str	r3, [sp, #20]
 800984e:	4620      	mov	r0, r4
 8009850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009854:	3a30      	subs	r2, #48	; 0x30
 8009856:	2a09      	cmp	r2, #9
 8009858:	d903      	bls.n	8009862 <_svfiprintf_r+0x1a6>
 800985a:	2b00      	cmp	r3, #0
 800985c:	d0c6      	beq.n	80097ec <_svfiprintf_r+0x130>
 800985e:	9105      	str	r1, [sp, #20]
 8009860:	e7c4      	b.n	80097ec <_svfiprintf_r+0x130>
 8009862:	fb0c 2101 	mla	r1, ip, r1, r2
 8009866:	4604      	mov	r4, r0
 8009868:	2301      	movs	r3, #1
 800986a:	e7f0      	b.n	800984e <_svfiprintf_r+0x192>
 800986c:	ab03      	add	r3, sp, #12
 800986e:	462a      	mov	r2, r5
 8009870:	a904      	add	r1, sp, #16
 8009872:	4638      	mov	r0, r7
 8009874:	9300      	str	r3, [sp, #0]
 8009876:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <_svfiprintf_r+0x1f4>)
 8009878:	f3af 8000 	nop.w
 800987c:	1c42      	adds	r2, r0, #1
 800987e:	4606      	mov	r6, r0
 8009880:	d1d6      	bne.n	8009830 <_svfiprintf_r+0x174>
 8009882:	89ab      	ldrh	r3, [r5, #12]
 8009884:	065b      	lsls	r3, r3, #25
 8009886:	f53f af2d 	bmi.w	80096e4 <_svfiprintf_r+0x28>
 800988a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800988c:	b01d      	add	sp, #116	; 0x74
 800988e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009892:	ab03      	add	r3, sp, #12
 8009894:	462a      	mov	r2, r5
 8009896:	a904      	add	r1, sp, #16
 8009898:	4638      	mov	r0, r7
 800989a:	9300      	str	r3, [sp, #0]
 800989c:	4b04      	ldr	r3, [pc, #16]	; (80098b0 <_svfiprintf_r+0x1f4>)
 800989e:	f000 f87d 	bl	800999c <_printf_i>
 80098a2:	e7eb      	b.n	800987c <_svfiprintf_r+0x1c0>
 80098a4:	08009e18 	.word	0x08009e18
 80098a8:	08009e22 	.word	0x08009e22
 80098ac:	00000000 	.word	0x00000000
 80098b0:	08009609 	.word	0x08009609
 80098b4:	08009e1e 	.word	0x08009e1e

080098b8 <_printf_common>:
 80098b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098bc:	4616      	mov	r6, r2
 80098be:	4699      	mov	r9, r3
 80098c0:	688a      	ldr	r2, [r1, #8]
 80098c2:	4607      	mov	r7, r0
 80098c4:	690b      	ldr	r3, [r1, #16]
 80098c6:	460c      	mov	r4, r1
 80098c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098cc:	4293      	cmp	r3, r2
 80098ce:	bfb8      	it	lt
 80098d0:	4613      	movlt	r3, r2
 80098d2:	6033      	str	r3, [r6, #0]
 80098d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098d8:	b10a      	cbz	r2, 80098de <_printf_common+0x26>
 80098da:	3301      	adds	r3, #1
 80098dc:	6033      	str	r3, [r6, #0]
 80098de:	6823      	ldr	r3, [r4, #0]
 80098e0:	0699      	lsls	r1, r3, #26
 80098e2:	bf42      	ittt	mi
 80098e4:	6833      	ldrmi	r3, [r6, #0]
 80098e6:	3302      	addmi	r3, #2
 80098e8:	6033      	strmi	r3, [r6, #0]
 80098ea:	6825      	ldr	r5, [r4, #0]
 80098ec:	f015 0506 	ands.w	r5, r5, #6
 80098f0:	d106      	bne.n	8009900 <_printf_common+0x48>
 80098f2:	f104 0a19 	add.w	sl, r4, #25
 80098f6:	68e3      	ldr	r3, [r4, #12]
 80098f8:	6832      	ldr	r2, [r6, #0]
 80098fa:	1a9b      	subs	r3, r3, r2
 80098fc:	42ab      	cmp	r3, r5
 80098fe:	dc2b      	bgt.n	8009958 <_printf_common+0xa0>
 8009900:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009904:	1e13      	subs	r3, r2, #0
 8009906:	6822      	ldr	r2, [r4, #0]
 8009908:	bf18      	it	ne
 800990a:	2301      	movne	r3, #1
 800990c:	0692      	lsls	r2, r2, #26
 800990e:	d430      	bmi.n	8009972 <_printf_common+0xba>
 8009910:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009914:	4649      	mov	r1, r9
 8009916:	4638      	mov	r0, r7
 8009918:	47c0      	blx	r8
 800991a:	3001      	adds	r0, #1
 800991c:	d023      	beq.n	8009966 <_printf_common+0xae>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	341a      	adds	r4, #26
 8009922:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009926:	f003 0306 	and.w	r3, r3, #6
 800992a:	2b04      	cmp	r3, #4
 800992c:	bf0a      	itet	eq
 800992e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009932:	2500      	movne	r5, #0
 8009934:	6833      	ldreq	r3, [r6, #0]
 8009936:	f04f 0600 	mov.w	r6, #0
 800993a:	bf08      	it	eq
 800993c:	1aed      	subeq	r5, r5, r3
 800993e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009942:	bf08      	it	eq
 8009944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009948:	4293      	cmp	r3, r2
 800994a:	bfc4      	itt	gt
 800994c:	1a9b      	subgt	r3, r3, r2
 800994e:	18ed      	addgt	r5, r5, r3
 8009950:	42b5      	cmp	r5, r6
 8009952:	d11a      	bne.n	800998a <_printf_common+0xd2>
 8009954:	2000      	movs	r0, #0
 8009956:	e008      	b.n	800996a <_printf_common+0xb2>
 8009958:	2301      	movs	r3, #1
 800995a:	4652      	mov	r2, sl
 800995c:	4649      	mov	r1, r9
 800995e:	4638      	mov	r0, r7
 8009960:	47c0      	blx	r8
 8009962:	3001      	adds	r0, #1
 8009964:	d103      	bne.n	800996e <_printf_common+0xb6>
 8009966:	f04f 30ff 	mov.w	r0, #4294967295
 800996a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800996e:	3501      	adds	r5, #1
 8009970:	e7c1      	b.n	80098f6 <_printf_common+0x3e>
 8009972:	18e1      	adds	r1, r4, r3
 8009974:	1c5a      	adds	r2, r3, #1
 8009976:	2030      	movs	r0, #48	; 0x30
 8009978:	3302      	adds	r3, #2
 800997a:	4422      	add	r2, r4
 800997c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009980:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009984:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009988:	e7c2      	b.n	8009910 <_printf_common+0x58>
 800998a:	2301      	movs	r3, #1
 800998c:	4622      	mov	r2, r4
 800998e:	4649      	mov	r1, r9
 8009990:	4638      	mov	r0, r7
 8009992:	47c0      	blx	r8
 8009994:	3001      	adds	r0, #1
 8009996:	d0e6      	beq.n	8009966 <_printf_common+0xae>
 8009998:	3601      	adds	r6, #1
 800999a:	e7d9      	b.n	8009950 <_printf_common+0x98>

0800999c <_printf_i>:
 800999c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099a0:	7e0f      	ldrb	r7, [r1, #24]
 80099a2:	4691      	mov	r9, r2
 80099a4:	4680      	mov	r8, r0
 80099a6:	460c      	mov	r4, r1
 80099a8:	2f78      	cmp	r7, #120	; 0x78
 80099aa:	469a      	mov	sl, r3
 80099ac:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099b2:	d807      	bhi.n	80099c4 <_printf_i+0x28>
 80099b4:	2f62      	cmp	r7, #98	; 0x62
 80099b6:	d80a      	bhi.n	80099ce <_printf_i+0x32>
 80099b8:	2f00      	cmp	r7, #0
 80099ba:	f000 80d3 	beq.w	8009b64 <_printf_i+0x1c8>
 80099be:	2f58      	cmp	r7, #88	; 0x58
 80099c0:	f000 80bf 	beq.w	8009b42 <_printf_i+0x1a6>
 80099c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099cc:	e03a      	b.n	8009a44 <_printf_i+0xa8>
 80099ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099d2:	2b15      	cmp	r3, #21
 80099d4:	d8f6      	bhi.n	80099c4 <_printf_i+0x28>
 80099d6:	a101      	add	r1, pc, #4	; (adr r1, 80099dc <_printf_i+0x40>)
 80099d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099dc:	08009a35 	.word	0x08009a35
 80099e0:	08009a49 	.word	0x08009a49
 80099e4:	080099c5 	.word	0x080099c5
 80099e8:	080099c5 	.word	0x080099c5
 80099ec:	080099c5 	.word	0x080099c5
 80099f0:	080099c5 	.word	0x080099c5
 80099f4:	08009a49 	.word	0x08009a49
 80099f8:	080099c5 	.word	0x080099c5
 80099fc:	080099c5 	.word	0x080099c5
 8009a00:	080099c5 	.word	0x080099c5
 8009a04:	080099c5 	.word	0x080099c5
 8009a08:	08009b4b 	.word	0x08009b4b
 8009a0c:	08009a75 	.word	0x08009a75
 8009a10:	08009b07 	.word	0x08009b07
 8009a14:	080099c5 	.word	0x080099c5
 8009a18:	080099c5 	.word	0x080099c5
 8009a1c:	08009b6d 	.word	0x08009b6d
 8009a20:	080099c5 	.word	0x080099c5
 8009a24:	08009a75 	.word	0x08009a75
 8009a28:	080099c5 	.word	0x080099c5
 8009a2c:	080099c5 	.word	0x080099c5
 8009a30:	08009b0f 	.word	0x08009b0f
 8009a34:	682b      	ldr	r3, [r5, #0]
 8009a36:	1d1a      	adds	r2, r3, #4
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	602a      	str	r2, [r5, #0]
 8009a3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a44:	2301      	movs	r3, #1
 8009a46:	e09e      	b.n	8009b86 <_printf_i+0x1ea>
 8009a48:	6820      	ldr	r0, [r4, #0]
 8009a4a:	682b      	ldr	r3, [r5, #0]
 8009a4c:	0607      	lsls	r7, r0, #24
 8009a4e:	f103 0104 	add.w	r1, r3, #4
 8009a52:	6029      	str	r1, [r5, #0]
 8009a54:	d501      	bpl.n	8009a5a <_printf_i+0xbe>
 8009a56:	681e      	ldr	r6, [r3, #0]
 8009a58:	e003      	b.n	8009a62 <_printf_i+0xc6>
 8009a5a:	0646      	lsls	r6, r0, #25
 8009a5c:	d5fb      	bpl.n	8009a56 <_printf_i+0xba>
 8009a5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009a62:	2e00      	cmp	r6, #0
 8009a64:	da03      	bge.n	8009a6e <_printf_i+0xd2>
 8009a66:	232d      	movs	r3, #45	; 0x2d
 8009a68:	4276      	negs	r6, r6
 8009a6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a6e:	4859      	ldr	r0, [pc, #356]	; (8009bd4 <_printf_i+0x238>)
 8009a70:	230a      	movs	r3, #10
 8009a72:	e012      	b.n	8009a9a <_printf_i+0xfe>
 8009a74:	682b      	ldr	r3, [r5, #0]
 8009a76:	6820      	ldr	r0, [r4, #0]
 8009a78:	1d19      	adds	r1, r3, #4
 8009a7a:	6029      	str	r1, [r5, #0]
 8009a7c:	0605      	lsls	r5, r0, #24
 8009a7e:	d501      	bpl.n	8009a84 <_printf_i+0xe8>
 8009a80:	681e      	ldr	r6, [r3, #0]
 8009a82:	e002      	b.n	8009a8a <_printf_i+0xee>
 8009a84:	0641      	lsls	r1, r0, #25
 8009a86:	d5fb      	bpl.n	8009a80 <_printf_i+0xe4>
 8009a88:	881e      	ldrh	r6, [r3, #0]
 8009a8a:	2f6f      	cmp	r7, #111	; 0x6f
 8009a8c:	4851      	ldr	r0, [pc, #324]	; (8009bd4 <_printf_i+0x238>)
 8009a8e:	bf0c      	ite	eq
 8009a90:	2308      	moveq	r3, #8
 8009a92:	230a      	movne	r3, #10
 8009a94:	2100      	movs	r1, #0
 8009a96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a9a:	6865      	ldr	r5, [r4, #4]
 8009a9c:	2d00      	cmp	r5, #0
 8009a9e:	60a5      	str	r5, [r4, #8]
 8009aa0:	bfa2      	ittt	ge
 8009aa2:	6821      	ldrge	r1, [r4, #0]
 8009aa4:	f021 0104 	bicge.w	r1, r1, #4
 8009aa8:	6021      	strge	r1, [r4, #0]
 8009aaa:	b90e      	cbnz	r6, 8009ab0 <_printf_i+0x114>
 8009aac:	2d00      	cmp	r5, #0
 8009aae:	d04a      	beq.n	8009b46 <_printf_i+0x1aa>
 8009ab0:	4615      	mov	r5, r2
 8009ab2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ab6:	fb03 6711 	mls	r7, r3, r1, r6
 8009aba:	5dc7      	ldrb	r7, [r0, r7]
 8009abc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ac0:	4637      	mov	r7, r6
 8009ac2:	460e      	mov	r6, r1
 8009ac4:	42bb      	cmp	r3, r7
 8009ac6:	d9f4      	bls.n	8009ab2 <_printf_i+0x116>
 8009ac8:	2b08      	cmp	r3, #8
 8009aca:	d10b      	bne.n	8009ae4 <_printf_i+0x148>
 8009acc:	6823      	ldr	r3, [r4, #0]
 8009ace:	07de      	lsls	r6, r3, #31
 8009ad0:	d508      	bpl.n	8009ae4 <_printf_i+0x148>
 8009ad2:	6923      	ldr	r3, [r4, #16]
 8009ad4:	6861      	ldr	r1, [r4, #4]
 8009ad6:	4299      	cmp	r1, r3
 8009ad8:	bfde      	ittt	le
 8009ada:	2330      	movle	r3, #48	; 0x30
 8009adc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ae0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ae4:	1b52      	subs	r2, r2, r5
 8009ae6:	6122      	str	r2, [r4, #16]
 8009ae8:	464b      	mov	r3, r9
 8009aea:	aa03      	add	r2, sp, #12
 8009aec:	4621      	mov	r1, r4
 8009aee:	4640      	mov	r0, r8
 8009af0:	f8cd a000 	str.w	sl, [sp]
 8009af4:	f7ff fee0 	bl	80098b8 <_printf_common>
 8009af8:	3001      	adds	r0, #1
 8009afa:	d149      	bne.n	8009b90 <_printf_i+0x1f4>
 8009afc:	f04f 30ff 	mov.w	r0, #4294967295
 8009b00:	b004      	add	sp, #16
 8009b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	f043 0320 	orr.w	r3, r3, #32
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	2778      	movs	r7, #120	; 0x78
 8009b10:	4831      	ldr	r0, [pc, #196]	; (8009bd8 <_printf_i+0x23c>)
 8009b12:	6823      	ldr	r3, [r4, #0]
 8009b14:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b18:	061f      	lsls	r7, r3, #24
 8009b1a:	6829      	ldr	r1, [r5, #0]
 8009b1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b20:	d402      	bmi.n	8009b28 <_printf_i+0x18c>
 8009b22:	065f      	lsls	r7, r3, #25
 8009b24:	bf48      	it	mi
 8009b26:	b2b6      	uxthmi	r6, r6
 8009b28:	07df      	lsls	r7, r3, #31
 8009b2a:	6029      	str	r1, [r5, #0]
 8009b2c:	bf44      	itt	mi
 8009b2e:	f043 0320 	orrmi.w	r3, r3, #32
 8009b32:	6023      	strmi	r3, [r4, #0]
 8009b34:	b91e      	cbnz	r6, 8009b3e <_printf_i+0x1a2>
 8009b36:	6823      	ldr	r3, [r4, #0]
 8009b38:	f023 0320 	bic.w	r3, r3, #32
 8009b3c:	6023      	str	r3, [r4, #0]
 8009b3e:	2310      	movs	r3, #16
 8009b40:	e7a8      	b.n	8009a94 <_printf_i+0xf8>
 8009b42:	4824      	ldr	r0, [pc, #144]	; (8009bd4 <_printf_i+0x238>)
 8009b44:	e7e5      	b.n	8009b12 <_printf_i+0x176>
 8009b46:	4615      	mov	r5, r2
 8009b48:	e7be      	b.n	8009ac8 <_printf_i+0x12c>
 8009b4a:	682b      	ldr	r3, [r5, #0]
 8009b4c:	6826      	ldr	r6, [r4, #0]
 8009b4e:	1d18      	adds	r0, r3, #4
 8009b50:	6961      	ldr	r1, [r4, #20]
 8009b52:	6028      	str	r0, [r5, #0]
 8009b54:	0635      	lsls	r5, r6, #24
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	d501      	bpl.n	8009b5e <_printf_i+0x1c2>
 8009b5a:	6019      	str	r1, [r3, #0]
 8009b5c:	e002      	b.n	8009b64 <_printf_i+0x1c8>
 8009b5e:	0670      	lsls	r0, r6, #25
 8009b60:	d5fb      	bpl.n	8009b5a <_printf_i+0x1be>
 8009b62:	8019      	strh	r1, [r3, #0]
 8009b64:	2300      	movs	r3, #0
 8009b66:	4615      	mov	r5, r2
 8009b68:	6123      	str	r3, [r4, #16]
 8009b6a:	e7bd      	b.n	8009ae8 <_printf_i+0x14c>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	2100      	movs	r1, #0
 8009b70:	1d1a      	adds	r2, r3, #4
 8009b72:	602a      	str	r2, [r5, #0]
 8009b74:	681d      	ldr	r5, [r3, #0]
 8009b76:	6862      	ldr	r2, [r4, #4]
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f000 f859 	bl	8009c30 <memchr>
 8009b7e:	b108      	cbz	r0, 8009b84 <_printf_i+0x1e8>
 8009b80:	1b40      	subs	r0, r0, r5
 8009b82:	6060      	str	r0, [r4, #4]
 8009b84:	6863      	ldr	r3, [r4, #4]
 8009b86:	6123      	str	r3, [r4, #16]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b8e:	e7ab      	b.n	8009ae8 <_printf_i+0x14c>
 8009b90:	6923      	ldr	r3, [r4, #16]
 8009b92:	462a      	mov	r2, r5
 8009b94:	4649      	mov	r1, r9
 8009b96:	4640      	mov	r0, r8
 8009b98:	47d0      	blx	sl
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	d0ae      	beq.n	8009afc <_printf_i+0x160>
 8009b9e:	6823      	ldr	r3, [r4, #0]
 8009ba0:	079b      	lsls	r3, r3, #30
 8009ba2:	d413      	bmi.n	8009bcc <_printf_i+0x230>
 8009ba4:	68e0      	ldr	r0, [r4, #12]
 8009ba6:	9b03      	ldr	r3, [sp, #12]
 8009ba8:	4298      	cmp	r0, r3
 8009baa:	bfb8      	it	lt
 8009bac:	4618      	movlt	r0, r3
 8009bae:	e7a7      	b.n	8009b00 <_printf_i+0x164>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	4632      	mov	r2, r6
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	4640      	mov	r0, r8
 8009bb8:	47d0      	blx	sl
 8009bba:	3001      	adds	r0, #1
 8009bbc:	d09e      	beq.n	8009afc <_printf_i+0x160>
 8009bbe:	3501      	adds	r5, #1
 8009bc0:	68e3      	ldr	r3, [r4, #12]
 8009bc2:	9903      	ldr	r1, [sp, #12]
 8009bc4:	1a5b      	subs	r3, r3, r1
 8009bc6:	42ab      	cmp	r3, r5
 8009bc8:	dcf2      	bgt.n	8009bb0 <_printf_i+0x214>
 8009bca:	e7eb      	b.n	8009ba4 <_printf_i+0x208>
 8009bcc:	2500      	movs	r5, #0
 8009bce:	f104 0619 	add.w	r6, r4, #25
 8009bd2:	e7f5      	b.n	8009bc0 <_printf_i+0x224>
 8009bd4:	08009e29 	.word	0x08009e29
 8009bd8:	08009e3a 	.word	0x08009e3a

08009bdc <memmove>:
 8009bdc:	4288      	cmp	r0, r1
 8009bde:	b510      	push	{r4, lr}
 8009be0:	eb01 0402 	add.w	r4, r1, r2
 8009be4:	d902      	bls.n	8009bec <memmove+0x10>
 8009be6:	4284      	cmp	r4, r0
 8009be8:	4623      	mov	r3, r4
 8009bea:	d807      	bhi.n	8009bfc <memmove+0x20>
 8009bec:	1e43      	subs	r3, r0, #1
 8009bee:	42a1      	cmp	r1, r4
 8009bf0:	d008      	beq.n	8009c04 <memmove+0x28>
 8009bf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009bf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009bfa:	e7f8      	b.n	8009bee <memmove+0x12>
 8009bfc:	4402      	add	r2, r0
 8009bfe:	4601      	mov	r1, r0
 8009c00:	428a      	cmp	r2, r1
 8009c02:	d100      	bne.n	8009c06 <memmove+0x2a>
 8009c04:	bd10      	pop	{r4, pc}
 8009c06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c0e:	e7f7      	b.n	8009c00 <memmove+0x24>

08009c10 <_sbrk_r>:
 8009c10:	b538      	push	{r3, r4, r5, lr}
 8009c12:	2300      	movs	r3, #0
 8009c14:	4d05      	ldr	r5, [pc, #20]	; (8009c2c <_sbrk_r+0x1c>)
 8009c16:	4604      	mov	r4, r0
 8009c18:	4608      	mov	r0, r1
 8009c1a:	602b      	str	r3, [r5, #0]
 8009c1c:	f7f7 fc4a 	bl	80014b4 <_sbrk>
 8009c20:	1c43      	adds	r3, r0, #1
 8009c22:	d102      	bne.n	8009c2a <_sbrk_r+0x1a>
 8009c24:	682b      	ldr	r3, [r5, #0]
 8009c26:	b103      	cbz	r3, 8009c2a <_sbrk_r+0x1a>
 8009c28:	6023      	str	r3, [r4, #0]
 8009c2a:	bd38      	pop	{r3, r4, r5, pc}
 8009c2c:	20000520 	.word	0x20000520

08009c30 <memchr>:
 8009c30:	b2c9      	uxtb	r1, r1
 8009c32:	4402      	add	r2, r0
 8009c34:	b510      	push	{r4, lr}
 8009c36:	4290      	cmp	r0, r2
 8009c38:	4603      	mov	r3, r0
 8009c3a:	d101      	bne.n	8009c40 <memchr+0x10>
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	e003      	b.n	8009c48 <memchr+0x18>
 8009c40:	781c      	ldrb	r4, [r3, #0]
 8009c42:	3001      	adds	r0, #1
 8009c44:	428c      	cmp	r4, r1
 8009c46:	d1f6      	bne.n	8009c36 <memchr+0x6>
 8009c48:	4618      	mov	r0, r3
 8009c4a:	bd10      	pop	{r4, pc}

08009c4c <memcpy>:
 8009c4c:	440a      	add	r2, r1
 8009c4e:	1e43      	subs	r3, r0, #1
 8009c50:	4291      	cmp	r1, r2
 8009c52:	d100      	bne.n	8009c56 <memcpy+0xa>
 8009c54:	4770      	bx	lr
 8009c56:	b510      	push	{r4, lr}
 8009c58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c5c:	4291      	cmp	r1, r2
 8009c5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c62:	d1f9      	bne.n	8009c58 <memcpy+0xc>
 8009c64:	bd10      	pop	{r4, pc}

08009c66 <_realloc_r>:
 8009c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c6a:	4680      	mov	r8, r0
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	460e      	mov	r6, r1
 8009c70:	b921      	cbnz	r1, 8009c7c <_realloc_r+0x16>
 8009c72:	4611      	mov	r1, r2
 8009c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c78:	f7ff bc3a 	b.w	80094f0 <_malloc_r>
 8009c7c:	b92a      	cbnz	r2, 8009c8a <_realloc_r+0x24>
 8009c7e:	4625      	mov	r5, r4
 8009c80:	f7ff fbca 	bl	8009418 <_free_r>
 8009c84:	4628      	mov	r0, r5
 8009c86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c8a:	f000 f81b 	bl	8009cc4 <_malloc_usable_size_r>
 8009c8e:	4284      	cmp	r4, r0
 8009c90:	4607      	mov	r7, r0
 8009c92:	d802      	bhi.n	8009c9a <_realloc_r+0x34>
 8009c94:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c98:	d812      	bhi.n	8009cc0 <_realloc_r+0x5a>
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4640      	mov	r0, r8
 8009c9e:	f7ff fc27 	bl	80094f0 <_malloc_r>
 8009ca2:	4605      	mov	r5, r0
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d0ed      	beq.n	8009c84 <_realloc_r+0x1e>
 8009ca8:	42bc      	cmp	r4, r7
 8009caa:	4622      	mov	r2, r4
 8009cac:	4631      	mov	r1, r6
 8009cae:	bf28      	it	cs
 8009cb0:	463a      	movcs	r2, r7
 8009cb2:	f7ff ffcb 	bl	8009c4c <memcpy>
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	4640      	mov	r0, r8
 8009cba:	f7ff fbad 	bl	8009418 <_free_r>
 8009cbe:	e7e1      	b.n	8009c84 <_realloc_r+0x1e>
 8009cc0:	4635      	mov	r5, r6
 8009cc2:	e7df      	b.n	8009c84 <_realloc_r+0x1e>

08009cc4 <_malloc_usable_size_r>:
 8009cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc8:	1f18      	subs	r0, r3, #4
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	bfbc      	itt	lt
 8009cce:	580b      	ldrlt	r3, [r1, r0]
 8009cd0:	18c0      	addlt	r0, r0, r3
 8009cd2:	4770      	bx	lr

08009cd4 <_init>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	bf00      	nop
 8009cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cda:	bc08      	pop	{r3}
 8009cdc:	469e      	mov	lr, r3
 8009cde:	4770      	bx	lr

08009ce0 <_fini>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	bf00      	nop
 8009ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce6:	bc08      	pop	{r3}
 8009ce8:	469e      	mov	lr, r3
 8009cea:	4770      	bx	lr
